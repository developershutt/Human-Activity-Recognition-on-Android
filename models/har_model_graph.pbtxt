node {
  name: "lstm_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 9
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20927404
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20927404
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1018299
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/Square"
  op: "Square"
  input: "lstm_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/mul"
  op: "Mul"
  input: "lstm_1/weight_regularizer/mul/x"
  input: "lstm_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/Sum"
  op: "Sum"
  input: "lstm_1/weight_regularizer/mul"
  input: "lstm_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/add"
  op: "Add"
  input: "lstm_1/weight_regularizer/add/x"
  input: "lstm_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\3440\367\275\034\335\273\275l\253C\275\237\351{=\356Gw=m\332\265\275\251\331\010\276\032\271\023\275\277\004\\<\337\240\024>\232\322\003<O\302}=\337\234\323\275p\206\324=%\370\373;\300,U=\227\344u=\320\324\177\275\315\021\230;\370\254\"\276\345\306M>\365\344\007;\034\317\351\275\277\331\254\275\232b\230=4Z\310<wo?\275\361\235*=\310\217\\>#gC>!\310!=N\305\325=C\351\004<\007ZY=\331\365\351<\205\255\366;\376\2742=\341\235\336\275\367=\224\273\n3\326=a1\257\275\006\333\033\275\300\243\">X\317@>\272T\360:n\006\261<\327\3471\274c\227\330=\r\017\r<\031b3=\331\315\260\274x\345\373\275^\303\245\275\250\231\343=g\240\004= Q>=F\372\003\275DB\236<\\\023\345==\355f=g\027\316=\022\217f\275\312 \007\276+\277\007\274\363\363\305\275\342\234\216=\236\272\375\274\361\300\203=\354\r\341\274\222\357\247<f\303A<\342\364Z>\204\013\014\276\220\177\351\275\357\003\226\272t\254\277\275i~.=\314\321/\275\331\325\367\275+5\006\275#\232-\276K\347\221\275\177\257\260=ox\214\274[\2231=\337\253\212\274\215\231\325<iP3<\n\036\247\274\r\302\n\275%5m=\312\364\204\274\356\364!>\023\257Q>\236K\217=\226\353\030<\347\215P\275\030\014`\275\331\3238<#\343\227\275\365\3002>;\336\260=G\332\273=\260\303\033\276\322\307!\276\252\263\207\275\010\177}=\225\351\367\274\340\025\344\275\334\307S\273\232\000\301=Kc\346=\212\010\324\275\216\276\355=\311bT=\363\024\027=\2546\267</,\273\275\231\240M=#\022\317;\200\320\214=44\333\275\325!&\273\300\013\330\275\240M\277\275T\340\215\2752\203x\273\321c\t>\347\275\232<\177G\265<B\016V\275d\373\363<\025_\032=\004\377\244\275z\254?\276\344(\366;V\007\317\274\371T\210=\2001\002\2767\3504\275}1+\274\334dA>\2562q\276\001\324!\276\261\260\201\275!`V\274\250;J\275pZ\237\275\2323l\275W\323\333=\211\025\273=\200>\317=\271\226\363=\315\254\033\275\037\002(\276\2079E=\002\301f>\016\205.\276\351`0\275y\267\204\275H\303\312<T\305\225\275\232\3652\276\372\356\233\275\036\322\t=\317\t1;\233\274\253=U\333\243=\305(\307<\315T\254=\"\250r=\241\272\017\275\271\207\313\274\317\272\033\276V\022\n\275\320^\311\274\356y6\275%\373\007\275X2\373=\036cN\274;m\305\273.\215\247=\036{\316=_\323\231\2757\267\200\274\364\355\343=f\321H\276\373\031r\275~w2\274c\323\235=S\350\027=\315*\235\275L\346\351=9B\022\275\233j\322\275\261\2030=\235x\303=$xr\275\316\276\354;B\271\231\275\343\004\277;\217\352C\275\314Y\361\275\254\370]>\2531L=\3647@<t%\306=\215\276\341<\221~B<$@\016\276Y\220s\275J=\242=]\177L\275#aZ>s\017\212=ED\253\275\250\316\013>\315\221\347=|&\270\2740\365\317\274\367:@\275\237\242\354<K\304\022=\021\231\207\274\217\226\376<\227^%\275\017\311\r>\246\300\230\275}#\333\274|\007\206<&h\215=\345\231`=\306\270\234\275e\275\255\273\006p\305=\032H9>1\254A<c\265\227=p(\276==\364\234=\307\022q;\031\027R\274\364J\024>\001\333]=@\216\315<\274\325\361\275k0\013<7\2427=\260nP=w/\346=\355[c<\020\r2<h1\327\275\237\001\242=Fe\266\275ze\203\274)\343&\275fEm\275V\276\253\274\242\237\220\274?t\223<>&\022\276E\000\256\275I\377\216\275\311\213\t\276\207\210\224\275\225\023\035\276\337R\372\274\257uQ=\250\224C=J.~\274\240\030\">0\257\360\275\375\227\227<\250\267\356\2747\032\016\273\314\373\325=\000\306\311\275\271\256y=\035\254\023=\372N\214\2750\'\332\275\007\330\263\275\211\246\357\275\024\202\003>\272v\266;m\320\320=\315g\305\275\257\003\376\274em\261=\330j\225=\244\320\007>\022\303e\275E\273\037\275L\260h=D\241\355;\220Lc=\216\t\255\274G\311\311<\343\014\216\275\331dt\2734B\243;\307 D\276\3168\335\275d\202\321;\r\245\r=7\366\013>\300x\305<\253w\216\274\377\360\356=\336@V\276(\266}><\224\020>p\3333\275\265\251\203<\005\301*=\177}\372<\007\324\016>\001\272\222\274z9\210\274*4\311\274\216\002\313<\364\263\274=kU\020\276\303\034\001\276\002X\243=\327\330a<I=\337\275/\250;=2Ll\274\177\332\276\275\026d\231=\340\264\241=\354\217\307=\023\010o\2758\3741=q\013\346\274\222\t\220\275*\355\035\275J52>fg\241\275\034\344k\274\273\203\213\274~\360\202<9NV\275_\272\275\275\\\264#\276;\217\007\276\301\273\327\274\022\264L=Uce=\365\343\023\275\306 Q\276\2665}<M\340\322\2757\376\233\275`Ck<\361\361S\275|\032,\275\355\271\230;zK\314\274\010\212 \276\211\264\227\274b\036\301\275\020\247@\274f\373(\276q\346\321\274\1778\\\275\033\372\311=\342T\210\275\204K\260\275\222\"\014\276\360\3149=K(\324<\267\177;<\303&\246\275\277&\\>\021R`=\025^\314=QF\235\271\210\247n\275\342)\272=\217\260\010>\374\036\354\275\204vc<\243\2029\275\262\022\327\275\244\221C=\214)k\272\310!\202=V+\242=B\013\205=Gp\035\275\360\212\030>\236\207\212\274E\355\300\275\215\331\331<a0X=5\264N<V\260\253\275\016\356\005=\023\001\227\275\310\036\014>5\257S\275\365\277\215=\3254\212=\352\233\246\274\223\214\024=s)\003<\2740P=@x\276=\"\223$\276\037\2212=N9\224=\323\366\240=\367\315\350<\236y\277<=\327\245\275\240\316\025=wD\000\276\224*\036\276J\345\265;n\256&\276\0273\035=l\301\004>iez\2751n\356\274P\266\247=\027\036\235=\266\343a\275\357\232-\276n\253-\276Q\300\016=\257\001-\276\242\346==\344\225\016=\261\000 \275A\r\323\274e\360\372=\257\366\361<I0\267<\021/\007\276\355\344\220<\333\350\351\273\366\343\232<\0204\276\274P\370\313\275\232\255\033=}\204;;\372\200\250\275\276ii\276\2372\337=\002\276S>\317a\205\276\225\016\221=H\220\361<\360\324u\274\217\213\026\274\355L\253\274\223\357\3159%j\233=\005\004t\275\000\276\300<\001yB>\325\375 >\274S\340=\017\330\330\274\033\230/<M\247\306\275\216\353\325\274$\235v\275\356\345\\=;\223\354\275\262\277\344\275T\310\240\273j\024\203\275\203\352\362\275\353\273F=~\367\206\275ay\214\275|\247\247\274O\376\246\274\320.\374<\317\3719\275\272;\025\276\001\301\337<v/\017\274\320\216\017=\312r\303=\024\206\301\275:`/>\350J\272\275\301{\261=5Y(\276\\\237\002\275\263\034\303=\006\246\204<\214\"\200\275X\035\300\274>\235\366\274)mH>@\272\311\275^a,\275\235\261-=q\263E\274\020\364\306\275\274]o=\022\224\252\274$\233\032=o\215\024\276#~\006>\365\345W=\000\252\\:\367\007\027\276\310K\203\2751k\217\275YJ\241<\221\t)>\243\231\025\276\250\033\313\275\024%C>,\234\253\274S\322\364\274b\034Y=\366\233\344\274\232^A<\250\301\230;m\317\201=r\220\013\276\246\260?\276\244\266\203\276\236\243\242=\212\3034=\372\213m\275oC#<\216f\177\274N\242\235;\025\357\375=\345\322B\275\r4\367\275\340\247\247;h\257\006<\3479\225<%\210\260=\211w\317\275vXG\275\350\253(>\300\n\261=\303&\325\274qs\316\275\004w9=\303\223Y\275\001\260\026\275\377\002\225=\275\215`<\243\016\223\274`\021\230\275\332\306\226\275\204\321\004\271=`\244\273\025\300\023\275\234Y\237=\364\"\223=E\213:\275\355\230\210=\255`^\275;\2650=\276n\034<\037T \276\311\303\020\275\276\001\256=IR\203>\275\263h\275i\022\214<\016g\277\275B\322\002\276Ud\277=\331\251\220\273\202\375\252<\326\306\335\275r;\356<sE\223\275@Q9\2756\366K<R\363\033<\247\210\345=\007\372\232<|\005\321;L`x=\"\215\016\275\023\367\025\276\250\372\231<S\013\343=\\\267[\275\030k\314\274\3767%\2752\270\343=`\016$>9<\233\275G\311R=\037,)>\254V\002>\005\303\034\275\023\274\020\275;\367\346<\037\007\376\275 \234\211:\221\301\232=<\037\3729Z\305\327\2759@x\275\201@G=[\031a\275I\303\004>\276\010\014=>\001\243=\354\016H\275\266\227y\275\256Z\215=S\020@>\237\207\316=+M\202\275\r\315\346\275\234\213\302<\344\300\352=\257\\\275=x9\356\275h\016\372\275\006Q-=S_x\274\"\251;\276v\340\006<\233\265\322\275\251Ge\275\342\2578=\245bE;N\205\375=\264\304\375\274\343\357\364\273D\366\036>i\223\032=\245;\207=\273\030s\275\nA:\276g\\\250\273\247\016\271=&|\226\275\332\252\211=\305\341\237\275b)\037</\002\212<*\000p=)\221i\275\266\030-\275\265\231(=\022ap\274\306x\032\275M\212\237\275\307\264\"=fI\006\276\240\231\004\276\221\243\226=\234h\226\275\204\275\022<\375\316/\275\2673\326\275\357\275\r\276jg\000\276\305\231\305<\031)\001=\227\225\203\274\344\323\234\275\210}O<\350\340\211\275!T\326<\274\220Z\275\223\377\030>\313\354A<\303]u=3\230\035\273\321\226\034>\233\272\260\275\216\0165>\331E\006=\362,\010\275Se\007\276j\024\271< n\275=\204\030\240\275dj \276\337\351\216<7\036\362=\323\317a=Z\264a\275\202\262\210\274?\315\255\275\333s\010>\262\3740\276\031\320\242=8\206\245\274B\322z=\312\324\315\275\204\367I\275dC\204\276e\367/>;\200\203\275@OQ>y\342\030\276\365\356\"\275:\023\262\275y.\000>\317\311P>\037\227\016\274V\232k=\215\024\304:d6\323\274\337\330F=\263\320\357=\000A\224=\371\352\"=:\203\303\275\245i\031\276#q\342=m_\002\274\177a#>\003\023\221\275(\250E=\204\023I\275\206\250\324\275<\016l\275\344\365\253=\322\352\354\275o\231\211=<|\t\2752\313\241=~i%=\263\320\234\275yT5=\316\310\007>\334\nS;\036\360\033\276y\361c\275{\221\323\275\237\016\344=\270+\244=\251\366\221\275\217Or:\366Fo=\002\320\325\275v\'\271<\356`\211\275\345\0201\275w\367\254\274@\254Z\275\2657\233<\262\342\373=g\025[\275\224\212m=\224\225\247=TV!\275}\026\227\274\221R\017\276\237\021\211\273\007Z/\2750;\267=wQ\244\274)\321Q\274\225@f\275Y\222\345<HA|=\2403\221=\257!\037\274RP`=q\204o\275\215\214\263<\257j\317\275S\272\256=\034\376==@\213b:\007\177-\275@\355\010>Ml\301\274;u\260\274\242\2233\275\350\367x:\251\356\332\274\313\344\036\275\303\357Z\275\306\001Z\274^\212&=a\344\002>k\306\\<\216\351\272;\331}\222\275\306\003\006>\247\221e\275\231\220g=n$\323\275x]B\275\205\0364\274\376\336\311=\2471\267\275\243!\225>\270\320!\276<\227X\2750\026\367\275\363\020\017>w\025\310\275\023e\211\274J\255\244=\213\271\211=\321\370\022\276\022\210)\2733R\205<\232\037\321\273\3339\214=\177d\344<wi\350;\020-\276\274\257\312\227=K5\034=\2055\205=\243l\006\275\000[\266<\235\026\270;\340\033K=\241\355\277\274\2465\236=Cwx=ls\014;\277q\006;(0\334\275\343 N<\255{\242\274\366\232=\275\266\300\017\276\203\230\240\274\335D3=\2116Q\274\013w\'\276\336\341\274<\035\033\377\274\307\207*<\213\231\333\275Vg==\004\037C<\334\344\304=\351\377\264\275i\343\347\274\271h\347=o\023\232\275\372\310\026=Wf\010>O\333\014=\204\270\\=\332\310\320=\tB\225\275\204\256\"\276\257\353`>7gV\275\257\366I>\324)\317;\271E\315\275#=\033\276`e-<\022\243\227;\021\361\372=e\356`\276\\\371\262<eLs=\204\355\264=\250\022\345\2754\232[;|#\331=f\273Q<;\314\360\275\223\3109=U=\003=\2516\023>\311\334F\273\177\261N=\367\362N\276W\"z<b\364\223<UV\266\275\245\325\203\275\212\275\005;Yu,=\032\304\212;\020\304\312\275J\252\261=\321N\206>\332f\322<\014 \'\275\356Q\031=\377\274i>6\345\246\2751q\002=\025F\350=\365\340\\=<l\265<\304\022\315=j\212=\274\203\253\317\275\377\354Q\275\355\313]=P>\327=H@9\276%\274.\276\262\367;>\237h\270<\223\255\004>\342\245\271\275\204W\264\274u\310!;\177\272\353\274`jo\275+kg=P\020\301\273\224\317\214=\200Y\330<\007\266\205=\005\251\222=!Lm=5\202\240<t>G>Aj\216\274Xb7\2751G\307\275lF\037=>o\364<4R\037=\242\2210\275C\262\014\276\340\324;\274mK\035>d\367\365\275\254O1>F\244\320=\352d\305<B\211?\276l\205\312=\025\213\354\2733\351\237\275\001\3537\271\205\252\320;,\261\025\275\355\244\024>a\237\355=*cd\275\2774\331=\003@\265\275\267\253\305=o\311\226=\\\t\216\273`\307\255=\317N\236=\367\016\257\275c\177\213\275\200\245\213\275\2402\013=M1m\276\024#\005>\310\233\215\274)&\254=\233\246\000\275\261\2366\275\277\305\254\275M\3316>\026X\365<9\265\344=\262$\314\275g\0163\276A\026W=6x\351<\322\007\032>\351\014\223\274\006\234\320:?\272\271<\226\014\272=?\265@\276\006 \032\275OP\304=\n\341\204=\304u\231\275\\\031\031\275C\220\031\276\267\023s\275C\357\320\275\330v\336\275\016H(=\360``=\233\013\r\275\355\313O\275\225HA\275\016\"\237\274>\357\275<N\031\221\273s\366\036>\034_\212<P\324\305=\337\353\000>\350\030\007\275\332\375)=M\230u\275eM%\274\372\214\262=(=\357<\t\036\341<hl\311<5J_=\251\010,=\312\253\004\276\026\013\307<\373\376\371=\356\304\227=\355\255K\273H \311=\200p\222\275\246\235\327\271\375\3022\275v9`=\033y\035>\254\210\230=^\332\262;\237s\252\275\371\301\342<\377)\266<\226p\022=n\025\337\275\005\"\215\275\242\254\331\274\236\365\356=\032\264\\=\207\021b=\367\250\003\276\216\276\261\275\344\2242=\202\021\262\274xi4=@\366==\211s\261=\2545\345<\236\370\026=^\331\277=\371\346.\275\034\324d=\223e\205=\354X\022=X.->\233g9>\313\331k\275\006\227N\275K\301\220=m\226\263\275V\371\032\276\014\3016=\255\251\202>\034\326k\275\034\216\337\275\377.,>B| >\005M\037=\317\255<\276hf5<\255\274\242=\311\215\232;}x\311\273v\036\315\275\006c\264\274\252\377\362=\244\267\267\275q5\341<I\001\000>\3354\334=}2\300\274\257~\020=\233r\234\275\251\020\210\274j\034a=\362\364\004\276\307%$\2763?\220\275\316?\232<\377\254;>m\304*=J\251\325<\034cQ=\345\260[<zG\275=\037\230\341\274_\364\305=1\037\211<\036\214\364\275.L,>$\014\320\275\030\031\262\275\277}\260\274\262&\323\274\326\031\356=xP\230\274\264\311^={:\223\272\323\375\355\275A\221#\275\001\202C\276[m\363\275\210\3374\275\006\222\275\274i\226\272\275\277}\207=\\\371R\275H`X\275U%\t=\254E\240=\256R\242\275\231\210\367=x\027)\275*\256q<\037\217&>1\237\027\275\355\254\022\275\206\272\311<\232~\203;\345n\265\275\023\017m\275C\241\344;-\342?\275\307|\203>\375\002j\275\203\354\020>\213\271\254\274\\\274\032<\341v\320\274\204\273\267=\310#@\275\\\375b\2745h\031>\2230?=\316P\247\274\023\212\224\275*\326\233\274\366B\212\274\316\237,\276@\234\272\274`\013\366\275\035q:<*\215\200=#\001^=,:\251=\234\336\313=\020\376\206<\0007\352;\036XD=\301\301.\275e\"O=c\263\320<\360\210i=\20602\275`rO\276\324g\327\275m.B=\365\307\027\275Z[\374=\351\262\020=D\206\331;X/\031>\035\n\341\2753\222r\273\373!\303=`\372\241=n\025!\276P\212O<\303O\016\276\241\032\033=(j\237\275\2603\027>+;\221\274\030U\250\272\340\'\252\275IW@=\306\364\365\275\364\017+\275jj\347\274\260\224\271=z\357(\2751\362\264\275\231\352?>\221hu\274\024\357?=\374\001\357\274\276\026\027>p.R=\206D[>\344\244h=,\022\032=pi\263<\343](=\231\377$=,\323\263=\206\3476\275\262!\205;\262\251\335\273\000Z\r==C$\275\364\216\030=\374\357a\276\311\270$=\345qe8\363Z\326;\224\317\r\276\341\013\311\275)7\331=\370\367\031\276\026\025\325=\236\372\034>d\263o=mZ\206=Q3B\273\007\211\244=\366de=|#\224=\270\2634\275$h\370=\201\254`=\351\007\n\276\364\371\005>n\215\243\275\232\316&=\035\217\226<\270\261}\275|{\257\274d\257H=\303l3\276\027\025\300\274^C?=\353\204\231=R\243\255\275\345\247i={\n\240=\\\303\207\275\021N7:\315\370\365=G;9=\021e$\276\237?%\276[\312l=8\0075=\014}9>?\267,\276\376\251\n=T\325W=\377F\327\275\373\356/\275\346\247@<\023a)=\014\276H<M,?\275\236\253}\275\032\206\276=\244\301\334=\364\014\243\275\302]v\275\010\273\334=\001\362E=\177<\260\273\2479\360\275\241\276\026\276cn\255\275\343\375\007\274\327]\217<\226\214\326<_\231\204\274T\375Q\274\016\t\026>q\216\264=qM\277\2733\240\251\275\304\025\006>o\031\000>\217\205\304\272\022+\344\273\357\r\211=\t\277\355<r\no\273}\252\031=Z\014\236\272|k\003>ZQ-\275\003\2663>\234\372^\275G\356o= E\274\275\"mE\276\0005\306\275\0264\264=\013*\253\275m)\212<D\364Y<\263\303t=\022\245\304\274\261Ip\275\257\242E\274iY\373=\036\323\377\273\351\3277\274\243\257\372\275\237\320d;?\203\354\275\225k\267=/\223\217\276\251\357\233=P\204\273=A\2601=k\010\370\274\r\377\354=\353\267\244\275_\377\237\274\264\311\007=\2234<=8`\377<\321\037l\275\352\326\354\275w\334\243<\262(\003>_.\314\275\350\301\327\274\216>\355=\266}3\276\333\224\013>\376|\246\274LU#=\r(B\271\230X\231=\202U \276R+\210=\203\230\233=&$\324\274p\264\220\273 \001}=\023R\244\275\361\014s=\021P\277\275\334c\005\2764\332\350\275\352\250\314\275\245\3275\276C;\251\274x\355H>\367\325\020=y\321\260<\337cj\275|\324\305\274\023Q\266<\2530\346<\n_0\275\362\376\025\274d\320\335\275lM\225=\202\354\226=>M\253=\361\266\345\275-\023\022\274\314\231\332=IH\274=-\322\240\275\263T\205\273C\237\236;\035\351\005=\327/\212\274\253\021N<\016F\230=IoB=\245C\006\276{~\342\274\353i\230\275e8\373\274\316\201i\275\177\n\025\275\200\353v\275\352Mf=V\'\235=$\014\342\275\024\334\267\2750\262_>g\224\320\274\313i\267\275F\257\230;\272\264\234\275\005\034\017>\227\242\334=\010]\221=\037\200l<b\331?>\016c5>q\334\211\275}\221o:\200\232\266\275R\327\307=\351\230\310=\006)\334=\201\336\273<\264\257\375=p\2751\275\246\0264>\350\217\2129\315\242\210<\321s\265\273!\334\361=e\204\326\275\323c\004>\007\233\257<\034\345\n\275\305)\272<\356\341?>\013\214\272\275\342B\243\275W9\200=\270\260\010\275\205\001\034\276\250\263=\275\347\027D=\356\232b=\263Z\331=J9@\275\311\361\304\274C!\231\274\225\355\324\275\256=\221\275\316\203\351\274\317O\'\275\303\033\256=\224\026;>\263T*=\377\333\264<\314\024I=Mk\345=\354\306\245\2740\013Q=\332%\370=\303\232N\2769@\325\275\301O\261=\005\314\003>\323\232\342;=\341m>4\353\017>\021\234\323=\023\000\230=\325\3175=.\313\316\275}J\206\275\314\262\344=\203\366\240\275.\361]\275aY\010>\275\310T=\033\303\222=v1\"=\025u\247=y\200\263=\022Z\353\275\023\276\"=Mf\200\275\014w\'\276\201^\242<\240\344\302\275\243oM\274\310]V\276h\360\375<D6?\276\0067l=\034\010v\275\373\313\273=\323\353\035\274\207\240=\274\235\231\022\276\344\0066\274\221D\">ew\326<0\2428\275\212\345\276=\027\251\337\275\017\024k=\231\361\'\276lC\336\274\036\027*=]\031\216=\345\217\213;\\\362\274\273m\260\320\275\022\211X=B\035\234=u\250\313\275\373\345\234=\351R\243\275\267H,\275\010\036\255\275\237\341->3\370,=\003P&=\217%\001\274\273\315\307=\267\027\222<\356\226w;\270\206M;\265\022y<\317\370z\275\225,\204\2742\363/>\235\311\271\275\307\206\306=\202\275\215\274\247\364\271\274\240l\223=\252FC\275\315\353%\276]\372\304\275\2533\273<\264\373a:\275w\375\275\225s\354\274\253\017\346\275\036S\251\275\036\2024\274\336\363#=I\361P=e\3108\275\020\350\361\274\304R\331=\311\213*\275\020\2760;\240\334\354\275\202\2511\275\266r\002\275\031\216\277<B\322\002\276\023=\311\274\002f\216\275m\340&<G\3507\276\252\360O=<Te\275\215\352\242\275\316\372A\275J\200O=\367\333\t>Z\373\255<\235\250L\275et\274=\371\316\352\275Q;\346\275=\225\243;\306^8=\026;\323:\200\242\215\275k\242\262=\337\200\001\274\343jh<&2\025\276\234}\260\272\265\r\346\275\017`\322=\265\313\t=Ve\n\274A:\347=\n\353\256:\016l\234\274\3032$\275\226\266\230\273O\001\\>\335\330\257;$\306W=\3132\247=5;|\275G$0=\344;\t>\037^\016\276x%\205\276\330\231\026\276\317)\034>\321:\024\275\337\033\016\276\237v\240=/0\333<\361\376\203=\034\316\231<\r\316\211\275F\305\001>\010\036\244=\212\007\270\273\263B\t\275\321\240\344=\273 \305\274\3665\240=&\250\377=rgM\274S;\020=\275*W>\233\265\330=\021\001t\275R\311N\276\023jc;\245\230\254;GxM=\356\214r=5b\234=\374\022\373=\261w\254=\204\033\253=XF\227\275\277\364\332=L\350\323=\242\235\317\275\376)0<\277\270J\276\rVf\275Gb\301\274SC\336;\310\3349\275fW\252<\205%\311\275\211w\331=\323xG=\371\241\300;J~\014\275z\314\t\276T*\264\275`\254\257\275\225@\031\275\2742\324<5\332\021\276J\\\341<FW\236=)\013\016>P\331\322=\207\250%\275\253\311[=\027s\005>\013\341\271=u|\367\274\2246:;eW\317=\260\016X=\305\235\214\274\247\320A=\351\2326\275\303\275\351\274%:\255\274%@\004>(\316M=#\307\002\275\346;\013\276.\314\r\2735+\006=\354\304x\275\260\261\311\275\033\347\356<*\210\374<I\3418=\304\350\"\275\216W+>m\211\030\274\334\035\366=.\030d\276\215M\">\343-\307\274F\252d=Io\210<\202s\317\275A\023\204\274r\017\371\275\3061&>D8\237\275\032w\271\275\340G\001>P\0249\275\203x\335<WfA\2752+5=A\363I>\033\2607\275\220\365\324\274T\200\346\275\177\2053\275\010ih=)\260]<\374\305>\275\323\234\300=\320\025\022\276/\r\013>h>l=\227\315\236\275\241\370\203\274\017;P<\2551(>\344;c=\177cq\275\017\304M<\271 \343\275\"!\035\276\227*\234\275\273\212\3109\311\336\341=\206\337\267\274\354y\212\271\340:\241\275\246\314D=v\231\024\275\221\325J\275\370\254>\275\270\004\354=A\346\205\276/\360\221\275=\356^=\030\243\227=@L\373<o)W;Y\245+\276\307\354\317\275\325tV=q3U\275\261\331\t<d-t\274\340A\022<\241T6>\253&\312<.D\367<\316t\250=\206\324(=\203\351\325\274\333\'\350<1\'\t\276\203[\253\275\273\3147=\006\213\333\275\353h\212=\340\234O<s\305\233\275\324\n\263=_\332V<u?t=\364\033\225\275\222\376V>\211=\352\275\254\236\204<\204\020\344\274\246A\200\275\212h\201\275\323\277\023\275%\251\235\274A=B\275\267@\343=t,V=$s\007=5y\001\275\376h\207\275\216\350I=\340\014\211\275\036g%>>C\307\274\273`\023<\207 \264\275{3<>r\324\337<\313\002V<\301\0149;N\232\005>\273\361h=O\301%\275k2\312<\272:\304\275\002\"\300\275\365H\353<\006\260\205>\221\341N\275\325\322\331<\363`\306<\305\177\350\275_\356\351\275\r}\224\274\254\230\231;\215\005\223=\233l&<\211\360\271\275\340U\370\275{\250\217\275\300C\210<0S\002>\244\306\210\275S\242\212\274R\254\027<B\225\253:\233~\324=\\\343\031=\277\364\027>\311\260\357=ke\007=\237\026D>n\336R\275\236\331m=H\027\275==\202\351=\2173\021\274\353\243\245=#&\002\275`}\261\274Ra\220\275\347\215\274\275\321\346\202=0\177\356\275_H\335\274\251Z{\275\364dm<.\303\013\276\001k\022>\344\037\306=\022\")\274\247\035-\276w9\244\275\037p\355=\233_\231=\320\256l\275\3251\013>\344l\345=\214\016t=8\205\025\274\354\027\275\274P\332K\275.l\336<\3679\260;O\244\334\275ZU\234\275\001A\026\276\'\327\211\274l\002\010\275q\204\263\275\261\241.\276\301\234b<\231\260\n=\263\211\240=\"\0348=eI\256=\355\201\312:2\354\307\274\277\253\317\275W\364-\275\025\317\031\276\273\262\331=\321\304\010\274\210\035\343=\262\222\245\275\014\026\274\274\331\030+=9\374\206<\013\303\007>\246kq\275\361P\353\275\253\344-\275\315D\202\275\263q\372\275\033\321\254=\276]]\275\301\245\200<\351\216\001\275\337?\242\275\370\000\246\275\332;\332\274\247o\264=\201\034F\276\365\273d=\361a\003;\005:F\275\215.I\276\n-\227=}\332J\275#<1\276\220|\263=[\272\360\275\023\027\010\275T\332k\275\320\021\311\275\203X\370\274\325\202\026\275e\3373\273\301\201\205\273\215\275\347=\377\327\343=;\251\250\274Q\350\265\275\205-\001\276Qi\227=\242\337\373\274\033\301|=\006\345\177\275\013\016\202\275#^6\275\200~\323=\'*\006>\3718O=\r\224`>\311v\017=x\036\236\273\230)u=y\010r\275\373..\2769\312\025\275\210\2712=\306\212\225\275\327)A>\004\333;\2750\020v\275\222L\217=8-~\275\231B\031\275\257\204V=,\023\303=\034\352\345=\333\240\010>\226\342\205=\017W\237=\356\232\341=\341&\254\275\343V\304<\363\314\230\275\234\3335\274\322\025\027>\003\252.>\350\\d\275q\336\247\275\337\277R\275\232\247\313\273m;b;N\005\202\275\021Y:=B\214\237\2750\213\315\2758\374T=x\324\273=\225V\302<\263Z\315=\305\014)\276\246\262E\274\244\335\373\275\340\r\361\275\337\017\362=\000\317\235=\272\216\257\275G2p=\226\353\013=|\260V\273\374$:=\203\352W=\351C\001\276\227\300e\275\227T\367<\2636\023=i-X\274\263\036\013=\177\'\225=%E\204=\232\242\037\275\2014\003>5\033\261\275eaA=Z\320\371\275\1773\213\273\214\324\267=\'\002\363\2747\021F<\227\0165\276k\217j\275\241\003O>\000\340,\276\306\212/;/\343\254=\024+I\275\246A\222=\250.>\275\352tm\275\313\014\004>\336X9>;\364Z=S\342\275\275\374h\236<I}\213=\341\261\332\273\256\2774=\300\373\204=\010C->\301\274\355=\203\005\230\275\325M\273\275\020\366\004>\021\333U=\333\206F=\244\276\323<\r8\017>B\263\267\274\020\257\267=\207\370\233\275H^\002\276\275\313\313\273S\333\007\275\237N\220\275\326G\275=[\211\320\275\365\315*\275\273D\363\275\270\373N\275\226\251\305\275\024\353\341\275\375`\027=\353\362\223<\254\340!\276\330^\200=M\370\226\274z\355\222<\302\242\277=A\225B<2\'\004>\201\321\276=\0226A>]\313\020\274\264\217\030=\243\363\236=\310wA=\257\322\304=P<\037=\205\316\200\274\373\211(\273\365^\316=\345\203p=\277\035\020=\2355$<\345\327;\276\025\020\201==A\034>\322\340\220=\330\363\265=\314aX=?3\367;`\030i\276\361\247\253\274\277\334\033\275\016\026\\\275\263b\342\274\305\367\035>\273\224\351=\271\304\227=\215\273,\274z\234s\2756\335\263\275\332\313\246\275>\211\271<\377\320\252\274\366G\036\276\0179>=@\250\036\275\216&\336\2756*\340\274\030\335)>NQ1\275\030h\223<\014\3379>\334C\016\276\300P\230\275\364!\275\274i(a\275\230\323\235\271\010\322\367\274\2136\346<\264\231\251<8\221\241=\353\220\205=i\307\256=\336\246\325\275o,P=:d\302\275\245\260\307=m+#\275\226\002\234\274\243\031\003\274\216\314\003\276^\013g\275\230,\025\274/\213F\276\347\030\305\275\203\215\203=\222\215>>!\246\013\275\254h\251\273\035\002\030=A\300\231\275]o\013>\306\322\">\311\035\"\276\\\377\033\275\365\302\370\275\346\"\363<\234\250U=\0016\203=\371 \372\275\310\017\346=\332\363\365<%\251;>\344\213c\275\245}\377=\0361\332=\260\224\032<%\205\237\275\357\260\310<Ey\037\275?\265\241\275Hv\262=\225\217`\275L\373\302\275\273L\026=\355A\010\2762\"\017=\311\356\000>M\221s=\026\023\272\274Q\236%>\013Y\013>n>\313=\025\242\203=x\274\246\275\023\272\005>\202\234\360\275\374\350\362<\226V\377\273\335\203\203;\364,\014<\251\274\306\275\256<\346\274\202\306\376\275H4\323\275\000\277\014\276v\273Q=\202\200\200=\3536\n\274\330qY=\231\330\371;\347 g\274f &\276\325\327\371\274q\236\302\275\001<\347=\203\324T\275\273\306\303\275=\225\374\274\304IW\274\274\317\202\275\311a\244=\227Y\250\275\265\251,>\222\252\234\275k\033\231\275\220\267\023=\377\346\356\275%g\003=}\205\r=2\341\010>\254j\306=\021\226\333<\\\020z\2753\'$\276A\310\006\276\360\351/=\324YK<%*\031\275M\014S;\037W\010\276\001\301\320\275Q\374<\274n\024\333=\307\252\000\276\220\356\265;\347{\337<P\373\327=\226\233\2229\2762\274\2756\316\n\275\005\355\006\273\222\205\324:\325\'\240=\303\214\226=\027\037\034\275\324\025W\275\266\231v\275Nx\356\274\335<t\275\005\327v;j\357d\274\245c\207=\216b\340\275\2266%\276\276\225\244<\342\250\230\2744\217m>\346\212*\276y\240n<\312\263\331\275X\r\241\275S\271\340=\"\367H=T\037}=\337\017\025>\342\217\257=h3I\275,[\\\275E\305\034<\243Cd\275\256i\010\276\'\023\026=\036B\210<\024?V=QT\365=~c\r\276\244\376{=\203\371\316;\357\027\267\274\371m\235\275/3&\276\246MW\275\372f\220\275\205\327\016\274\006D\365\275\210}\275=\324\247\375=U\212\214=6\230/=8Z\211\275\350\274\370=\354b\257\275\025G\206\275\334\020\034>\232\226\224\275[\365\217=#\374\n\276!\317->\3241?>\310;\033\276\005\325\250;\r\335\242\275I\213\207;w8K\275>V\202<\224Q\023\275\006n\344\274\270;\326=\203?\335\275\234]C\274\232\231~>\376%t=\020\022\306=\026\017\013\274\342q+<\020\365S\274\033\253w;\002\271\350;\206\321`\274\365Px=w\277\r\276\276\204\024>\215\251>\273$\313.\276\336\344\326=\213\235\255=\210K\365\275f*\315\275T\260\343=%\"\023\275\300\300\242<\214\232\301<\203\004[\275\324~;<Y\215\312<\030\304\214<\3361\032;\026\363->\021\220\020\274\353\205\231\273@\202\372\273\303J\211=m\001c\2755Y\262=\250\264\306\275/\027\357=\036\323P\276{8\362\274f,\001\276\255\267\200\275\235\327\320\274\316\377\236\274\254K\221\275\261\276\235=\317\234\377\274\256\217\371\275\207\230\303\275G\264\326<v\373\300<0\266\210=~\240\326=\223\366*\27614^\275#\237<=\333\250\024=\226\342>\274\\\377\017=\222\206D\275\347\335/\276\267\014\351\275\t00=F8\033>;Z\024=36\036\276\275\217\027\275\014\216C\275?\355[=\022\203\260==K\252\275\262I4\276\213\367\252=\241\227\267<\261\017V\275\324\365\336\274\343g\251=+\277\377=\367\224\343\274\216\220!\275Bo6\276\030O\224;\0134\302\27523\036<\234\313\243=z\000\036\276\352\321\252=\322\217A\2752\233\223<\203tI\275(\335\364\274\034`U\275\326\273\343\275\351\204\302=\374<\302\275?P\242\275\200\306N\276\2743\267<\242_\325\274\342N\363=4\216\004\275\305\037Z\276cH\337=\266K\260\272\352\n\303\274\322\310\246<\311tZ\275\322\031==\3475\033\2752~\"=k\214\031<]_\343=\360\034\024\275\374\304c\275\375|C=\334\241\374\275\370ec\275\264\270\257<\273\320C;\2524\346\274\222\306)=)\304\336\2753\017T>\342\332\026<b\367\201=2\231\264=\220\250\342\274_\367\256\274\313\223\033=\220\341\265\275L\224\251\275\345\016\016=1+F\275.j\233\275\327n\204\274\374\356]\276\222\023x\276\324a\203\274\030^o=F\377\311\274\325\373\211=\024\340\345<x \262=I\372\236\273\"S\324\275\370\344\201\274\353\202\261;\314\023\036\275\371\322\212<\330\254\005>\002\243\371;\223\242\\\276\310\274\234=\026\351\014\276\317\232\215\275\353\215\021\276z9[<\r\206C\272\037\267p<\224\024\360=5\300Y\275\212\331)<\303\326\200<\326\311\347\275\215\266\220\275\342\'b=\347\325z\275\245\251\022=nW\262=\256\226\005=\004\226\366\274\242\330A<\345:\001>\345\313+>>C\214\275\326\230<\274+\221\001\276\024N\353;\237\t\034>\036\320\261<\375w5\276>\311f=aN\276=\255sQ=a\273m\276 (\323=d!(=j9\006\272\237;\323\273\353\224\232<\r\032\322;\003\224\347=V\260\037=i^\021=\0170.=e\237\332\274 x\300\275T5\325<~\263\013\275ww\261\272\244\004\251=\314u\232\275[)_\275K\237\371=y\017?\275\364\206\312=a~\n=\014\033\014>k_J>\001;\231\274\241\000\350\274\226\371p=\351\000\021=\237\277\227\275J7[=\345\300\277\274\254\265\325:iE\000\275\237&V\274\235\023\210\274\023E\254<*hO>\257\004\001<2\021m=C\3501>s\220\317\274\320\\\277<\300\305S=Y\257\023=\311\260\335\274\264K\326=Z\200\207=\031\301\364<lX\303\275\277\346\301=]\\\245=BR2=7\375\000\276\263\346E\275\277\003j\272\312\251\334\275\335\324f\276\312[7>\266\234\341\270\013\220\361=\356Y6=UxX\273;\276\001\2762\"\260<\324K2\275Y\006%>\225\2172\274@\204\323<\227C<\275\320\302\t\275_\335\207\275\214ot\275%g\236=?|e>\351a\021=\310x\032=,\r%\275\035\263\010=\013\233\247\274\232\020\214=\302\266\347=\245\330\n\276\267\027\332=c\334\362=E\220\225=\275\332\222\275-\340+=\033\262\020>\200?Q\275#\204\037\276\270\020\212\275\373\251\352\2741\257\306<$Y\277\275\r\234\010>\337\032Y=\353d`\276\272\313\313=\010z#\276\003\356&\275,\327\223\275\364?\270=\270\267\002\276\372\277o<\030\256\360<\014\276\306=\267yJ=\315~\000\276\017tL=89\360\275\204\2709\274a\277\214<\025\032\326<\260\217\262<\347\315\'\276M\223\236=Pn\020=\357_\334<|D\247\275\036*\217<\317\251\010=\352\"+=\351\247\304\275n\327\353<\321\365\017\276\035u\024\275\242))\276ke\342\275\367&5\275\277\336\370\275j\377\033=)\361\307=\240\022d;\t\245\013\275\036\217\271\274\205\267\020>\200\177\347<,hC\275)\216\237\275[C6\274\013\223\031\274\314\232\026\276X\254\225;\330L\001\275\333\352H=f\376\277\275\0040$\276\004;\340\275l\270\210\275>\234:=\210\327\221=f\323\016>\222h\035>\242+U=\016_\024=w\374\347<\nM\024\274\362_\252\275\355A\254=\220\346\207\275\004\345\234=\336\334K<Z\030\232\275w\027\224=\263Eh\275c\374\204>\214$J=\016h+\274\227\202\241=\230!\315\274\343\217\306=\264S\312\275\370\031\221\274\326\tN=\336\253u=\202\372\332=\253\0057\274\027\355\220\275+\261\217\273\275\337\213\274\204\307\236<K\212\365\275\330\267\235\275\250*\306\275I\2041>\005\002F=\230\223\226<\323\275\003\276%\302\245\275Q\037H=\030|\354=\364e\000>\237\205 \276\266]\376=\266\377\332\275\341\347w=\245t\303\2754l\024>\343\307\003\276\340\262f=\336W\355\275\316\013\237\274\217e\232\275\375y\n=\341y\322<\340\353\204<m\256E=\304\303\365\274\240\377\343\275a`;\276M\252\267\274K\007=>|d\003\276N\306\373;\356\"n=\357\243\250=\322\034\003\275%4\345=\2016\213\275\244\3516=Y\320\375\274=Q\252\274\206\314\254\275\241\363\207<\005\353\226=k\326\257=\317s\006=1\211\005>\272\353\306<\316\270\347\2757C\272=\222\220\254=GQ1<\032\215\001=\310\230\202\275\300c\036\276Rd\346\275w\241\252\275\263\263\315\274\206\270\321\275\210$C\274d?F:\027\264\014\276>\307\320\275&)\014=\"J\363\275\331)\277;\000\207\034\275\312R{\275&\352\002>|\272\027\276\352Z\232=J\031.\276r\260\244\275\200\213.>\355\263=<\004\242\370<\021b;>\020\326\222;\212\337\201\274\240\343\'>qXE\275\'\272\216=\355$\262\275\300\250\314<.B+\275z\275\223<\353\254\357=G\217\023\274\010&\331\275t\345\370\274\365\274\231\275\316\345A\276\252|;\275\224x\000>:\265\231\275\330f\345\274\025\304\035\275\240\250l=\337\034\210=\346\276:=\020\374\023=\026_2\276bX\341=c\274\330\274\353\005\361:9\266\234=\310\252\274=\277\257\2249J\307\247;Q<\025=~\245\005\276\354\367\312=\021\326\222\275\0167\303=\376\207h\275J]6\276\037\316\031\273\3358\010\275\t\346\326=\260)h\275\365\273\267\275\000x5=v&\344=\"`\177=C\267\006<G0\247\275\373\027\253=Z\030\352\273T\025$\276,9V\275\312\372\216\275\315\215\261<\356\212\211=\036A\267:\304\221\314=[\177\006>^\211W<\307\234A\274]K\'\275P\305\213\275}I\273;\023]9\275hH\302\273|S\002>\20233=s\325\021\275\241T->\026\210%>\363\370\267\275 \242\005\275\236\t\000\275\203\373\343=\350\310Q\274\211\221\355\2711\020\010\275\224\312\005\275\363\324\177\275Z2-=&\032\003=-p\364;s\355\265\2752\261\021\276\r\207\374=E\277\263=^\303\271=ua\003\276\200ka=\037\200\004=\303m\370\275\313\355\322<\203\224?\275\337\350\375=\017\006\224\275i[_=\005}<\275\213\307\244\275\327\367\004\276\177$\356\275\247\204!>\021S\002>\307\353\222\275\240\350\334\275\2657G\275_\2043>\257\340a<\351\251g=&0\220\273F5\305\275\204\021\361=\213\207;>\311\366\372\275\342j\356\275\264\311-\275\371\353\027>\261S\373\274>\314\305<h\255\331=\201\3045;p5\034\274o\321]=m\352B\2751\004\216=\225-\000>\227\2053\275\220\007\263\274\307\342\201<\001\014O\275\016L\025\276\277N\035>\331\367\275\275\204\240\033=r\342\211>\202N\274\275j\272\276<B\016\000\276\352\310\223>8\002o;\202\327;\274\371D\216=\260\214\006=\031\032\022>\260\257\352\275:(c\275\275!\026=\352T\307;h\204\330\2754$\022\275i\273\302=\305G\311\270\363k}\275Xu\013=\tt\300=\223\020K\272*n\214=\365\224F=\213)\026\274\'\210\353\274\303\010\211;\323\205\355<\376\320m\275\327e\202\275\266\367/\275\212\003\344<\022\254\213\274\036\372\362\274Y\251K>4|\004\276H\3553\275\303t\027\276\352?\003\276\013\026\330\275\276\336\222\274\333\326\277<\' k<\232V\376\275\037\261\023\275e\271\003\2765xt=C J\275\201n7\275\027\220v=!\314\010\275\354;\262=\266\311\207\275\203$\332\273kU\031\276aw(=`\350\013\276\301\322\361<sT\312\274\364g\226\275\214=\022>\345\237\323<\263\216)\276s\267X=\255oz;\272.\356: T\257=\336\356\325=\307\265.=\342\246B\275\276\027b\273\007\277A=\202\347\267<\363!]\276\372\216\201\275\372c\202\275\367\"\030=\006\205\347<-\225h>\356\246R<\333\364\005>\361`u=\030\320\250=\003\212F\275\245\001\205\274vT\331\275\\\337U\275\247u\375\274\205\307/\275}\260\004\276\206j\305=\373\216\"\276\255\024\n\274\337\241\310=\rI,\275t\014\353\273VR\000\275\303\255\304<%\326\243=\240\262(\274r\252\350:\366\372\244\275\246\005J=\237\342^\276\021\254\331\275[\262\023>\257\321\272=\265\250V=\232[9<=V\247\273\204\305\234=`n\254=\342R\325<\346Q\n\275\352\007\344\274p(G\276\241\t\224\275TA\247\275\265}\256=UGS\273\247{m\275k\275z\275x\261\212\2759\253\003<$\262\201=\344&\364<\301:\237=\317\237Q\275\340\0017>\370$\316\273\tR+\275\246A\004\275\261\214\t\2765#\326=\272\035\206=,\213D\275\001\214N:\233\\\253\275\354\252\277<\316\3622\276\366\215}<|\021\035\275\305h\261=\226\206X=T\340\031\276\275c2\276\"\263\017=\322\333]\274\210\014\377=r\252*\275(\234f>>!\232\275F\010\r=%o\303\273:U&\274\035\270\236\273v\347\020=\235B\256\274\370\326\205\275\352Z\217=Kz\334=R\366z\275\376Bu;oN\274\274\'j\342\273\002\366q\275\227\220\242\273\203\307\241={0\207=w\013\"\275@YI\275\230\236?=\221yB>\351\363\266=z\261\270<_*\313\275\316a\244=\351\026\021\275\314A\233=\234\264\244<%\032\235=\361\241\261<\226\357\275;\362\306\006>bW\220=\267\037B>\305\334\217\275\335\335\240\275\240\267\216=\321R\370<\021W\217\275\273\371\227=\2056\276;\304\2244>*}\345\274U\215\377\275y\272\024\275\024\220\204=\334\020\366\275u#\r\276\260s%>\334w\003>\025\003\223=\311\375A\276*\204\354\2746\321\030>\240*\300<\244\000\233<\332\353#\275\232\334\036\275P\031\272=\266a\244\275\177\216\350=\027\320-\276\010\305\r\276\354[,\276;\250\322\275t\234d\275\373\t\253<#\264\303=C\211\217\273\214\316\025<Sq\"=\234\201\272\274\267\241\242\275\302x\325\275wa\226\2755\204\202:mj\225\275\225$\255\275u\315\225=\260\023\234\274f\177\301\275)\256\035\276\217\020\213=\301\331\237\275\021\210\003\276\233\352\300\275\334.X\275\327\304Z<\316yW\275F\311\006\276-\311%=\006u\233=5\367\267=8\250\264\274\352\023h\275&P\242\275S8Y<\305cv<\312\360$\275\3362\363\274\330\343\356\275\200\215G\275\332\251}=\rs\022\276\256(\302<\222\346B>\210\250?<*$3\275\374\220\343\274\3725\256=\247R\376\274Y\371\027\275\232\304)=\tIV\275(\367L<_\204\271=W*\337=Jh\241\273i~\273;=\374\027;Y\352\206\275\037$\263<\227{\004\276\231h\240<0\303U<\330\t{=y\300\334<\367\371\302\274\217\216\227<T;l\276\357eu\274~\276+>O6\366\274\311V\022;\032\360\000\276\010\347)=:\265\032=\263\251\\\275\244\305\246\275\305\265\272=\250\260\036\275\n\305\224=\216\224\350=\207\347\005=\2610c=\320\317l\275G\036\032\276\\Q!\275\212\332\363\274I\026f=[\031\222\275\023\213Z>0^8>\273\016\332\275e\256c=\273\372\267=\230v\206:\240\201C\275\255\370\207\2756I\t=x\316\037=H.\234\275\230b\240\275\351\267_<\232\210Y=^\247\212\275%=8\276\\A\t\274\005\0260\276#P\351\275\022\261\364;FW\200\275v\251\013\276\036\t(\276\311\306\177\275\034\366\030=_|\003>_\270\222\275\276\311%\276\255\332\005>\036\n>\275\275\220\037\275\310\371<\275x\035V>\'\303\320\2757\306\360=\225\207B\275o\n\022>Mo\314=L#1\275\352\327\t<*\013\216<\2113\213\275\275\350\330<R]\263\275\226\371\316\275?\317r;V`\214\275j\037\010\276b`\2716^\320\226\275\024\267\024=\037jh< Y\237\275>[\242<\333\036\001=\204[\021=x,^\275\315R\212\276\025\244W=\212]\216=p\004*\275\231\341\002>\223\314\223\275Ek*\276\233\372\005>C\201w=\377\266\352;\347\222Q=\2320\222\275\252b\377\274\310\022\231=f\250L\274n\244\000={\3102\275\267;\277=EO\330=*3\267\275\2418\277\275\0343\376\275\036\276\016= \342-=\300\214\245=`\242\270\275\230m\037>9\235\005>\324 \207\275\226\305\032<\214\225\014\276\272\305b=\320\226\222\274Q\231\214\275\305\026\333=\2455\327=q\033\001\276\001_\334\274:\037\212<ah\010\276Y\316\357=>v#=N\316S=\372.\300\275G/6=\334\364L=#\324\217=5Z0>\375m\221<\227?M=\210\202\017\276\263+\202>\267\212\316=\327\321M>{\315\r\275\256>g<Z\257v\273\305\2152\275ze\007\275+k\254\272l)`>\256\205\031\276{$\207\275\332\357\274<\352\355\340=u\265\230=\365^P\275 p\337=t\377\016=<r\006<\251\014\254\275]\271\240<\020\3554\276\376\216\221=l}\030=\242\317\331=\362>\033\276\013\032D\275\213\031\330=(\006\320\274\264\3335=\253\365\225<\253\231\022\276|\302\\\275\213\375\014<d\220\276=\021\'\261=\340\353\260\275\232\251\252\275\326\021\037\275\306C\325<\316\363\031\2753\255F\274\215t\257=\251\313;\276\ry[\274v\227+>\305\003\252\275\335)L\275U\2127\275\263b\001=\230\307\223<l\370\247=_-\311\274\354M\253=Z\307M\275Y \033;\033\241)=A\027\311=C\030\260=\203\211?\274}\375Z\275\357\226\t>c\214!;\224X\377\274\213\243\214<\313\367\216\275\352jx\274\001c==X\\T<\t.\340=\367\331\001\274\302\206\240\275Ro\274=\201%M\274q\326X\276\316\203\226;\"\"\261=\212\255\317\275\014\337\271\274\315\256a\274\227\201\241<\227.\375=\240J\277=<\326\010=\375\376\031>\352\001\026\275P\251)>\260x\025=\321 \356<\304\375\254=\310\274\024=\205\240\363=\032\r\204\274\"\217\302=\2541\344=\252\016\201=\330\340o\274\303\270\037\275\223\202x<\276Y\214\275\207\220\310;\234\"\"=~\331.=\234y\215\275\020\232%>\262^\367<\026E\307=\264>\272=\275\237A\276\211\201\201\2755\213\177=\024\026\230=\236\355\233<\237\315\317=t\031\303\275\002\037\000=G\371~=a\3334=[\023\234<`\024\022>{FA=\'\302\313=\356a:>\020\216\353<]\227\025=y\221\212\275\020\234\255=]\207c\2745\225\020\276\037\213\210\275i\3462>\354\354\217\275QIr<R\271\271<h\202D<-\357\224;\010C\243\275\337I\212\274\2254\177\275\253`\371\275\241k\375<\332\375\364=\316\"5\276\257\007\216\275\351\250{;\247\200S\276\321\304\235\275\006\025\000>\206\213g={\037\206=\014|w\275\235p\363<\205\257Y\275\250OC\276:\204\037;\370L*>~n\340;@3C\2757\201}<\035\232\244=\013\221n\275\343\\\330\272W!\370=\374\022->\332\276\013\275\032\001\274=\376:\241=\321\241I\275+\373\022>\276x\256<6\177^\275?,\005\276m\343\037>\336YD=\255\360&=po\352<\260N\033>\274\346\177=\207\340\037=\251\014\334\275\013\022\210:\306`\312=\335\"\r>\207\326\200\275\252\243\201\275\353\t >\204\310\002\276\252\0241=K\201\302\274\036r]\276\3111W<l\314\026\275\236\353\245<\223\322\242\275E\377\264\275\027/\000>\\\327\'\275\211:4\276-o\274<5\345\230=,\240\274\275\004h\374\275[\303\013\274\223N\352\275Sh_=\232\341\204\274\321\335%<\226\217\263=\376\225\351\273\2254^=@FO\274\021\335\r=,S\317\275\273\017\257=L\'o\274[~{=\322\323/=tO\332\275]\310(\276\376H\245\275\227\307\336\271\214P\370\274\027\215\034>\323\362M\274\260\025\353=\352H\213\275\337r*\275\020V\006=\203R\232\275\213\364\022=;\363}\275vc\033\276\374v\323\275.\203X<}\037\352;\031}>\275*\177\260\275]\337#>\242\335\245=e\2540>Y87\2761\354\254\275\215\360\256=\370+\224\273\207B:\276/a?=M\373\243\275\221\033\323=M\322S=<+\347\273\342\242v=,\026F>\200\340\311\275v\027W\274\226qH\275\036\247\370<\336\005\024\276\025%*<B\303->g\'\215\275\333U\272\274,\225\000\276\351b\001>\235Y^\275]\014\275<\277\235\'\276\230\242\003\275\310\225\216=\362\342\022>\316\r\222\275\220`\023\275U\022\247=\206\n\271\274\340\261\321<\234\022>=\341.\021=`x\311<\270\033\244\275\202n\251=\260\027\024>\277s\203<\340;\376=\301\212\325\275\222\300\264=0\363\004\276\275\'\031=\377ET=.\307\263\273O\027\001>-\001\023\276*\373\263=d\305\016=q\200d\274m\350\241\275F?Q\275>:>=\212\255\206=\307\250\205\275X\n =|\306n<X\364;>ml\223\274\230_6=\314\221\020\276\260\'\271<u6\302\272\032\267\307\275y\307\304=\020\261\203\274p\312\327=\002\320\235\2748\245\006\275\251\t)\276\025g\264\275\362\230\263=\242\231\034\273\336\271\023\276%\237\374=#\000\215=\236[\333\275\024?\240\274F\321J\274\321\\\315=\2631\273\275jg\312\275>A\234\275l\373-\274#~x\275\251\0216=\360\016Y=sZ;\2755g\305=\226\262\321\275a5\232\275b\221\226<J,\013=7w\271=\355:\252<\035\260}=\363U\004\276\341\023\260\275E\243\035>\242B\006\275v\355\033=i\223\221\274\223\226\207\275ytT=\234\367!=l,\250\275\027\344\217\275\236\365\203\274\"\372:=3\342\007=\200&_\276\031\232@\273z\212\212\275p\367\033=\235E?\275\260O&\276\344\001\373=\010\016D\276\235\207\000=\352w\257=i\304v\275\224\252\014>L\321?\276\262\343\373\274\222\316\001=%eB=S\350\177=h:\302=\331(\231<\323\033\004\275S\"\365=\312\210\034\276\266\210\217=\377o\200=\377\340\034\276\016\314\005=d(P\276\034\240\216\275\004\344\207\275\001|\367;\330\033\235=e\202\230\274\332\032\000\2755W\007=\226\2074\275\356t\025<\\c\036\275\217\232\274<\3061\242\275L\0072\275#\253\007>\261\260^\274\360w\345<\314\320\030\275E\267\233\275s\006\241\274\002\010\257\275\250@\354<\233\344\010\275\222\202\264=\250\001\310\275#\020\347\275x\261P<\304\261\332\275\034\341\031=\202G\034>Q\320\201=\362\315\352<\311~\003=\317\030\205=\262\220\032\276\371g\t\276\350\306q=\267l\345=HE1\275~\231\346=\245\312\316=\233\325\336=a\252}\275\024)\313\274+\204\312\275\210\236\'\276F\'\267;-\027\235\275x[S\275\016\264\314=\340\221\362=\335\3771>\241\333\231<\226w\222\275R\227p\275$b8<^\345\360=\347\035E\275\364\000/\276\204\370\017>\305R_<\300\020\030\276\361]O=\236RR\274\263\267\234=L\347\375\274\023\'\024\2732\t#\2751\274Q\275\266\352\'\2748\201x\275\265\022\226\275\377y\254\274\353I8>\t\371\371<\014\347\313\275\317\316\364<Ou\365\27443\177\275\224\242\r\2750\004\t\275\350\241\034\275\022\251\024\276O\363\016>\312\314k\273<9.=\252\243\245\275Cs\217\275L\004\036=5zn\276\0236\242\275Z\326\250\275\032y\333\275\031\256\006>D\033,\275\'\262l\276s\227\310=#\316\366\275\031a\233>\240x\242:\3714\272\275\330\241\246= Wz=\342\250\215<\251\307\225:;\266\230\275\240\013\220\275\373\335!\274n\322\205\275{\251\365<)]9=$\211j\276\\\316[\275J\002\227=b\005+\2754\003 \275\366\313q=\335\265z=&I\233\274\001\217\251\275\270\337E=C0\213\275R\204\222\275f^\247\273R\340\034\275\346I\253\274<\340t\275\327\342\327\275\026V\007\276\216TI=+\\\200\275\337\020\017\275\343%\254\2753M\003=\021`\314\275\210wc=\030\246\231<\265\352\207<[\226M=L\255\'={\362\037\273\004\344\276\275\356[w=\355\360W\275\314\257\377\275\252}L<\363\267\223=W\014\r<\027\344\000>\232\342\034<+\003H>w\354\325\274^\276\203<\252\206\355\275\001\000\223=X\371\223=}^\261=@i\202\275\236p\260\275mQ&\272\256\231b\275-\375\205=\337\237`\274\334\351\017;k\342\\\2758\032\200\275_^\221\275L,\342\272`\262\030=\342\345\321\275\025S\364=\354.\020\275\310K\233=\034\220\353\274IS\312=X\335\317\274\276&\356<;T%=\270s\031=\342\350\334=X\256\033\276\310\014K\275\267\304S\276\324\235u<C\332\3019\022\213\236=\033\200\310\275\203\253\223=\010\300F>\017\236\003\275j\022c>\301\024O\274\003\000\232=\335\027\023\276\320\035D\275\306\023\333=\311\006\227\273\352\025\242\275]Q\252\273-8\250\275\212\316\357\275\3568\352\275\256\301\027\276\000\355]=keL>f\025\340=\030\266v=\035\251\341\274\243\304\010>\351.\324\274\307\250v<\241\265?=_\217\327\275B\350\310=\270\004z\274C\251\352< p\243=\025\242\020=\ng\207\275\243\265\306=,\221\334\274\316#\245=\212\253\253=y\251z;\370P\355<\322\364\n>\375\331\204=\344\377G\274\370oA\275\343\307\317<\005\'M>\332\364M\276\220\317S\275\305\231\276=\321\261\007<\362\354S\275\224\263|<1ws=\256\364\013=\265\210C=\365ik\275n\322O=S\244\364<\0305\214>!\325\357\275\362\t\357\275P\200\304;\326\351\331=d\r\250<f\206\327<\016\274\t=GB\337=\337\305\007=.M\"= v\021\276)\323\234=\374\332I=\311;\021>\256M?>\022\310\032\275!\201\335;p\022\013\275*!(\275\363\361\276=\002\231\000=\000\034\t=\354\031\277\275\r\341\266\273\354\211:\275\250\263~<\227\260\222\275\277\271\037\2768\345\220=q\225\200\275\221\243\303=\336w4=O2\343\273\017R\243=\357\273\271\275v\375\361=\242\232%>RZ\310\275\302e1;\002 |\275\324\275\220\274\311\231\370=\r@m\274\263\377T<l\377S=\241V\022>I\020\"=/0B\276 \333F=\261[\207;\242\311\004\275\255\270C\276\307\353\353\274b\314\325;\236\305:\275@)\006>\243\203\016\275\036c\305\275_\252\001\276)\333\356;8\037\213;u\3624\275/iT=\204\031\331\275i\316\262\275\0140\342=\\A\224\275\013\024\035>\217\201\240=F\342Z\275\355E\255\275\327\331l\275\305\010L>?c=\275\243?\030=u\004.\276R [\275\027\000\r\275^S\373\274\342\022\031=9py\275\307jj=(*\274=cV\032\2769T\353\275\330V\313<\032\271\302<\262\t\006\275j\304\326\275\247\010V=\365\313F>\" J\275-\357\347\274\177\014\010;\211\304\270=\223 r\274\317\326\237\275\352\013t\275\020\245\275= \014\241\274\347 9\275I-\031\276\366\370\262=b)\304<\371\221\301<\020\020F\275\301 \317\274~\334\253\275@0\350\274n^\226=\215G\344=5\025b=\333\\`=\033x\345\275y\253\216\275{\263V>\353\255*<\373\254\221\274\372N\330=\244\306\010\275\325,_=\002\240\341\274t\035y=\005z\003\276a\004\371=\355\032\006=\210H\206<A\215?</\"\216=\303\364\310\2757O\236\275\234\374\374<(/*\275\261-\330=\222\023\325\274\\}*=\335\272/\275\037+\372\275\000\342\334\275.\256\260\274\213\264\325=6uT\276\270\025\254<lF\377\274a\311\006\276\374\351i>\031\352r\275\305jP=\222,\302=\366x]\275\025\274[<\016(\277=\327C\301\275i<\301\275\316\305\274\275\345\205\342\275(R&\275\322\301S\276V\014\177=5\347\005\276\244\3630\276\342\274\271=\317\267\236\274\234\033n\275\215\207\326=9h\206<\311],\275\342\037\362\275\371\005><\234\327\020\275$\016\375= \347-\2755R\233=\231\332/\275x\366\240<\204\312\356=\366\361G=\010$\035>%E9\275\351\233X\275\034\321\252=&\240\374\275\362V\032=\277A\025=\304T\'>\177w\002\276\243uq\275\365:\334\275\265\325S\276\2765\341<\302\211\210\2743\206\235=,\364O=\221\320\215=\214\236\233\274<\356\020;\240\311\2409\202\211\342=j\342z\274\005n\010\2755\306\031\274/\200\006>k\343f\275\361\265K\274\274\332\006\275|\221\251=\364E\002=\220e\244=2\350\260\275\305\022\206<F\240W\275i\333P=\275l\271\275\346\325\214<\230\321\017>\227\310\031\276\357Z<=N_M=\'\372\017=f\215=>0\364\031\276#\277\261\275\317\037\365<<\363\267\275\007\303\t\275\242\204\360<U]\027<\2777\017\275\347%`>L\327>\275\327\301\264<g\277\201\274\311\337_\275"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/Square"
  op: "Square"
  input: "lstm_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "lstm_1/weight_regularizer_1/mul/x"
  input: "lstm_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "lstm_1/weight_regularizer_1/mul"
  input: "lstm_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/add"
  op: "Add"
  input: "lstm_1/weight_regularizer_1/add/x"
  input: "lstm_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "lstm_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "lstm_1_input"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "ClipByValue"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_3"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "ClipByValue"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_5"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "ClipByValue"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_4"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_4"
  op: "Merge"
  input: "lstm_1/while/Enter_4"
  input: "lstm_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less_1"
  op: "Less"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "lstm_1/while/Less"
  input: "lstm_1/while/Less_1"
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/LogicalAnd"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_4"
  op: "Switch"
  input: "lstm_1/while/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_4"
  op: "Identity"
  input: "lstm_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "ClipByValue"
  input: "lstm_1/while/add_2"
  input: "lstm_1/while/Const"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_4/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "lstm_1/while/add_4"
  input: "lstm_1/while/Const_2"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "lstm_1/while/add_8"
  input: "lstm_1/while/Const_4"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_9/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_9"
  op: "Add"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_4"
  op: "NextIteration"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_4"
  op: "Exit"
  input: "lstm_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit_1"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten/Shape"
  op: "Shape"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten/strided_slice"
  op: "StridedSlice"
  input: "flatten/Shape"
  input: "flatten/strided_slice/stack"
  input: "flatten/strided_slice/stack_1"
  input: "flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten/Prod"
  op: "Prod"
  input: "flatten/strided_slice"
  input: "flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flatten/stack"
  op: "Pack"
  input: "flatten/stack/0"
  input: "flatten/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten/Reshape"
  op: "Reshape"
  input: "lstm_1/transpose_1"
  input: "flatten/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.042874645
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.042874645
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3329045
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/Square"
  op: "Square"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/mul"
  op: "Mul"
  input: "dense_1/weight_regularizer/mul/x"
  input: "dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/Sum"
  op: "Sum"
  input: "dense_1/weight_regularizer/mul"
  input: "dense_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/add"
  op: "Add"
  input: "dense_1/weight_regularizer/add/x"
  input: "dense_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/Square"
  op: "Square"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "dense_1/weight_regularizer_1/mul/x"
  input: "dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "dense_1/weight_regularizer_1/mul"
  input: "dense_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/add"
  op: "Add"
  input: "dense_1/weight_regularizer_1/add/x"
  input: "dense_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "flatten/Reshape"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "output/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29070094
      }
    }
  }
}
node {
  name: "output/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29070094
      }
    }
  }
}
node {
  name: "output/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "output/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1665575
    }
  }
}
node {
  name: "output/random_uniform/sub"
  op: "Sub"
  input: "output/random_uniform/max"
  input: "output/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform/mul"
  op: "Mul"
  input: "output/random_uniform/RandomUniform"
  input: "output/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform"
  op: "Add"
  input: "output/random_uniform/mul"
  input: "output/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "output/kernel/Assign"
  op: "Assign"
  input: "output/kernel"
  input: "output/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output/kernel/read"
  op: "Identity"
  input: "output/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
}
node {
  name: "output/weight_regularizer/Square"
  op: "Square"
  input: "output/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "output/weight_regularizer/mul"
  op: "Mul"
  input: "output/weight_regularizer/mul/x"
  input: "output/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "output/weight_regularizer/Sum"
  op: "Sum"
  input: "output/weight_regularizer/mul"
  input: "output/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/weight_regularizer/add"
  op: "Add"
  input: "output/weight_regularizer/add/x"
  input: "output/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "output/bias/Assign"
  op: "Assign"
  input: "output/bias"
  input: "output/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output/bias/read"
  op: "Identity"
  input: "output/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/Square"
  op: "Square"
  input: "output/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/mul"
  op: "Mul"
  input: "output/weight_regularizer_1/mul/x"
  input: "output/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/Sum"
  op: "Sum"
  input: "output/weight_regularizer_1/mul"
  input: "output/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/add"
  op: "Add"
  input: "output/weight_regularizer_1/add/x"
  input: "output/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/MatMul"
  op: "MatMul"
  input: "dense_1/Relu"
  input: "output/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output/BiasAdd"
  op: "BiasAdd"
  input: "output/MatMul"
  input: "output/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "output/Softmax"
  op: "Softmax"
  input: "output/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "output_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "output_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/output_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/output_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/output_loss/sub"
  op: "Sub"
  input: "loss/output_loss/sub/x"
  input: "loss/output_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/clip_by_value"
  op: "ClipByValue"
  input: "output/Softmax"
  input: "loss/output_loss/Const"
  input: "loss/output_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Log"
  op: "Log"
  input: "loss/output_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/output_loss/Reshape"
  op: "Reshape"
  input: "output_target"
  input: "loss/output_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/output_loss/Cast"
  op: "Cast"
  input: "loss/output_loss/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\007\000\000\000"
      }
    }
  }
}
node {
  name: "loss/output_loss/Reshape_1"
  op: "Reshape"
  input: "loss/output_loss/Log"
  input: "loss/output_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/output_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss/output_loss/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/output_loss/Reshape_1"
  input: "loss/output_loss/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/output_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean"
  op: "Mean"
  input: "loss/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/output_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/mul"
  op: "Mul"
  input: "loss/output_loss/Mean"
  input: "output_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/output_loss/NotEqual"
  op: "NotEqual"
  input: "output_sample_weights"
  input: "loss/output_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Cast_1"
  op: "Cast"
  input: "loss/output_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/output_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean_1"
  op: "Mean"
  input: "loss/output_loss/Cast_1"
  input: "loss/output_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/truediv"
  op: "RealDiv"
  input: "loss/output_loss/mul"
  input: "loss/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean_2"
  op: "Mean"
  input: "loss/output_loss/truediv"
  input: "loss/output_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/output_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/mul"
  input: "dense_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "dense_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/add_1"
  input: "lstm_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3"
  op: "Add"
  input: "loss/add_2"
  input: "lstm_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4"
  op: "Add"
  input: "loss/add_3"
  input: "output/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5"
  op: "Add"
  input: "loss/add_4"
  input: "output/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/Max"
  op: "Max"
  input: "output_target"
  input: "metrics/acc/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "output/Softmax"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/Max"
  input: "metrics/acc/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Cast_1"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast_1"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 9
        }
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20927404
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20927404
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9195856
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1_1/random_uniform/max"
  input: "lstm_1_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1_1/random_uniform/RandomUniform"
  input: "lstm_1_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/random_uniform"
  op: "Add"
  input: "lstm_1_1/random_uniform/mul"
  input: "lstm_1_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1_1/kernel"
  input: "lstm_1_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/kernel/read"
  op: "Identity"
  input: "lstm_1_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/Square"
  op: "Square"
  input: "lstm_1_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/mul"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer/mul/x"
  input: "lstm_1_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/Sum"
  op: "Sum"
  input: "lstm_1_1/weight_regularizer/mul"
  input: "lstm_1_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/add"
  op: "Add"
  input: "lstm_1_1/weight_regularizer/add/x"
  input: "lstm_1_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "1\303\370\275\305\017\331\275c\316\373\274\301\360K=\364m\035\274\247Y\247\274J(\205=:|*\275\265\177\366\275\300\206\245\274\266_C\276\201\277\272\274v\342\250\275\201\300\351\275-\000r\275\231\310\\\275u\277\004=<8x\275Yv\017=\001\364\006>\363\367g>J~e\275\325\221\357=\220\200c=\013\267h\275\205\364E=\213$\276\275\324dD\275I\037\274=!\367\344\275\212\317\217\275\034&\3059\364\356\216\274\035\000\303\275j\001\327\275T\345{\274\230\221Q>\034\253\017>mV\211\275\364\256\330\275\265\330C=\310E\215\275\256\016\025=X7\333;M\035\301\275V\021e=\354\375\234\275|\005\223\275k\300\367\274\226!\002\276\nc6\275\345,A\275I\245\371\274\3616#\276\376N\003>\233\355\230\275\264\004\344;\256j\025<\257\357\235=\276\255`=Y\241\030\275\226\033a\274\001\362\202\273G\253\210=h\320=<\365y==@\277\226\274w(j=\320)\032>\325]\217<\275\033\305<\244\214\363=\031\3241;Z8Y>H\3253\275j\245.\275LV\022=\214\372\010\276\353\312p<\341\210\233<\315\3364\275p\226(=\022\273\217=l\361k\275\005\n\026\275\324E\355<o\000B\2735\2016\2747\334\260=\317\310\241<\031\216\265<\357\037\341<L\341\212>O\311J>\267\n>\275\377\346\240=*s\327\275\213\232\014=@\360~\275j\237\210;\362\014\213=\03171\275\3557\261\275=\257\262\275@Y >\255\347\206\275\022\227\310<\262c\361=\362\024\206=\301\331\320<\317\217\367\275\233{\242=\317\261\214=!\305\031\276\222\325/>B \361=\351\2638>\255\252\236\274\314\277\265\2756\340\356\275J\252\222=\n\313\372=\303h\325\275\366\203\213\275\013\244\205\275L\373\215=/:\033=\266\235\277\274p\r\364\275\304\241(=\013T[\275\363b\232=A\357Z\275\311\204\031>\tq\010=\246\243\203\275\313\031;\274\000\002\005>\000\260\340\274$RE\275\207\275\337\275\335\312\200\275]SE=\004M\003=\326\301)\275\036\356,\275\370P\334=U\313\010\276\0375\037\275j\2221<\3077\n\2758\r\263=\002D3>Ou\241=\020\255t\275\235*\004>\276Ya;\351\252\255=\326/\007\274S\022\213<\377\363G\275w\021T=\247\211\007>S\023\271=\024\310v<.\312L>\331K\200<\323\037\240=\374\321\255\275Mr\360\275.\013\177=\225\253\373<\266\377\220\274\206\212\231\274Y\321\033=N\3525=y\366\357=\245P\365=\375&\037>\322\373E\275\023\264\342<\035z\263=r~\036\276q\3562\275j)I>\230\272\362=\332\rE=\232\266G\274\016T\037\275\204M\326\274n\'\333:\335zX>\212\310)=\003\030\366=;\251\204<\331\374\316=\020\340x<f\003\227=\001^\360=\273\336\361<\211\2756;\2776\363=\370\334B\276\330d\214=\221\020B>\307Xn<\275\352\016\275(\274\004>\364>\213<\211\020<\273\226\267\347=\362\337{<\007\224\244\274\016\212*\273\231`\250\275\257\266Q\274\004\3409=Y\267\022\276\373{{=\224\ts=\232\214\037\276\316\312L\275\200\005\021\276\376\241\312\273W6\326=\323b\206\275\003 \306=\314\311\'\275Uh\032\274\031>\t\276@@\203=9:\005=\023k\202\273I\325\010<f\2424=\221\334\004=5B\007\276\216\354\231<\341\213\260<@\302\323\275\233X\222<?\374N=\016G\376=\322K\032>\304\217\010>\327\333\t\275He\203=y{\275\275J\n\371\273\257\334{=\037\314\340=\243R\231\275\nk\216=\007\211\037\276Z\256\022\276\322\267\023\276\234x\000=N\035\203\275\014@D\275\370;\200=0\323\236\275r\027\212\275\251\203Y=\237\200\332=:\006\021>\357\213\377<\246\200\024\276VK\310=\246\246\222\274\204\216+=,Uj\272\007\203\316\275A\367y\274u\306\354\275\237E\024\276?i1\276\241\327\231<\332\206\032=\265Y(\2768\024\337\275\226\235\310\275\214\367\241\275a\326\000>\006=\346=5\362>\275\321^\022\275\267<b\274W\313\301=\356?\356\273e\267}\275\203\215\006\276\036\034\311\273q\027\014\276av\360\273\321u]\275X*\261=\204\336\223\275\217\346>\276O\246\010\275\023\216\n\276w\177\231=\232`\006>\246!T<Mk`\276\377\363\316=\030\003$\275\223\227\242=\222A#\276\220\244\233\273\276\014\007\274\031q\020\276\201\235;=S[Y\275#\376\231\275A\255\344<\032\024\021\274\270\307\254\275\376k\260\274\343<\n\275\342\372\t=\337\'Z\275:\032\272\275e\334\226\275\004\n\272\274\031\266\266=^)\273\273\244)\265\274d\3450\275\313q\303\274p`\215=\221\313a\274\342U\345<+\216\327\275\225\353\223\275\305Q4\275&\236\014>H\265\242\275\320;\034;\260\236\211\275\206\206\312=\342\222\024>.\320\245=qj\024\276\026\303\003\2761|\205\275\367\202\367\275\243\034\017=`\332Y\275\346\360\267\275\265\274\240\274\031\343,\273a\336\020>$,\214:s>\227=E\023?=\035|f=R\356\013>\342\203\201\275~\332\\\276a31>\200\307-\275\372\374\371\275\027/5\275\211\304\263\274l\016R=\343\236.\276\360\036\022>r\317\021<\241\324\350;\306\254!\276\210\270\266=b\324\333=\1775\366\273\365\355\265=\036\314\235\275:c\311<\244\265\323\273\026\2016\273\207\032\233\275\275Ip=\344N(<{Jr\275\031/\301=\010MK=\333\\\277=\025\202.>\367\203\356=\232W,<\363w\206<\300e\325\275\270\017V=\365f2;\375\225U\273\231!G\275\333-/>\352\324\304\275\237\341\'=\236\260\200\275 \004\301\274(+\255\275NU\221\275\322\021<=\261\214\251\275P\362\235=\035]\003\276\24630\276W5G=\2615\256=#E\003\276:(\253<\0134/=`N*>\336\030\332;\250\257U\275\014\332C>\377I\000\275\034\365\331\275Kf\256=\336\240\277=bS\201=5A\031\275\234#\273\275\255\235\353\274u\223\306<\213k\360=\322\n\366\275\342\331:\275A\024\264<t$A\275gg\223\275\335;K=\313\210\277\275p\365\351=\346Z\031=\004o\274\272C\017;:,KH\275\360\034-=\017\235\'\275\016\2469=r\2417>^2\226\275b\320\307=x1\211<I\220S\276\316\227\256\275 \267\310=I\3461\276c\tG\275\316L\307<\203\343\267\275\264\033\221\275\214\\\355=\241\335\356=\016dM=\213\302\n=\236\336-\276>,\213<1\300\317\272\336\322\223=\245\234\263=\374v\232\2737\213%\275$t\263\275\370k\235=S\371^7e\t\247\274N\024\234\275.\024j\274\343T\254>\204@\376<8\307\261=rP\275=\020 \266=\364L\206\275\005NE=[R\313\275\222\320\316=\207&X\274\233\262\227\274\352\222\033<r\264\241\275\305\371\271<\214k\372\274\374W\000>\260o\242\275\263W\327;N\010\324:V=\225=\273\030\242=\340\343\326\274\035\273\017=\002A\303<\204\357p\275$\304;\275|F\312=&\203\350:vl3\2754\002d\275=2\205=87->\035\027j\275\234K=\276\016\261\336=pG\007:\204\227\364\273\003\247\262<\334\320\306=Y\262\210\275KQ\377=\210\337\364\275\374\350\251<\240\212\255\275xW\310<\321\351X>t$=<l^\207<\270\213\233\275e\273\361\275%\341\331;\341\273\346\274\222^a=sq\252<\276\034\243=E\0130\275\006o\345\2746\334\234=G\034+:/=F\275\375\325\265=}cC\276X\270\257\274\325\345\271\275\026\3468>\260zc;\225&\001\274\206Xh=\030-\225\275\200{\340\275\355\320/<\217=\366=\332\177a=\032\024\240\274+\036\006\276w\245\374;\335Hv\275\312\312\364\274e\225M=\017\'\207=\025\365\023\276\204\210\317\274G\005\336<\376\250L\275!\201\312;g\342\205;\221D\022\275-j\310\275\356\034\260\272\2255\323\274i\325\351<\026\352\204\274a#\016>\245\017\271\275\331\244\334\275\322\034\271\275\207\n\204=S+\340<\"\0175=D\375Y\275\342Kn\275\033z\262<{\323->)\377\327\275\025#\000\2761l\n=,v&=\213\341\344\275\275? =\362\204\263\274-s;<\020\236C\275\037Rf\272\3409\272\275\271\362I;7\252\327=$\037\355=\023\370\237=\331,\301\273\241\350\r>3\361\341\275q\006\262=`\341-\275\210+)=\351\250\213\275\312\035\355\275&\2058=\006\006\212\274\036\344\030\276\373\273b\275\346\363+\2761\364\273=p\264\317\275\013;\210\275\215C0=\341\006\"=7\353\327=\275\364f\276s\353\277\275|r\023\276\205\217\261\274\343e\t>\363\324\253\272\207\355=\275{\2746=g\374\276<\020b\">\340h\226\275\344J%==\372\316=\303\2274\276\224\2653;\311\021A>\315\376\331=\376[\362=V\363O;\243]\265<\261\301&>C$\277=(A\026\276\017<)=\253\213(\275\245`\000\273\265\316\345=\370\032\225<gIA=\3741\000>~sv\275z\272I>eQ\360\275\272\\\376\274\010 \343\275\217\277N=S\216\004\276vk\251\275\372l\205\275lf\005\276\345\255U\275\334\340\007=]l}\274\201Q\002=f\211\315=\334\002\237\275\024Y\343\275\220\300\302\275\212\014\364<\331w\036\275n/\'=L\361\210\275\334\005O\274c>\261\275He\006;\220\013\226:)\311\307=tLc\2759\263\203<7w->\371\266\316\274\306l\037>\302/\372=\227c\013\276d@\250<\243I,\276\353]\252\275\214\273r\275\232\0225\275;\266\307=\203D\022>\353B\303<kle<\262.\025\2766\360\263\275\277]N=\307\276\313=\207\007\322=+\n\021\276.\330\320\275,\177e\273\322=\022\275\221\332R\275\350s\037>\303\0276\276\202\304B=\365\332N\273\234\361\213=\340>\357\275\300\024\245=\020X\217\275M\2357<g\340<\2761\\\371=z\331\316\274\304\325\327\274\233\223\364<\021bE=\374\272N=\255B\343\273-\272i=4QL=\257\376\341\275\'\254C=uK\212\275\300\267\203\272\370\032U\276\230\354]\275\3328\272:\021<\341=\210\336l=#\'\303=o4@<\234\377\320\275\335\0054\275\251\303\270\275\274\316\237\275\r\022\235=YU\236={\2429=4\275\214<5\314\004<.\235(=\230]I=\356O\225=\255\270\017\275\273\232T<\013\355\366=j\2771>\36377>\361\374\267=\t\363\324=\214\2031=\314\265l=\026\005\001\275\323\\\023<\244\236\361\274\327<\037>3R\023\275\'C\"\276\027\352\035\275\246\022\024\276\375\n\244=\271C\271\275\262\231d\273\373\000\227\275\377G\'\275\216\356R\275\332\030\030\276\'~\332=,x\264\274MF\020\276\317\0024>\271\235F\274\307\243\251\274R\371\274=\241&\274\275\r\311\007\275\372\340\007=\344\300\034\275/\312\033>\340|i\275J\360T>7\326\223=\210\001\035\275\"\027I<\021\3411\276_(0\275\314\345\244=\260\350,;\'\265\000<\026\335\004\276\356\245\360\275X\376\200\275p\004[\273\305\t\007> \314\245\275\307{\031=\234h\r\275\233^c<\025\351\312\275\025\342\355<\245\251\304\275\271\324\001\276n\202&\275y\261?=\\}`\275%~\343\275#OZ\275Q^%=\017\271@> \346\016\275\321_\232\2744\301H<f\t%=\001_\264=\210\335\243=Y\370\324=S\235\245\273\026\000\205<Ul\257\274\341\243\025>m\177\031\275K\331\252\275\004\361\000\276\034\321\023\275sv\006\274\232\213\302\275i\331\333<\323O\246\275b\013\266\275\007\233\2269\274\335\263<h\036\026\275\256\304\360\2758\023\346<#\214\034>\371%\366\275\314\307k<\267\027\223=\234\246\230\2756\352\252\275\"L\315\275\"<\243\274\344\177?\273y\246`=\332\316f\275J\307a\275\002\340\227=\035\271\350;\031>\361=\271\221g\275\273z!\276\365\264;>B\356\001\276\000\342P\276)\242-\275\260\257\001\275\004\257\273=t\262#>\256\3119>r\272\331\275`\273\247=\207\247\252=\\bl>o\233\321\274i\357\273\274\226\032\335\275C\222\233\275,H\007\276\363\342\207\275\354\353\035\276\244\300b>!\272\r\275\330\tT=\245>@=\256\347\323\273h\246P\274\2407\327\275\361b\345<\370\221\377\274\321O\t=7O^\275\272\021s\274\222\334\'>\262\276\321<\244\321\023\276l\357z\275\214\310\'\276\342\316\332;\\\263\232<\301\377\035=0\314\217\273m\252|\275\244\252\376:\266\342U\275s\3707=\325\317\006\274\244\016\255\273\230V \275\363\334X< Cv<\340\302\327=\234\265\006\2746\365F\274Gr\010\276\261\256\254=\r\324z=\306\226\225=&\021Y\275=\013\323=f\235\033>\226\375\236=3J\016\276\203k\303=\027/U\275F\0326\276\364\021\346=\342\204&\274\330\222\036\275\316]o\275A\244\202<\367t\301=\032s\373\275~\255\317=c`\'>t\330\337<G\023F\276\261p\247=\020\372\033=\220\034\253=jC\266=\236\2005=\203\220\257\275\252v\017<\374\270M\275\370\201?\275\231\226\263=z|\232=\\Y\345\274\334\302\343;Q\006\272=\203z\227\275\366[*>\343G\330\274\025\007\374<\250\367\331\275\270\261\252\274\230U;\274M\240d=v\270\202=_^\004\275\360\341\350\274\321\365\271=\250\251\251<=Y\255<\223\210\017=\231\2259\2751\202\220\275&\003\237\275\305\274F=\005\340\243=\241\251\232\275\345\020\231\275r\014\370<\274\313\026\275w\331==\t\306\023=\277\267\236=\321\256\000=\2132\204=\331o\362\275c\242\231<\315\347\000>f\276\213>\177\025A\275\306\016\331<\2732\002>;A9\275:\360\212\275\250\316\303\275\'\013(=8\3041>\320\217y\275L\356\000\276=\005\013=\274\220\007>7\315\027\274\226V\213\275\027\t\224=\352\357\217\274\255\221\272\272\351J\372\273\303\230)\274LH\356=\277\347\251=T\300\016>;\024q\275\005\375\317=69\250\275 \310Q\275\205\304U\276`\366\356\273\227w\254<\037\211\023<Y\247a\275\363\317u\275\017E\263\275\366W2\275S\313\205>W%\007>\231k\014\275$\334\207=\307\350\253=\224\377X<\214\223n\275\371\022!>\027s\312=\355[!>\300\336\261\275\270\236\207=\244!\021\275\211<$>|>\331=7d\021\276\224\213\223<\302\010G\275\301\n\n=\335>\231\273Y\376f\275\010K\326\274\002\023\243<\325W\326\274-\312q\274\242\261\226<\341\311\017>\202\247\332\274\020\317\343\273+\276\234=\372\373\323\275]\357\203=\277a\254=U\361\010\275\356\314\017\275\334\030K\274\262W\251=Po\371\275\005\032\\\275\301\237v\275N\nD\275\350\004\324=\362A\204<\343%f=D\025i<\265\205\246=\024\233F=@o\253\275m\t\007=N\r\024\276\215\305\337;\025\t6=Y\353;>\311\023\004==\265`=\271\357<>\360\221#=\223\335\256\275\256\247\311\275\350\3319\275\223\201\261<\343\222\325=\206\246\246\275\025\270\271<\236u\216=@3\020\273\0236\225=TI\341<\320\223G<\250\'\305<\307a\332<!\231\362\275Av&>\270U\n>j\361\203:C%\256<\326\" >\261(V\275n\323\241=\t<\354=\022 \331<Q\373\364<\216\2261\275\243\301!\276!\211+>\206\327\240\274\t\002f\275\313\255\331=\272\0375>s\2052\275\221\n\301\275N\213\016>\332l\322\273\341\205\216\274sy\t\274W\025\003\275\317\232\220=\252\335h\274\341\341%\276\017hn\275\343 \320\274b\302\016>\017N\223<\260p\022=\224\371H\274\000\247&\274\313\302\266\275&/\345=1[\322\273\213O\r\276\321,o>\\\252\036>@\305$<F\345\243=\265\010\005>n\337\245\275a\310\266\275\202\217&\276\330\334!>\261!\231\2752pR<?\366\254=\221\351\034\274\264<\310=\026\007\305\2753Uj=\266\2761=\024\333E\273\214\320\317=\342\'G\2730\270\032\276h\210\312\274\250\265\n=M\335\263\275\206\363\216<\013+<={\010\373\275\007\373\035\275\250\2575<\324\236\013\276\243\274\265\275XF\253\275\030\226\326=\215\322\277=\244\226\316=\314\025\220=Jg\t\276\305\002\272=\311P\000\276\370\234\025\273\252b<=\335\231\211=T8\222\275}`\310\274L\202\251=\313\333\357=>\371\376=\330;C\275\313\240\241<-\006\r\276\003\242\223\276xi|\275\365\225V\274on \273\371\225\205\275\361\350};LK\006\275\324\374\236=q\350V=\034\326\275=\n\204\217<;8\023\276f_|\274\305\276i\2758_\317=\315v\017\275\225\376\314\275a\210j\275\364\001/>\334\002\346\275\246U:\274Zf\360=\276?B=\306%\267<\307\375\370\275q\263\346=//\207\2752m\033\275\256\206+\275\177d\356\275j{\212\275]WR=\324\'\201<\357\265\201=\301\251\245\273\211\244;>\016\306l\275\353\263%=x\374\226=v\355\356\275\327\306\257=b\013O=\0301\022>\035\227\315\274\003#g<T-~<\361\254P=\333\300\220=\002\232\270=\215hd\275\2646.=\2626\222\274\207\241=\276\371\267\r=\033\331\203=\336\2569<w\227l\275\014\313\312\274\023\232\323\275\3069\222\275D\376)>\021\005\204\275\005um=X\343`=\234PC\276]\254\226=\016\213\220\275}\233v\274y\362\346\275\336J9=Q\354q\275af\264\275j\016P=H\316O=H\327Z\275\375\365\376=f\010\341\274\257\367\367=0\014\357=\234f\213\275\325#\307<\366\261\322<\235\265\016=\336\003 \276g\024<\275\221x\023>\031o,=\362<c\273\374\001\215\275\210o\020=b\307i\275\2119!\275AA\013\2763\037\227\275\361\273\344\274:\341]\274l\200@\275\2058\204>6\t\277=J\272\025\276\345(\372\2753{\316=f\266\277\274*\357\023\276\200\245;\275\031\316\271\275\253\302\234\274\362P\260\275\302w\357\275\016l2=o\256a;\274\216\310\275\265\372\016>\004\004\332<\024(d\275&\370\222\275\234<\330\274\025S\232\275\343\017\306\274\'\247 \276GA\340=\007Zl\275\235\356}\274\255\274\005=?\023\321=\032)\321\272\225s$\274R\256\317\274\023Mr=\3263\034\2760\340A\275\237\270\265\275K\253\212=zn\206=2\333\261=7\220V<^\263\023\274\374\271m=\000\026\342=\303q\027>\247\016\220=\027\336\027\276\014\370\232\275l\374\023=\232\235\202\275_\245\036\275sK\372=\273(\213\275\037\030%>1Y\004\276\021ox=\340+9\274\317\213\002\276/\0246\2758D\312=\205\363\204\275\301k\214=(\364\302;\237L\004=\3419\242=s\2504\275\017M\207\275\227u\262\275\315\353U\275\253\343\277\275\326\355\243\275{\270\363\275T\331\247=\322\007\235\275FB\003\274^\372\215\275eQ\211<\335\242<=\253ub=\216d\202=\313^\266<\377\355\206=(\374\326\274T\201\023\276\312\331\300=x\305\'=\0030\322\275\362\032\250==\250O>\001#\353\272\213\250\342\273\231\301\035>8\351\352\271\200\223\365\274\253\316\030\276\262)\245\274I\005\220<\035\340\377\275\254\323\343\275<\214\273\272\220+x\2755J\333=\235D\025\276\316\037\254<\357\351\203\274mph=\301\000\205;\212\201\t\275:\227\217=(\t\332\275\002\373\264\275\r\304@\274\365r9\275\3424\276\275\2007\255=\356\245h\275u\356;>\317\311\032>\275\260\356=\345S\021\276fO\t\276\2107t=o\300\304\2747\314\300\275\237\332\250\274G^\360=\245\200;\276\370\220\215<\034z\"\276\357\rP\275\213o\236=\367\263\t\276\000\254\232=\021\263e=+2\203=\031q\200<\316\030P\273\270>[\274[Y\002\276\255\327\347\274\350\372}\274\212.P\276U\342\023\275\305-0=T\020\217\274\201\234\222=~\232\323=\200:\352:\311b\363=\241{\307\275\336\017\177\275\2148>>\247*\020\276C+\210=%\321}\274\351L#>\313\225r=h\241H<P\376\225=\367g\317\275\035\264\243\275\033d\246\275\025\345\347\275\367\212o>\006\0003\274\206\357\241\275x\336\335\274}\214\'=\245%T\275\266\261\307<\035\377\244=\005\206\030\2764:H=v1\000>\374\237\215\275\001\276\262=\223\246\335\273\303zC\275\030\253\364=\307\306\367=\375\200Y\275\2339{=\237\017\001>D\033\254=\332\030\347\274U\241\006>h\311\252\275??)<ud\345\275\\\265\r\275+\330\255=/\327\022>\372=Q\2759\334\310=h\010\'\275M\021\261\275\r\022\t\276<\204\271\274 \020\230=bK\234=\025\233\030;f\203\303\273Q)H=\'F\264\274\341\250a=A\216\235\275\331\374>=Y+\010\2738\265\005\276\035\373_<r\342\303\275\3456\335\275\266\031F\275\000\377\207=NC\323=E\264G\276\256\233\'\274\300\312\360\274\224\322\217\275m!+\275\233\037\337=\ty\222\276\342\245\374\275\260\250\201=\031%8< `\237\274a\346X\275\252z\030\274\367\354\203=\t\244f=\301]\271<\237\025\217\275b\356\231=\236\246T<\027}\276\274c\344{=\301\224S=y9\227\275>k\377=\365\025\355\274\021\335\367\275\266\266\010<\273`\225=v\t\013\275}Pr\275\304\374h\276\363\'\327\274\347Py=\022\231\277=\000\r\301\275H\177\211<\211\365\351<*\237\260<\002_a\275\301bD\275\370\304\237\275\245\260\325\275Ju\016\276\217\025\373\275\016\310z=\245K\000\275\253\034\213=_\002\262=\342\373\022\276\212\232,=~\367\242=\264\220\261<\255\032\244\275D\2143\275\354\232 \276i4s>\370\355\022\274/\276\022=\253\257\240<\005\345\013>\203\337\332=^\335+=\025\2072<\220\371L\275\020\365\217=\337\312\312=\344V\303\275\272\030\000\276\005\245\222\275\033\261\007\275^\036\n\275\014\2751>\'\345\312\273#;R=bF\204\275\0138\226\272!U\227<j|\324\274\364\336\220\275q\212\234<,a\014\275\r\256s\274\274\320\370==\r\232=]J\214\275x(\036\276C#L=\350\254\026<\252[\221\274\267!G>\357\032\010>\356\322\021\276\220\036\244=\355\270\003;\237\205\035>A\235#\276\0252<\276\301\020\324\274}\323\220<\024\226\006>\236\246\002=v\000\200\275Qt\352\273\347a\220=\312\'\002\276\305 (\273\275!\363\274\210,\206=\345\0330>\217\305W\274\025_3=\251\234\243=\r\'\032\275^w%\276\205\230\026=t\037\345\274\366\330\321\275]\277)\276[\216\031>\311F\253\274\275\\(=\025\326\246;tJD\275w\233\212=\243\263e\275udF\276\333\334\256=\365\300X\275\304\346\247\274\320\244\031=\255\n\325\275\360\310\">\320\246\r\274\n\243\317=}-\311\275\350\007\003=f\025\242\275:.\253\275\241\326\021\275\014\371\356\275\255\353\003>\332\027\027\275$\265\205=O\364I\275\246\316\031=T\327\\=\264\" >\375\204O=p\355\346\275\367\356\305=9\267\372\273*\252\234=\251G\257=\035ZW\276Y\010\204=\252\274\232=\365mz=\365s\230\275\373\003\360=\307\364\026\275u\t*\2761\271\014>I\376\362\275\251\303\261<g1I\275\"\203\013\276\371\031\031>\024OL=jx\227<N\212)\2731\342?=\215=\212\275,\232U\274\226\341\215\274\237T\027\275\001\262\344=\003\250\204\274Kn\322:\225^\313;^A\207=\005\014\006\274\360,\306\274d1\023\273\033\201\206\273\\\320\252\275Z-\252<\236\322\207\274\315\311\316\275`\364\323\275\331gC=O\377\314\274\237\237\032=\204\254\205\275\203\274\230\275\376\257\221=\346\241\225\275\306\275\001\276\237/\000\276^~#\276\016A\003\276y\246I\275Vm\'>\213\374R\275/J\006=\r\313\325<\232G~=\021\354]\274\374\247\033\276\371\271\321<\005\006\316=\234\352\324\275\230\310`\274\350\260\">,V\305\275)\251k\275#\305-\275|\224\253\27533[\274\367\030O\276\376\nh\275\336\203\260=\205\366\001\276(\224\342<\373o\022>\016\214\364\275 .\"\2763\217\227=\255\266\004>s\321V\275>\333=\2762f\276\274\344\336\263\275d\016C<t\320\336\275\305w)=\242s\367\274\226\342\200\275=\305\372\275\256h\026\276\210S\034=\303E\234\274=\350\366\275\003:4\276!\216\237\2753#\262\275\250\374.\273\367l\'\275\3231\361\273\021\000\343<\202\304v\275\332\212^=NN\000=\177\237O=\266\177\322\275f\332\n>\277\002\270\273\255N\210<\215\355\231\275\034\233\306\275\336L\233=\025\000\002=\0375^=\323\201w\274\215\023\031>\004\003\211=\231g\024\276,\320\224\272\034z\n\274V\377}=\207\002\023\276\305\357R\275\022a\354;\304\3256\272\221\324\250=\244*\365\275\026\032\005\276\241\230\020>\362\272\306\274\314(\257<\'93\275~\234\206;7m)>Nu\345\274\254w+\276\335+w>\242\257 \275\2744\334\275\340\367\303<\000\203h\275\277\367\302=\321\000\361<o\223\203\275\233h\010\275\310T&\275N\340\022=\200\322\273\275\023t5\275.mG\275\363N\226=\353O\373<\355\002\262\275s\211V\275\235\3753\276F\325?<\232!0=y]\276=\250\313\r>83\326\273-\201d=\320\372w8\340\321\237\274\226\026+\275\360\272\344<\256\201\213;\270\301\024\276\256\245\330<R\232\033<r\321\363=l.\005\276\213\230\250\274\204!\266=\240\216\346\274\271\356\254=\000\210\267\275\251;I=]m\"=\374\232\345=\255\354\242=\336 \212\275\260=+\276\372.(=\324\221^>\361v6\275\332\373\372\275A\376\023>\177\013\215=\005\222\304\2752\033d\276\355\327f=\350\260];V\016\316\274OH\010\276\265\310\345=\334\252\252\275\215\rm\275\317G$>5\334\261\275\203\344s<*\231!\274\355\343\005=\365\"\304={\333\017=[x\t=7!\200\274\257\325\233<\272\001\222=G:h=\2364S=\373\314\232\2758\217\377<!\211;\275\217\321}\276\227\251\372=K\331X=%\0076=\213kq=\355\241m\275vpU>\357+n=0\200o=\016\337\241<\030\303\207=\0036,;\023\323\371<\3555T=\350\257\007=\210P\213\274q\003\371<\234u\276\275\0062Z\274\201:\375=I\323v=\305\242\232=\021\250)>\004J\230\275\021\243\325\275Ii\001=\222\356a\2739G|=v\242\371\274\243\210\342\275+66\275\3357\374=t\031T>u\302-=\234^i=\007+\262\274\242\246\024\275\362>\247=\0172\033\276\373\rM\275\223\334\245<\014U\023\276\234B1=\000\017\">o\372D<\211\017R=\262\363@\275\tv.<Y\326\366\275%\310\026>e\004\351\275\261\2612\275\313\031\250\275t\263B= _\"\275\033+\235\275k\246\013\276\231\317\305\273@\000(\275\307\250\321\275HM\\=\345\244\023\275\264l0\275\036\353v<\263\252\354=\327,\324;\217?\253=\363\346\003\276\3126\276=GK\221\273\314\355\001<\211\310z>p7\273<!A\234\274\'\017\314\274\232\n \275\003F\246=5\'\312\274<\251:<\236\302\313\275j\341 =\200\2060=\266\360B;_\332I\275E5]<#\315\313\266\006\203\001=l\205\264=\250\305L\275d\235\276=\324\002\333\274{U\214=\313Y`\275\230\340H>\031\232\t=\312X>\276\020\361\000>\006o!\276\336\271\'\275\275\030\353=ks0>jD.\276\032\203\014<\2256\000=\337P\236=+\306\266\274\257j!\276\0232(>\232~\205=\014#\024=\203\275\301\275\007\'\376\274f\325\220=\230_\241\275r\350[=\374\326u\275\234\334^>\320)\207\274\\\251\013\275t\253\354\275\026\215\227\275\2408\243<x\317n=\220\023!=\342\346\302=\343\204\214<h\260\034=\005/\210\275\210\243U==1\020>K\237\222\275\236Q\363<\310\021\361=\017\352\226\275\357\221\005>xn\207=@\313Y=\301%\322=\"\300l=\224\202\223=\240jt\275\017\315f\275\004\222\330\275\0108\017>x\334j\274\234TY\274n\313\t\275\031\203\020\275\224\275\031>^\373*>\010\000H\275\to\223<\263\254\246; \260\370\275\236s%=\365|\025>\311wz\274\357\"1\276r\3307=\205\034\024;\013*\305\274\000V\247\274y\276\231=7S\036=#q\323=\356[>\275\241n\217\275#\205\314=\333\275F\275A\017h\275\271\001^\275_t\"\275\033\204\343\275\204\361T>p\300\307=uj\000=\356\251\207=\302\244\326=\323)?>Bqv=\360B\277<\360\215c<x\335\222\275\343Q\005\275\207-\253<\246\\S\275\324\221\362:B\377\036>J<\035\275\276\263\t\276\274\022\370\275\027D\362\275\325xv\275c<\247=+\224\302=\204\372&\272P#D=tP\007>q@\002\275\030\333Z=DB\005\275\367<T\276\334>\205\275\330%\360\274\346\024\270;\232\335s\275$\307\252\272\rQ\275=%\010\030\2741\205\320=\035r\357\275\207\010?\274@B\245\275Kj)\274\265\322\333<\214W\260=\370\033\243\274T\006\326\273I\007\247=Mq\272\274\010%\350=\326if\275\373E2>\031&?\275\010\343f\275,\365\026\275M6\007\275\010\264\276=:\363\321<\000\324|\275\231%`=\271\274\273<\3470\000>5\355F>o#\361<\374g\207=\254\247\036>`\367\314;6\357\341\273\035m\305=t\377\277\275,\266\372=\316\316\363=\032\313\363\275!h\254\275\373\300==\260H\004>o\\\\>\027O3>\220\347\240\275\366\227\207=\331\274\240=\327\006\226\275\027>1=\027\374\221\275\000\t\256\275\355\0057\276i\2211=\213\352C=\314\362\'\275Fs\220=\256f\246=\370\3543\276N\026\243=\367\266\014=\306T\306\275\007\220\332\274\003\016\375\275\217!\223<mE\250\275\n\325s=0\342*\275\305\177\t\275\014\326\323<\247\363[<\336\\\241\275\276K\243\275\346\244\013\275\321\361\342\275\341\3656\276\322\203\236\275\335\275h=\250h\341=\272\216r\275\225R\262\275gwx<\370\272\341<\321\016\177=\254fm\275)\243\201<\320i\345\274;CZ<*\200\343\275=\236y;8B1\276\236\365\253\274PV&=/\034\317=\377)y=2z\225\275\016\330\255=BXY>\246\255w=\001c\323\275(\373\273=\361:\t\275\260\333\005\275D\321\344=\225\340g=\300G\243=\271\260\325\275\247\363\365\274\001d\262;\207!\205\275z\240\001=hr<=\257-\224\273U\265\022\275\344\366J\276\326\212\013=\254\272\020>r\022\267\273\343\356a>P\252\001\276\372\344\014>\262\327\236\275AE\007\275\243\347?<\"\321 >\207\\]\274_\"+=\3168\311=\377\275\n=\033\033\030;\017\307<=5\355\214=a\3758\274\236\317\201\275k+u=55\022\276\317\336\216\275`\3648\275|3+=Nh1\275\267\310[<b\216\036\275V\376\332<\004H\332\275\006\366i\275\201<\006\274\244\361\254=3\332\217=\272\260}<o\231B\276\2236[=\256\232\260\273\177\0104=\216\203@=zsf\275\213\373\030=F\026\351=\357\007\252=\351\227J\274\376\363\231\274-bM=\023@\323<\237\300\324<l\214*=,R\251\275\264\326\037\276cF\374\274\014\222\221=\231y\365\270\"7\312=!\017c\276^\203\241\274\274\324\241\272O\375\211\275\023z\260\274V\207\301=+x\256=7\316\347\275\010H\032\275}\320\006=mJ\020=\240+\205\276s\245\004>\032\276\237=\320\216\036\273,%\221\274m\236\242=D\273\213=nx)\275\345j\214\274\365,R>\355\227\322=\232I_\275B<\356\275\366\2650\275au\241\274\370\202t\275p\200W\275Y\262 =\006\320\355=\325\323\023\274\355SJ>\007pT<\357\007\344\274h\264\002>\274g\006\2757-\220<WV\265\275\340\216\252\275\364x\016>Hp\201\275\341tE=\371\nx=\253\203\257=f\375\352\274\266\351\324\275\351H\224<\256\345\335<\351&]\275\031Z\230=3\0227\275\350\013m=|`\304\274\356\232\013>\013\032\273\272h\370\356<B\377\314\272c\341\000\276\013b)\2747H\261\275Z\341\310\275c\364\361\272\240\271\033\275\377\213\207=io\231\275\257\254\344<%\346\252\275\375\027\211\276\3302\210<u\272\333=C\200\262\275V\001\013>r\262\202=:\226\335\275c~(<\3147M\275|\316[\272\257x\336\274B\216\260=-\274\010\276\247{q\276\356\342\246\275\321$[\275wb\324=\207\371\200\273\022s\246=_Rd\274\0221\273<\367\362\233=u^%\275\341\201\037>M4\262\274Z\203!=3\213\244\274\034\026\002=Y\247\230=o\302\004\276\220\323C>N?\346=\325\302\206\275\232\304\025\275\307\336\005=\036\363\035>*\032\363\274\0363\236\275\247\364\345<\020gQ=\367\322p\275\213<\200\275\033\321\265=\347\325\000\273Vz|=Iv\034>.$\341=\276\016\225\275M\356\335\275\257\034\266\275\242Ir\275+\025\027\276Mi\030\276\313\342\234\274]\213\210\275oL6\276l\300\263=.O\001\276<\202\t\275\273g >\263\332\270=|z\315=\203\231m>\354\027\203\275>\352N=\352\n\'>\270\235\246=cf\270\275\014\235\276=\300\330\003>a\244\251=Q`\024=G)\326\275\354\325\236=$\341\257=_\025\222=\226\306\030=c/\356<\344\361g\2750?*\276\2718\026\276\203\022\342=]>\016<\360\253\236\273A\036\342=\201~\217=y{?=()\240:1\330\t\276yk\005\275\337\244\275\275\214\263\306\274\344\240\244\274b\007\354<\231(\006>n)A\275\037Y\001\275}\254M=\326&\225=\364N\206\275\214R\353\275`\312}\275W\030\304\275\206\352f\275\352\225\201\275\221at\275A\306\370=\221z5\275\234l\001\275D\010\335=\240H\264\275\277\3764\2745\034(\276\024Vg<\211+\313=\223\373\007>\277\205g=\341AL\276\334fO\275U\317\276\275\r\273\274=\000\307\267\275\023\372U;S\203a>\270sX=\026\243\313\275j\252\211=\316i\005\276.\344\367\275\264\252\'<O!\005>?\256\323;\325\240\215\275\247\247\210=\023D3<\350;\r=n/\332=y\\\345=U\3308=\227\367\240\274\201|-=\336!%\271s\255\025\276\210\370\322\275\304U\354\274fm\233<h\033\250=\377\303\254=\222\247\321\273\325\371\264=YV\211=v\027\203\275h\202\233;<\342\254=~\262v=\241\360\232\275\020kq\274Q\255;<\251>l=\033\177\027=\331x$=\236\243\017\275\032\261\203\275\r.*\275\250\366\263<\373p\000>X\001\372<\034K<\275r\363\304=pz\002>!xm=\300\027\272\275\320\376N=\246\340\225<M\271\t>zBr<\277b\264=a\343\230=\322\257\352;\033\240\317\275+\201W\2759\321I\275F\322c>\'\246\202\274\333\n\033\276\325\245\026=\022\'\021=\356\304!>\265\331\023=\036\0252\2759.\275=\374\0146=O\320\347\274w\030\200\274+0\004>\214\3435\275\275B1=\263\376\235\275Z\305\220;5\034\323=O\232\244= \r\206\275k\312\376\274\211\006\005>H\254\352\274\216\003\244;\t\346\324\275d^\031=\343\237\331=H\261\002\276&\275\231;#\371\251\2746t\203=\005n\316\275H\033\373=\222\207R<\007\261\273\274<a\201\275\371Nt\275\274\252\343\275\314\362\022=\302TD\275\362\246\244=\227\361\326\275\006FG\2734\226\031\275\007\221\313;`Y\327\274\357\320\203\275\035\321\350\273\204OQ=\226\251\371<G)\315\275\307\227l><\302\342=\357\310\024=\315\356F>Q\024a>\367\353|<\370\245==\222#\310=\237?$\276\177\307\005:\2639A\276\374\347\007\275\242\311\306\275{7\014=\373\212\222<\003\023\323\275\031\366\215=\374l\207<K\2414=9\254\231\275\267\325\260=\251\374\216\275Vt\336=^L9;\217\007\203>j\275i\274a\305I= i\254<\312\260\233\275\253\2124<h\223C>\302\250\343<I\356\210=2\227\335\274\323\303\216<7\353\026\275,\216\233\275\377\023\355\275\002N\001\275\256\212\\>\212\332$<\333|-=\035lv=G9;\275\360o\273\275fz\322\275x\251\265\275\224\342i\275x\314\340\275h\224F\275\272\322\016=1\204\244=\377\375\324\274[\330\r>*\375\036>\033,E=8\221 =\263\233\267\274cd\243\274\324\004<=\235p\017;\260x&\276\013\326J=\370\373\036\276 \257H\276\207\341!=\232!\376;\377=\037\275\271`\323\273<f8<E\303j=\021\005\217<\200\230\211<\316\321\204\276\277\213\261\275\332\233\231=\330` \276\374F\256<M\326\020>7~Z<H\371\225\275\3259g<8\311\327=x\262\250\275l.&>\261r\337\275e\304\216=o49=\"\250\353\275R\263\355\273\031\356\370=\227\254`=0\n!>\324\'==\311(\000\276\206B\210\275A\303\262\274\031\375\245\275\251i\241<,\323\t>M3\245<a\207\223\275\016/\214\275O\230\320\273\332\373l>\325\220D\275\346\000\370\274\005\021\334\275!7\243=\316*t=\307L\250=\3546\373<\350\322,>j\3448>\245\264\035=\032QP=\301\255\024\276\337\352>=O\362\204\273\226*S>\023\251\t\276\034y\334=\276t*\275\373.\024<6\025\236=\257-\273=FJ\n>\276\021;\275\000\307-\275U\005\307\274\336\301a\275\203\346\263=\002\212\251\272\366\271\203\274+\311\024<\301\273\022;\312\261>=\261\325\225\275\310h\206\275\202\321%=Ao7\275\213\231\357\275\335\352\206=\332\363\214\275\274\212\231\275\376K\231=C\224\301=\320\277t\275\334\305\025>H>-<\343Jq<zr\276=<f$=\021j\217;\253\271\343\274\256\337\254=@\222B\275\024\320k=-\236\327\275Vh\273=E\230\220<0k\247<\230\226\027;6#|=\330\"H=1\001\307\275\324\300\253\275p\357\215=K\202\240\275\300\030V>j\001H\275\372\377\335< \341$\275\333\237,\276N/\201\274j\216\226\275\361\001>\275p\207\r\276\252\320H=\342b\016=\247\214\252=yN3\275\364W8\275\022\007\001\275C\r\214\273\2665p\275\317\341,\2759\021\330=|\252\211<<\3162;\026\320F=\242\273.=\315\2269<\034\235\001\274\345u\276=\020\3315>\365\232\320=\3726?;\321\315\001<\227\252;\275P/3=\275\311\305\275c\373\266\2722\263\027\275\005\211z=C\302\247=\217\226Q=\202\227\362\274\371\200\333\275W\003\233\274j\326\002<\323\\x\276\243\271\353=\227\303U>*\032\277=~\330\354\275Y6\232=\264\022\345\275_+\'\275\376S\243<\216\t2>O\024\202\275\303\256N>0\335\275\275\006=\003\276(\252l=\321\217\235\274\025~\251\274\317\035>>\267\206\007=#Y\255\274\025q\206<\315\341\375\275J\032\354\275\263\024\251<@^\002\276V\324\257\275v\036\372=_d\240\275[a\036\276,\037\016>t\237\221\272c\333\271=\365\021\221=?\3349\275J\316\252\275U.\204=\004\315&\276\202M\374\274\010\227\200\273i\221\324\275\262\n\307=tI\226<FT\033>>\375\213\274\3065%>2\263W\275\310\266\215<\304\352J;\213h\322<{&<\274\3630\017\274\233\346`=\362\376\265\273I1\334\274_\273\220\275\331)\233=\224\223U;\235\255\243\274\022AA\275\017\256\214=\037\253\\=\260 e=\034L\002\276{\300\024\276m\334\216\273\203;h\275\030\"\244<\230\232\002=9\007\246\274\322\236[<\255\211\341\275\373Q\220=\273\277\373=\027\027\342\275_\331\244\276\223\320\347\275^\031{<\375\203\240=\331\032S;\372r*<\312#t;Se\317<+H#\275\354\203+=J\316J\275\375\025\317=\202\313\027\275gt\223\275N3\320\273F\241\337\275=lz\275\177\0020\275=\037\231\273\256\315\311=U\311\027<\006\254W;\333\313\335\274\230\315\262;&\0314=\336\3030\2741$\273=\305#S<&q\210=\270\022t\276k\232\025<\220\243H>\372\250\024\275\336c\304=\006)*=\372t\017\276\013\361\025>?\r\020\274\316\035\233=H\246\n=\267nN\273\010D\217=\370f\200\274\204\332#\275\213\020\333\275\230\"L\275cl\"=\006\215\232\274\350\006\036\275R\244A=\207\\\265\274ivH\275 h6=`\276\003>|\324\203\276\313@\304\274\345;\225\275_h\013\276\311s\345\272\005d7<Gr\344=\342\303\264=4\002\360<\225_\345\275\352\367\003\276 \210\206=z&\361\275\374\256\256\275\216x*>\351a\037=D?\357<[\231\016\276.$\016\274\206L\232=\330\354\233=\242a(\275\203\007\215\275>(4\274\212\377\237\275\317n\313<\337\005]\275.&\330\274N\255\255<`\312\241\275\237\263\231<\320\352\010\276\270\260_\274\332\344\333=\231)\017\276r\370\346\273\036\235\264\275\233\373\316=\032\362\336\275\335\303\275<\347\273\031\275\033B\t>\020)\214\275\263\220\210\275\330\356\025=_\375\202=\260=*=\376\303\017\276\240$v\275|\2057\275\203\266K;\317bV\275\3066K\272\016k!=\367E\247\275HoR\275\274\370\r\276we\377\275Q\367i=D\nx\274\224\025\252=\235M,\276\212\006\017\276>U\365=%0\305\275\301%\323\274\003\004H>\244!.=\250\304\016<\324X\010=\245\374\332\275*\244\222\275\360\301,<\033;\255\2754e\013>|\203\371\274d](\276K\365&=\204z@<bo\006>\326\245&\275\034\307\353=\363\325M<#k/\275F=\317\275\014\214\304\275\232\370u\275\006\374\332<\310\022.;~\256\233=<\006\220;\035;\306=\271\362l=\264\021\315=O\351\030\275{;-<\264i\007\275\352\0035=\301\221X=\351\021\351=\031!/>\375\363 =\371!\033=\375\300L>\305\304H>5`\222=\375\260\376=#\226Z=\325\006\022\275\356i\037>)\335\005=\273\356\'\276\332\036\021\276P\037$=\311(\364\275=f\277;\234\303\366\275(\202\211\275\031\364\356\275\001\273\336=\356f\216\274v\311v;\035\216A>\265\214\023<\014,\030=v\341\237=$Z\021\275\217\225\331<\203\033p:$H\300\275 \373\340\275\241*\036\276\026\244a\274\364(\251<OD\311\274l3\220\275n\0212>\346i\036\274\370R\373\275\033$\220=HD/<\023\027\330=:\264\213\275\'C\323\275\365\001\027\275j\273\314<*\201&\275\211\005\207\274\rvv=\3157\375=\307\217\017\274\037\236\016\275XsU\275\3727\342<\345\326Q>\376U\361\273#\332\206\275\275\306\341<\006\232F=\034i\035\276L}\372<\372\325\203=\0261\235\275\267\332\257\275\304U\216\275\373\337L<\253\254\245\275{\010O\275\223\310\260\274\367R\235\275\222\351m=\336\373\224\274\007\321\023\274\351\273\256\274\006\250:\275chC\276\032\245\322<\265\032+\274\311@\021\275\311v\344\274n\267L<\237`c=\324L|\275\036\367-={_\030> e\352\275\372\325\311<?\266\">j\230\210<;\\\250=X\310\354\275O\r\306=\251-Q=gb\271<SX\022\276\213\267\022\276,L\304=\337/\217\275\270\304\226<\014\356\223\273\303s\006\276t\371`=\274==\275\036x\222:\266\311\023\276^\0249=\261\375\346=Y\252\010\276fz\036=G\240\254\274\r\017:=T\302\334=\027`\007=\327\217]=\006\037\010=\306\'(\275\212\375\234\275p\370\377\275\007\365]\276_\271\362\275\365\310\312\275.\271$>\347\337;>\021B\026=t-L\2732q\231:\305\347\345\274Z^\377\275\355\360\374\275\333M\377;\333\214\271\275\253\2257>\034\214R=\t\266\373<\330\t\342\274v\r\327;\331I/=f\326x=\206\236\025\276\240{\214\275\255\357\351\275Y`\260=\374\257Z;D\021\276<(\350\316\275\370\340\312\275`\n\022\276\006\360\304\275\320@*\276\032\363\234\275t\010\327\275\251\346\300=\217T\365;\225Z\221=Dt\212=\337\355\004\276q4\002>\334kx=\340\221.=v\354\365<\201*\204=\204\327\336\274?uC\274\375\3330=)\005\360\275t0\303<\337\321\216<\352g\t>\201 \302\275\352\332\246<\271\326\275<9\301\342\274e\222)=\0358\215\276t\037\223=\320\250\242\275\325p\272=L\354E\275r\300\317\274\353k\224=\211\324:\275#\336\273\275H\020\336\272U<.>\241\377v=\337\t\246\275\376\212)\275W\347\261\273\360\037\376\275\327\030N\276\262\275\350\275@,\237\275\305\tn\276\203+p=|\211\035<\014t[>S\2733\275\214n3=n8\240=`:>>\331\354\217=\205O\250=K\r\026\275!\370`\275A\214z\272GK\341\2757$\014>\266\207\006=\330\217\233\275_\\\370\275y\200\215<\242y\235=\337a3=G\310\'\275}\213\230\275\032\241_=b\230.\275\252\237\206\273\246\342\340<\\\224\234=^\246\231=\352\260\362\274\265\330>=\024j\024\275\324\010\003\276Tyx=\037\023[\275\"Q\'\276\216\004\336\275y\222\260\275M\270\342\275\202\026\334<h?\002>\344\220\337\275\363a\226\274\347Z\377\275\266\322\022>\261R\245\275\333\307\227<\307b;=`\212^<\325C\363\275\377\3136\275X\350\256\275\177\364K\273\274\257\353<\376\325c\275s\205\250<\037+j=\227\244\241\274]\357\336;\243\203S<\377\362U>\270cI\275\325\300\375:\200\204\304<\211L%<F\224\207\275\272IQ<~B\207\275\217$\376=-\252\204\275\t\354\220\275\201\300\230\274\306\331\322\274\033h\201=>\270\222\274\250\016\014>/\323\320\274v\326\232=\177t\204\275\2621\003\276\022\315\002\276\366\376\033>\325lF:{X\224=\371\326\003>\226\252\251=\267\r\210=/\271U\275:\014{<\225e\257=2\025\'=\3633\301\275\365\370\323\275\363s\311\274\245W,<n*\202\275OH\232=\332\271\254=6\236#>\361\220\307\275\031:\030<\374*>\27439\371\275\372\3559>\rt&\273*~\312=\005\377\305\272W_v>\316\364\317\274\025@\224<M6\217\275:\214_<}F\277\275\2079\240\274\363\262\327\275&\337\032<.I\004<\261\215\351=\003\373L\275L\234\240=\335\221\263\275*\262\262=\302\336 >=\217?=)\366p\272\334\224\342=\255b\025\273C\321\025;Z\002\350=\341\\I\275~\225\277\274\272\013\025>eq\026\275\r\222\203<}\033\225\275\246\266\316=?D\237=\037\033\362\275vW\317\275\361\303\206=\203\022\\=\005\002\273\275\317\030_\274*\240\311\274\301)H>u\251\356\275T\361\327=\277Bi=\0322\344\273\307\021)\276.\301\271<\025\036\001>W\313+\275\354\335\020\273j\235\373=.\331#\275N\257\230=!\013\022=4+]=\341\270\177=\235E\r=\212\010I>\340*\013>\372\010W\275\210\260M=\014,`\273q1\034<\250G\010\276\265\027\225\274.\3647=\0225\326<6\007K<Z\223\357=SGX=(\274E=\373@\024>\306\373\002=\034\221\017<\347>7=\324\000\375;\212!\356\275L\326\243=M\035\001>\362>\021=\227\243,\275\370\335=\276\337l\034>q\003s\275\356\237\022>\006\020\261\274|\270I\275v]e\274\322\003k>\310I\036\275\224{\362\275c\2732=\336\232\004=a>\205=5\362V=\347\311\000=\305\313\360=}\366C>\001\226\033>\000\313\227=\256W\271\274Ez~>w\316\3759m\013\003>\263>\220=\nU\036=~\271\260\274\223}0>pz\272=?\212\320\274\321K\313\275g\013\325\274\035\0161\276\243\236\032\275\331\212#=)\271o=\350\245\000>\014\2325=$\211\277=\331\372\340;L\316\001\272x\340\340=\nV\370\275\026\343\261=B\026\205\275\004\317\023<\225Z\236<D\322\322=\277w\036=p\313\014=z&};\177u\326<\336C\223\275\256\177\325<\0256\371\273\226\271\227=q\305\243\2730\300\033>\031\211\275\275\331\301[\276\340\270\203\275jo\200=\231S\032\275@\342\220\274J\305\006=\320cl\275\013=\336\275\247\274\212<\3226\004=\200\331\031\272\223\211\344\274}|\023\276f\205\322=H\267\003>S\207!>\312\354\335=z)Y=2\013\361=\346\271\013=\342\026\025=\345\352r\2758z^\274H\027\267;\334<\234<\177\233\234<1\257\313=w\024\322\275<\325\215\272\221\303h\276\005\313\245=U\270\373\275\240\265\213=\225\t\006\276t;$<\330\353j\2756\263\373<c\250r\275\226\204\332<\376\0363=\020\034n\275- \242\274\n<I=\244\351]\275\'\273\356<\026*\244\275g3\244;\216\301]=&n\027=\377sZ=\243+\226<\217\341[=\205\2227\275q/\254\275\342z\226\274\0206\237\275U\351\372\2757\3523\275`\013s\275KgJ\275-^C\275\370\255\327=\230\303?\273\367M\321<\230\321\311\275m\237\024=fg\214\275Z$\335\272<TB>MM\320=}\002\'=\336\311\327=\003\202\324\273\2439\223=7\354\327<\n.\236\276\025\236\213\275\326\253\004>\017\300.>\317wY=\024\346==^WF<ac\275\275\'\017&\276\321?~\275\365\273\361\275\260\035_\2767\272\321<\367\3142\276\375\202\222\275;e\355\274\003\234\336\275\344N\250=\201\313\001>\314\255\222=C\362\026>t\030\007\275\220\335\233=\245a$=\211\250\333=\237j\234=\360\217\014=f6\271\275\325\014\021\274\235q\207\275y\260.>DC\265=N\005\357;\'\276\t\275/i\351=\324Zs\275\341\203\335\275\246E\234\273\014\214P=\356}`=\327\354\323\275\252W\241=\020S \276\313b\256\275\265\230 >L\375\224=\035w[=N\317\034=C\030\357=\027\024\247=P\373\2669\005\220\343\275\377\350\222=\271\247\303=\3304\316\275@#\350=\210\253*\275\010\036.\275g\314b\275&9#\276Pf\355;\3620\352\274j\361\264\274\321\"\026<=\217H>\355\002?\275v\177\256<\372M\230\275P\325\376\274\205\335\231<\346o\247<\000\370K=\007\004\005>\304\262b=N\325\017=\370\333\273=\312\352\006>\237\245\n\276\313M|=\330\310]\275p* \273\035MA>\212\213Q\275\224\333\353=2vM\275=\341\264\274\265\263\313;\326N2\275\026\t\257\274\205\275\022=\345x9>}\266X=\337_\371<\305\024\257==/\'=\321\022\001\275#\252\017\276\336\031\005\276\271\335R\2744\002c=\307\226\023=\272\310}=$\365\354=\253\315\262=\245\267\232<0\020\353\275\260\340.\275\027 T\275\014\272\257=\347\332\305\275\326\254\234\274\353\241\253\275\312_\026=\322]\010>H\224\372=\301hw=\242%\346\275\020\025\306\270\212\3661=w\207\215\275\303\001\302=\367\364\221<\007g\022\275\376\325\025\275\246\022c=6\3642\276w\310.=\313\323\002\275\377\37119E\0244>0d\200=z\324\213=\207\322\005>\360\253\233=\356\214h\274\324\236\274<v\254[\275%\265\r\274\204\330\270\275\246\232\002\2751\343\n\2761\267t\275\275@\206\275\355A=\275\242\023\367\275\273\315\017=\021\200v=H\021f\276\005h\241\275\264\007H=\034\313B>\316\031^<\352\223\025\275\331\367\200\275\205\025J\275\366\276\263\275b\317\340\275\347\331W\271}-\306=\327\250N\275\233\353\005>+\261\334\273+\245%\276R\305\246<\301,A\276\335$\310\275s:7>Ny\275<\257W\014\276\265\305\220\275\241\257>\274\331\365==;\3676\275\317\241\221<\203:*\276\321\226\001\276\232\013_\275\320\242\n=9\236)<J\256\030=\332\006\271=0s\251\274u\007\207\274\024\217?\275\373<\201\275\242\035\264= \362\020\275\006[\324=\301\010\306=\304\212\336=,\037F=f\337T=esR\276[9 <\001p\337\274.\030\2359\013\\\350<^G\242=\245\316\211;{\336\321\275I\203&>\010\026\202\276I\373\032\275\010\000\027>\277hq\275O\233\010\2759~h=\035\251\240=P\3537\274\314\336\276\275\340v\234=+\200\302=\342\310\215=P\3275\275\261b\t\276R\273\254\275\373\214\355<Y*\226\275\004K\3149\217\316\326\275\235,\222=Q\224\255=J\220\202<\344G\310\275|\224\n=H\021\221=\200g\273<\353Y\342\275[\177\233\275\271\370#\274\203\353\307\272\017bf\275\353\326\227\275q\017\n=\254/\366=H3\321\275\014\205\001>\316x\375\274\325\312\312=3\216J=\377\244Q\274E\232\262\275\355\3672>\022\335\374\274\224\347\224\273\014\004\265<S\027\261\275\334\322\220=\031w\233=\264\007\003\275\243\363%=\021\222\001\276\327\270G=\334\324\375<M6\345\273a\267g=l\261\260<\202\231\334=.\013\010>\214\267Q>d!\205\275}\016\307\275\375\200z\275UI\265\275\271\220G\273\025jO\275\010\273\177\275hx<>R\2143>i\200\252\275\207P\005>J\270\255\2754\333\004>\212B==E\303\355\275\340k\345<Z$Z\275\335\254\030\2758 8\275W\223$>\343\245\276\275\246p\033>xH\226<[\372\352<Dd\031\273\n*V=\254\237e<\355\201\237\275|\014\215=^\013t=\262\302\346\274}.\207\275\305\t0\275\372\250d=\025\206f\275\231\206\341;\rU_=\250\020\236\2743\343\200\275/\335\354;\017\374A\276\303\277\364;\327\361\257=\242\n\352<\323<*\2768\343\374\274\351\306C\276Oi\243=\217\236`\275\230t>\276u\270\206=\250\326\347\275\367Pj\274\205gH<2\210\024\275\017\257\"=z\206M>\372\363H\275\376\016\375<\214M\216\2757\033:<r\3539\275\313r\344\275W\200\327\274j\rI;\263\\\331=k\217k=\036^\220\275~\003\010=\356>\236\275|~6=\207\210\354=7\264\242=\203\350\364\275\215$\230\275\347\325\033\275\302#\327<]\352\024>\356\227\225=@\230\003>!\203^\275eoZ=\301\363\237;u\016j>\307\005\262\273\036\004\r>KL\322\275\224\260\362\274U0\007\276\005\375\203=\375\216X\275\340\364\276\275\302r\371\275\373\3202\275\230\270\232=uO\016>\201\344\235=\247b\266=R\334\021;\031\354\261\275\216D\367=\341\257\222\275\227\230\204<3l\252=\273\321\217=\321(\233\275\240\363\307=\022\347\245<Y\250\030>\351\007\352\275K\030\304\274\360\217\204<5KG\276\213\347*=~q\362\275j\330\252=\204A\025>\213#;=\253[\242=\322\316\207\273\001\230\212\275\217Cq\2755\271\021\275\027\254\302\275G>\346\274\206\323\013>\357\t\345<\341\241;\275\245\260l\275\021\236\263<v\201-<\342U\351\2755\017\366\274\257 W\275\373f\016\276\'\332\255<,\302\025\276\226A<=v~C>\0045F>\230ei=J|\306\273B\300\007>k\301\244:n\356\374\275\031\341\212=\237\322\217=\0047\375\274\002O\330;b\341\304\275\204W\\;\252\321\252;q\207\021=t\203\254=\252\217\247<z\231^\274\026\376o\276\251\3435=N\205\215\2755)|\274\351\r\345=\027\303H=\215A\232\274\3114A=+Q\017\275\273\315\372\275\264\230\220=?Ys\274\272\007&=\023\212\244\275\205\233\000>\2508\236\275\316\3273=\032~\226<\201C\341\275\251\273[\275\n\371\314\275[r\267<\266\237b\275f#`\275me\202=\327\177\374=UY\207>\253\321\217\275^\357h=_x@=\\\267\017=,#\356=\322q\357\275\013\370(\274\"*\345\275\257d\221\275\222XO\275\350\302\237:\"\214\242\275h\270n<`\243\315\275\321\266s=\177\005)=Y\222,<\212\000\037=:\302.=\307K\003\276\007\311\324=:@\252=\265\327\267=O\243%\276\247<\363=\251\320\024=ZE\366=@\367\240\273Q\373H\276d\234\371<\223\364\335=\r\234&\275\247\375\000<z\336\310=|\326\342<`W\177<xf\262\272\356\330\266\275\311\270\364<Wn\243<A\350\257=\257?\305=\250\001\231=Y\356y=\251\275\244\274\315\210Y;\365\261\233=\007\353\307\275P\307\335\274\236\222\035>JN\271\274\236\201g\276M\010\001=\027\262\212\274QOD<M.\206\275\177\201\203\273U\177\273\275$\305\024\276\252\206\332\275\320\350(\276\253\004U=\225\023\213\275\200\342\257=\340\263\247;\310\177S=\340\207\265\274\377d\205<\253\207\353\2743\033 >\205\240\376<\366\210\3769\223\342\262=\264z\303\275#e\010\276\202o\027\276\265\010e=UA@\276\320\027\255=,\027\005>t9\247\274(\232\206\275\000Ck\276\3768l;\004:\016<c7?=\327\212\201\274m\231 \274g\320\253<\241\\\220\274\006\r\256:\202\252\277\275\024A}>Ka\364\273m\232$\275\315 \250\275~7\250=\267\300\307<\270\253\320=q,\260\275*P\215\275\271\363~\276\027}}=\001?\213=2\2535\275\213\250\201\275\261 \302\275\\6j=\222X\265=\215\017\303=H2\372\267\352+\214=\342\224X;t\310:=f\241\351=B\207\235\275$>*=0j*>\261H\030>\345\222\371\274^W\313=Vf\013\274xz\254<1\337\033>2>4=,lR<\242\3409\275\246\345\206>\261\314\234\275?W\351=|\245l\275\266\374\027\275\313\021\313\275\365\252\247=\013n\221\275\030\252\254<0\371Z\275\377\301\020=\210\300=\276\347\206\253=\305@\n\276\326<&<\257ca\275F\026a;\361\273\245=\020\'\220=\013\210\r=\225v\346<\351\362*\274\264\'\355\275jG\010\276_&|=^\312-\274`\371/\274\000\013\301=X+\273\275\316\337\006=\3337\016\276\260\313\324=>\240\233=\033\275\373\274\211\363\350=\240o\313<\274\262\212=\336\0259\276\030\n\366<\344$\303=\201\033\004\276\255\025\370;\355\3038;\302W(\2766l\020=\216\317\223\275O\231\214\275\231\277i\275\226\240\243\275B,\000=\237w\345\275\023\022\221\275fD\253=\022\020R=\013\240\247=\343\234\035\275\351t\016=u\354\224=\r\240\275=\034a\177<d\347C=\377\005Q=\277\245\360;\263qj\275e\241\304=\223M5>\032\336\243=wq]=\271B\211=\"4\321<2V,;\272\0253;\344\363\261=\273\001\035\275\004\236:\274\204Y\331\275\332\301\320\274"
      }
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel"
  input: "lstm_1_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/concat"
  op: "ConcatV2"
  input: "lstm_1_1/Const"
  input: "lstm_1_1/Const_1"
  input: "lstm_1_1/Const_2"
  input: "lstm_1_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1_1/bias/Assign"
  op: "Assign"
  input: "lstm_1_1/bias"
  input: "lstm_1_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/bias/read"
  op: "Identity"
  input: "lstm_1_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/Square"
  op: "Square"
  input: "lstm_1_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer_1/mul/x"
  input: "lstm_1_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "lstm_1_1/weight_regularizer_1/mul"
  input: "lstm_1_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/add"
  op: "Add"
  input: "lstm_1_1/weight_regularizer_1/add/x"
  input: "lstm_1_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read"
  input: "lstm_1_1/strided_slice/stack"
  input: "lstm_1_1/strided_slice/stack_1"
  input: "lstm_1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read"
  input: "lstm_1_1/strided_slice_1/stack"
  input: "lstm_1_1/strided_slice_1/stack_1"
  input: "lstm_1_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read"
  input: "lstm_1_1/strided_slice_2/stack"
  input: "lstm_1_1/strided_slice_2/stack_1"
  input: "lstm_1_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read"
  input: "lstm_1_1/strided_slice_3/stack"
  input: "lstm_1_1/strided_slice_3/stack_1"
  input: "lstm_1_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read"
  input: "lstm_1_1/strided_slice_4/stack"
  input: "lstm_1_1/strided_slice_4/stack_1"
  input: "lstm_1_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read"
  input: "lstm_1_1/strided_slice_5/stack"
  input: "lstm_1_1/strided_slice_5/stack_1"
  input: "lstm_1_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read"
  input: "lstm_1_1/strided_slice_6/stack"
  input: "lstm_1_1/strided_slice_6/stack_1"
  input: "lstm_1_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read"
  input: "lstm_1_1/strided_slice_7/stack"
  input: "lstm_1_1/strided_slice_7/stack_1"
  input: "lstm_1_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read"
  input: "lstm_1_1/strided_slice_8/stack"
  input: "lstm_1_1/strided_slice_8/stack_1"
  input: "lstm_1_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read"
  input: "lstm_1_1/strided_slice_9/stack"
  input: "lstm_1_1/strided_slice_9/stack_1"
  input: "lstm_1_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read"
  input: "lstm_1_1/strided_slice_10/stack"
  input: "lstm_1_1/strided_slice_10/stack_1"
  input: "lstm_1_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read"
  input: "lstm_1_1/strided_slice_11/stack"
  input: "lstm_1_1/strided_slice_11/stack_1"
  input: "lstm_1_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/zeros_like"
  op: "ZerosLike"
  input: "lstm_1_input_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/Sum"
  op: "Sum"
  input: "lstm_1_1/zeros_like"
  input: "lstm_1_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1_1/Sum"
  input: "lstm_1_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/Tile"
  op: "Tile"
  input: "lstm_1_1/ExpandDims"
  input: "lstm_1_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/Tile_1"
  op: "Tile"
  input: "lstm_1_1/ExpandDims"
  input: "lstm_1_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/transpose"
  op: "Transpose"
  input: "lstm_1_input_1"
  input: "lstm_1_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/Shape"
  op: "Shape"
  input: "lstm_1_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1_1/Shape"
  input: "lstm_1_1/strided_slice_12/stack"
  input: "lstm_1_1/strided_slice_12/stack_1"
  input: "lstm_1_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1_1/transpose"
  input: "lstm_1_1/strided_slice_13/stack"
  input: "lstm_1_1/strided_slice_13/stack_1"
  input: "lstm_1_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1_1/MatMul"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13"
  input: "lstm_1_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13"
  input: "lstm_1_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13"
  input: "lstm_1_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13"
  input: "lstm_1_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul"
  input: "lstm_1_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_1"
  input: "lstm_1_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_2"
  input: "lstm_1_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_3"
  input: "lstm_1_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1_1/Tile"
  input: "lstm_1_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add"
  op: "Add"
  input: "lstm_1_1/BiasAdd"
  input: "lstm_1_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/mul"
  op: "Mul"
  input: "lstm_1_1/mul/x"
  input: "lstm_1_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/add_1"
  op: "Add"
  input: "lstm_1_1/mul"
  input: "lstm_1_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/clip_by_value"
  op: "ClipByValue"
  input: "lstm_1_1/add_1"
  input: "lstm_1_1/Const_3"
  input: "lstm_1_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1_1/Tile"
  input: "lstm_1_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_2"
  op: "Add"
  input: "lstm_1_1/BiasAdd_1"
  input: "lstm_1_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/mul_1"
  op: "Mul"
  input: "lstm_1_1/mul_1/x"
  input: "lstm_1_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/add_3"
  op: "Add"
  input: "lstm_1_1/mul_1"
  input: "lstm_1_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/clip_by_value_1"
  op: "ClipByValue"
  input: "lstm_1_1/add_3"
  input: "lstm_1_1/Const_5"
  input: "lstm_1_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_2"
  op: "Mul"
  input: "lstm_1_1/clip_by_value_1"
  input: "lstm_1_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1_1/Tile"
  input: "lstm_1_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_4"
  op: "Add"
  input: "lstm_1_1/BiasAdd_2"
  input: "lstm_1_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Tanh"
  op: "Tanh"
  input: "lstm_1_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_3"
  op: "Mul"
  input: "lstm_1_1/clip_by_value"
  input: "lstm_1_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_5"
  op: "Add"
  input: "lstm_1_1/mul_2"
  input: "lstm_1_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1_1/Tile"
  input: "lstm_1_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_6"
  op: "Add"
  input: "lstm_1_1/BiasAdd_3"
  input: "lstm_1_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/mul_4"
  op: "Mul"
  input: "lstm_1_1/mul_4/x"
  input: "lstm_1_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/add_7"
  op: "Add"
  input: "lstm_1_1/mul_4"
  input: "lstm_1_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/clip_by_value_2"
  op: "ClipByValue"
  input: "lstm_1_1/add_7"
  input: "lstm_1_1/Const_7"
  input: "lstm_1_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_5"
  op: "Mul"
  input: "lstm_1_1/clip_by_value_2"
  input: "lstm_1_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1_1/TensorArrayUnstack/Shape"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1_1/TensorArrayUnstack/range/start"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1_1/TensorArray_1"
  input: "lstm_1_1/TensorArrayUnstack/range"
  input: "lstm_1_1/transpose"
  input: "lstm_1_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_1_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Enter"
  op: "Enter"
  input: "lstm_1_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_4"
  op: "Enter"
  input: "lstm_1_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge"
  op: "Merge"
  input: "lstm_1_1/while/Enter"
  input: "lstm_1_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1_1/while/Enter_1"
  input: "lstm_1_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1_1/while/Enter_2"
  input: "lstm_1_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1_1/while/Enter_3"
  input: "lstm_1_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_4"
  op: "Merge"
  input: "lstm_1_1/while/Enter_4"
  input: "lstm_1_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Less"
  op: "Less"
  input: "lstm_1_1/while/Merge"
  input: "lstm_1_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Less_1"
  op: "Less"
  input: "lstm_1_1/while/Merge_1"
  input: "lstm_1_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Less_1/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "lstm_1_1/while/Less"
  input: "lstm_1_1/while/Less_1"
}
node {
  name: "lstm_1_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1_1/while/LogicalAnd"
}
node {
  name: "lstm_1_1/while/Switch"
  op: "Switch"
  input: "lstm_1_1/while/Merge"
  input: "lstm_1_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1_1/while/Merge_1"
  input: "lstm_1_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1_1/while/Merge_2"
  input: "lstm_1_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1_1/while/Merge_3"
  input: "lstm_1_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_4"
  op: "Switch"
  input: "lstm_1_1/while/Merge_4"
  input: "lstm_1_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Identity"
  op: "Identity"
  input: "lstm_1_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_4"
  op: "Identity"
  input: "lstm_1_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/add/y"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add"
  op: "Add"
  input: "lstm_1_1/while/Identity"
  input: "lstm_1_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1_1/while/Identity_1"
  input: "lstm_1_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3"
  input: "lstm_1_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3"
  input: "lstm_1_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3"
  input: "lstm_1_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3"
  input: "lstm_1_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul"
  input: "lstm_1_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_1"
  input: "lstm_1_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_2"
  input: "lstm_1_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_3"
  input: "lstm_1_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3"
  input: "lstm_1_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/add_1"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd"
  input: "lstm_1_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/mul/x"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul"
  op: "Mul"
  input: "lstm_1_1/while/mul/x"
  input: "lstm_1_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/add_2/y"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_2"
  op: "Add"
  input: "lstm_1_1/while/mul"
  input: "lstm_1_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Const"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/clip_by_value"
  op: "ClipByValue"
  input: "lstm_1_1/while/add_2"
  input: "lstm_1_1/while/Const"
  input: "lstm_1_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3"
  input: "lstm_1_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/add_3"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_1"
  input: "lstm_1_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul_1"
  op: "Mul"
  input: "lstm_1_1/while/mul_1/x"
  input: "lstm_1_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/add_4/y"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_4"
  op: "Add"
  input: "lstm_1_1/while/mul_1"
  input: "lstm_1_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Const_2"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_3"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "lstm_1_1/while/add_4"
  input: "lstm_1_1/while/Const_2"
  input: "lstm_1_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/mul_2"
  op: "Mul"
  input: "lstm_1_1/while/clip_by_value_1"
  input: "lstm_1_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3"
  input: "lstm_1_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/add_5"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_2"
  input: "lstm_1_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/mul_3"
  op: "Mul"
  input: "lstm_1_1/while/clip_by_value"
  input: "lstm_1_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/add_6"
  op: "Add"
  input: "lstm_1_1/while/mul_2"
  input: "lstm_1_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3"
  input: "lstm_1_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/add_7"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_3"
  input: "lstm_1_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul_4"
  op: "Mul"
  input: "lstm_1_1/while/mul_4/x"
  input: "lstm_1_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_8"
  op: "Add"
  input: "lstm_1_1/while/mul_4"
  input: "lstm_1_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Const_4"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_5"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "lstm_1_1/while/add_8"
  input: "lstm_1_1/while/Const_4"
  input: "lstm_1_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/mul_5"
  op: "Mul"
  input: "lstm_1_1/while/clip_by_value_2"
  input: "lstm_1_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1_1/while/Identity_1"
  input: "lstm_1_1/while/mul_5"
  input: "lstm_1_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/add_9/y"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_9"
  op: "Add"
  input: "lstm_1_1/while/Identity_1"
  input: "lstm_1_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_4"
  op: "NextIteration"
  input: "lstm_1_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Exit"
  op: "Exit"
  input: "lstm_1_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_4"
  op: "Exit"
  input: "lstm_1_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1_1/TensorArray"
  input: "lstm_1_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1_1/TensorArrayStack/range/start"
  input: "lstm_1_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1_1/TensorArray"
  input: "lstm_1_1/TensorArrayStack/range"
  input: "lstm_1_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_1_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/sub"
  op: "Sub"
  input: "lstm_1_1/while/Exit_1"
  input: "lstm_1_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1_1/TensorArray"
  input: "lstm_1_1/sub"
  input: "lstm_1_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/transpose_1"
  op: "Transpose"
  input: "lstm_1_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten_1/Shape"
  op: "Shape"
  input: "lstm_1_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice"
  op: "StridedSlice"
  input: "flatten_1/Shape"
  input: "flatten_1/strided_slice/stack"
  input: "flatten_1/strided_slice/stack_1"
  input: "flatten_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten_1/Prod"
  op: "Prod"
  input: "flatten_1/strided_slice"
  input: "flatten_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten_1/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flatten_1/stack"
  op: "Pack"
  input: "flatten_1/stack/0"
  input: "flatten_1/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten_1/Reshape"
  op: "Reshape"
  input: "lstm_1_1/transpose_1"
  input: "flatten_1/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.042874645
      }
    }
  }
}
node {
  name: "dense_1_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.042874645
      }
    }
  }
}
node {
  name: "dense_1_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4300401
    }
  }
}
node {
  name: "dense_1_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1_1/random_uniform/max"
  input: "dense_1_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1_1/random_uniform/RandomUniform"
  input: "dense_1_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/random_uniform"
  op: "Add"
  input: "dense_1_1/random_uniform/mul"
  input: "dense_1_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1_1/kernel/Assign"
  op: "Assign"
  input: "dense_1_1/kernel"
  input: "dense_1_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1_1/kernel/read"
  op: "Identity"
  input: "dense_1_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/Square"
  op: "Square"
  input: "dense_1_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/mul"
  op: "Mul"
  input: "dense_1_1/weight_regularizer/mul/x"
  input: "dense_1_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/Sum"
  op: "Sum"
  input: "dense_1_1/weight_regularizer/mul"
  input: "dense_1_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/add"
  op: "Add"
  input: "dense_1_1/weight_regularizer/add/x"
  input: "dense_1_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1_1/bias/Assign"
  op: "Assign"
  input: "dense_1_1/bias"
  input: "dense_1_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1_1/bias/read"
  op: "Identity"
  input: "dense_1_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/Square"
  op: "Square"
  input: "dense_1_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "dense_1_1/weight_regularizer_1/mul/x"
  input: "dense_1_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "dense_1_1/weight_regularizer_1/mul"
  input: "dense_1_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/add"
  op: "Add"
  input: "dense_1_1/weight_regularizer_1/add/x"
  input: "dense_1_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/MatMul"
  op: "MatMul"
  input: "flatten_1/Reshape"
  input: "dense_1_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1_1/MatMul"
  input: "dense_1_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1_1/Relu"
  op: "Relu"
  input: "dense_1_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "output_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29070094
      }
    }
  }
}
node {
  name: "output_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29070094
      }
    }
  }
}
node {
  name: "output_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "output_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3412890
    }
  }
}
node {
  name: "output_1/random_uniform/sub"
  op: "Sub"
  input: "output_1/random_uniform/max"
  input: "output_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/random_uniform/mul"
  op: "Mul"
  input: "output_1/random_uniform/RandomUniform"
  input: "output_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/random_uniform"
  op: "Add"
  input: "output_1/random_uniform/mul"
  input: "output_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "output_1/kernel/Assign"
  op: "Assign"
  input: "output_1/kernel"
  input: "output_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output_1/kernel/read"
  op: "Identity"
  input: "output_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/Square"
  op: "Square"
  input: "output_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/mul"
  op: "Mul"
  input: "output_1/weight_regularizer/mul/x"
  input: "output_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/Sum"
  op: "Sum"
  input: "output_1/weight_regularizer/mul"
  input: "output_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/add"
  op: "Add"
  input: "output_1/weight_regularizer/add/x"
  input: "output_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "output_1/bias/Assign"
  op: "Assign"
  input: "output_1/bias"
  input: "output_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output_1/bias/read"
  op: "Identity"
  input: "output_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/Square"
  op: "Square"
  input: "output_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "output_1/weight_regularizer_1/mul/x"
  input: "output_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "output_1/weight_regularizer_1/mul"
  input: "output_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/add"
  op: "Add"
  input: "output_1/weight_regularizer_1/add/x"
  input: "output_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/MatMul"
  op: "MatMul"
  input: "dense_1_1/Relu"
  input: "output_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output_1/BiasAdd"
  op: "BiasAdd"
  input: "output_1/MatMul"
  input: "output_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "output_1/Softmax"
  op: "Softmax"
  input: "output_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "lstm_1_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "lstm_1_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_1_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "dense_1_1/bias"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "output_1/kernel"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "output_1/bias"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "output/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "output/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_1_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_1_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "lstm_1_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dense_1_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dense_1_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "output_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "output_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1_1/bias/Assign"
  input: "^dense_1_1/kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1_1/bias/Assign"
  input: "^lstm_1_1/kernel/Assign"
  input: "^lstm_1_1/recurrent_kernel/Assign"
  input: "^output/bias/Assign"
  input: "^output/kernel/Assign"
  input: "^output_1/bias/Assign"
  input: "^output_1/kernel/Assign"
}
node {
  name: "Adam_1/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam_1/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam_1/iterations/Assign"
  op: "Assign"
  input: "Adam_1/iterations"
  input: "Adam_1/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/iterations/read"
  op: "Identity"
  input: "Adam_1/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
}
node {
  name: "Adam_1/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "Adam_1/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam_1/lr/Assign"
  op: "Assign"
  input: "Adam_1/lr"
  input: "Adam_1/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/lr/read"
  op: "Identity"
  input: "Adam_1/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr"
      }
    }
  }
}
node {
  name: "Adam_1/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "Adam_1/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam_1/beta_1/Assign"
  op: "Assign"
  input: "Adam_1/beta_1"
  input: "Adam_1/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/beta_1/read"
  op: "Identity"
  input: "Adam_1/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1"
      }
    }
  }
}
node {
  name: "Adam_1/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "Adam_1/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam_1/beta_2/Assign"
  op: "Assign"
  input: "Adam_1/beta_2"
  input: "Adam_1/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/beta_2/read"
  op: "Identity"
  input: "Adam_1/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2"
      }
    }
  }
}
node {
  name: "Adam_1/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam_1/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam_1/decay/Assign"
  op: "Assign"
  input: "Adam_1/decay"
  input: "Adam_1/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/decay/read"
  op: "Identity"
  input: "Adam_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay"
      }
    }
  }
}
node {
  name: "output_target_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "output_sample_weights_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss_1/output_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/sub"
  op: "Sub"
  input: "loss_1/output_loss/sub/x"
  input: "loss_1/output_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/clip_by_value"
  op: "ClipByValue"
  input: "output_1/Softmax"
  input: "loss_1/output_loss/Const"
  input: "loss_1/output_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Log"
  op: "Log"
  input: "loss_1/output_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape"
  op: "Reshape"
  input: "output_target_1"
  input: "loss_1/output_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/Cast"
  op: "Cast"
  input: "loss_1/output_loss/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\007\000\000\000"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape_1"
  op: "Reshape"
  input: "loss_1/output_loss/Log"
  input: "loss_1/output_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss_1/output_loss/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss_1/output_loss/Reshape_1"
  input: "loss_1/output_loss/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss_1/output_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Mean"
  op: "Mean"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss_1/output_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/output_loss/mul"
  op: "Mul"
  input: "loss_1/output_loss/Mean"
  input: "output_sample_weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/NotEqual"
  op: "NotEqual"
  input: "output_sample_weights_1"
  input: "loss_1/output_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Cast_1"
  op: "Cast"
  input: "loss_1/output_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss_1/output_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Mean_1"
  op: "Mean"
  input: "loss_1/output_loss/Cast_1"
  input: "loss_1/output_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/output_loss/truediv"
  op: "RealDiv"
  input: "loss_1/output_loss/mul"
  input: "loss_1/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Mean_2"
  op: "Mean"
  input: "loss_1/output_loss/truediv"
  input: "loss_1/output_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss_1/mul"
  op: "Mul"
  input: "loss_1/mul/x"
  input: "loss_1/output_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add"
  op: "Add"
  input: "loss_1/mul"
  input: "output_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_1"
  op: "Add"
  input: "loss_1/add"
  input: "lstm_1_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_2"
  op: "Add"
  input: "loss_1/add_1"
  input: "dense_1_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_3"
  op: "Add"
  input: "loss_1/add_2"
  input: "lstm_1_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_4"
  op: "Add"
  input: "loss_1/add_3"
  input: "output_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_5"
  op: "Add"
  input: "loss_1/add_4"
  input: "dense_1_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics_1/acc/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics_1/acc/Max"
  op: "Max"
  input: "output_target_1"
  input: "metrics_1/acc/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics_1/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics_1/acc/ArgMax"
  op: "ArgMax"
  input: "output_1/Softmax"
  input: "metrics_1/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics_1/acc/Cast"
  op: "Cast"
  input: "metrics_1/acc/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics_1/acc/Equal"
  op: "Equal"
  input: "metrics_1/acc/Max"
  input: "metrics_1/acc/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics_1/acc/Cast_1"
  op: "Cast"
  input: "metrics_1/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics_1/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics_1/acc/Mean"
  op: "Mean"
  input: "metrics_1/acc/Cast_1"
  input: "metrics_1/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/add_5"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_1_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_1_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Tile"
  input: "dense_1_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "dense_1_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Tile"
  input: "output_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "output_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "dense_1_1/kernel/read"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Tile"
  input: "lstm_1_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "output_1/bias/read"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss_1/output_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss_1/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Tile"
  input: "dense_1_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "dense_1_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "lstm_1_1/bias/read"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss_1/output_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss_1/output_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Tile"
  input: "lstm_1_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "dense_1_1/bias/read"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape"
  op: "Shape"
  input: "loss_1/output_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/truediv"
  input: "loss_1/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss_1/output_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Neg"
  input: "loss_1/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_1"
  input: "loss_1/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Tile"
  input: "output_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "output_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "lstm_1_1/kernel/read"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape"
  op: "Shape"
  input: "loss_1/output_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "output_sample_weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape"
  input: "output_sample_weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss_1/output_loss/Mean"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "output_1/kernel/read"
  input: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/add"
  op: "Add"
  input: "loss_1/output_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss_1/output_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  op: "PreventGradient"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/truediv"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Shape"
  op: "Shape"
  input: "loss_1/output_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Reshape_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Reshape_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss_1/output_loss/clip_by_value"
  input: "^training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "output_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_3"
  op: "Shape"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_3"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Less"
  op: "Less"
  input: "output_1/Softmax"
  input: "loss_1/output_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Greater"
  op: "Greater"
  input: "output_1/Softmax"
  input: "loss_1/output_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/LogicalOr"
  op: "LogicalOr"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Less"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Greater"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/LogicalOr"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Less"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_2"
  op: "Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Greater"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_2"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_2"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape"
  input: "output_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul"
  input: "training/Adam/gradients/output_1/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/Softmax_grad/Sum"
  input: "training/Adam/gradients/output_1/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/output_1/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/output_1/Softmax_grad/sub"
  input: "output_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_1"
  input: "output_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1_1/Relu"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/output_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/output_1/MatMul_grad/MatMul"
  input: "dense_1_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/output_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad"
  input: "dense_1_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "flatten_1/Reshape"
  input: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/dense_1_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/flatten_1/Reshape_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@flatten_1/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/flatten_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/flatten_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@flatten_1/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/flatten_1/Reshape_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1_1/TensorArray"
  input: "lstm_1_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1_1/while/Exit_2"
  input: "^training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_1_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_1_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_1"
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_1"
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1_1/while/Identity_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_4"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_1"
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_1"
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Enter"
  input: "lstm_1_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Enter"
  input: "lstm_1_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_2"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_3"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less"
  op: "Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Enter"
  input: "lstm_1_1/while/add_8"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater"
  op: "Greater"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/LogicalOr"
  op: "LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_2"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Enter"
  input: "lstm_1_1/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_4"
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_4"
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Enter"
  input: "lstm_1_1/while/Identity_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Enter"
  input: "lstm_1_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh"
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh"
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Enter"
  input: "lstm_1_1/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Enter"
  input: "lstm_1_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_2"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_3"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less"
  op: "Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Enter"
  input: "lstm_1_1/while/add_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater"
  op: "Greater"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/LogicalOr"
  op: "LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_2"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_2"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_3"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less"
  op: "Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Enter"
  input: "lstm_1_1/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater"
  op: "Greater"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/LogicalOr"
  op: "LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_2"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_3"
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_3"
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1_1/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
        s: "loc:@lstm_1_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
        s: "loc:@lstm_1_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Enter"
  input: "lstm_1_1/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Enter"
  input: "lstm_1_1/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/Shape"
  input: "lstm_1_1/strided_slice_11/stack"
  input: "lstm_1_1/strided_slice_11/stack_1"
  input: "lstm_1_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/Shape"
  input: "lstm_1_1/strided_slice_7/stack"
  input: "lstm_1_1/strided_slice_7/stack_1"
  input: "lstm_1_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/Shape"
  input: "lstm_1_1/strided_slice_3/stack"
  input: "lstm_1_1/strided_slice_3/stack_1"
  input: "lstm_1_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/Shape"
  input: "lstm_1_1/strided_slice_10/stack"
  input: "lstm_1_1/strided_slice_10/stack_1"
  input: "lstm_1_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/Shape"
  input: "lstm_1_1/strided_slice_6/stack"
  input: "lstm_1_1/strided_slice_6/stack_1"
  input: "lstm_1_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/Shape"
  input: "lstm_1_1/strided_slice_2/stack"
  input: "lstm_1_1/strided_slice_2/stack_1"
  input: "lstm_1_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/Shape"
  input: "lstm_1_1/strided_slice_9/stack"
  input: "lstm_1_1/strided_slice_9/stack_1"
  input: "lstm_1_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/Shape"
  input: "lstm_1_1/strided_slice_5/stack"
  input: "lstm_1_1/strided_slice_5/stack_1"
  input: "lstm_1_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/Shape"
  input: "lstm_1_1/strided_slice_8/stack"
  input: "lstm_1_1/strided_slice_8/stack_1"
  input: "lstm_1_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/Shape"
  input: "lstm_1_1/strided_slice_4/stack"
  input: "lstm_1_1/strided_slice_4/stack_1"
  input: "lstm_1_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/Shape"
  input: "lstm_1_1/strided_slice_1/stack"
  input: "lstm_1_1/strided_slice_1/stack_1"
  input: "lstm_1_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_grad/Shape"
  input: "lstm_1_1/strided_slice/stack"
  input: "lstm_1_1/strided_slice/stack_1"
  input: "lstm_1_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam_1/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam_1/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "ClipByValue"
  input: "training/Adam/sub"
  input: "training/Adam/Const"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam_1/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "ClipByValue"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "lstm_1_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "lstm_1_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "ClipByValue"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_4"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "lstm_1_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "ClipByValue"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_6"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "lstm_1_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "lstm_1_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "ClipByValue"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_8"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "dense_1_1/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "dense_1_1/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "ClipByValue"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_10"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "dense_1_1/bias/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "dense_1_1/bias"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "ClipByValue"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_12"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "output_1/kernel/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "output_1/kernel"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam_1/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam_1/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam_1/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam_1/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "ClipByValue"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_14"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "output_1/bias/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "output_1/bias"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss_1/add_5"
  input: "^metrics_1/acc/Mean"
  input: "^training/Adam/Assign"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Adam_1/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Adam_1/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam_1/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "Adam_1/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "Adam_1/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam_1/beta_1/Assign"
  input: "^Adam_1/beta_2/Assign"
  input: "^Adam_1/decay/Assign"
  input: "^Adam_1/iterations/Assign"
  input: "^Adam_1/lr/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "Adam_1/iterations"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_10"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "Placeholder_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_11"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "Placeholder_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_12"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "Placeholder_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_13"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "Placeholder_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_14"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Assign_14"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "Placeholder_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_15"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "Placeholder_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_16"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "Placeholder_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_17"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_17"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "Placeholder_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_18"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "Placeholder_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_19"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "Placeholder_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_20"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Assign_20"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "Placeholder_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_21"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "Placeholder_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_22"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "Placeholder_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_23"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_23"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "Placeholder_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_24"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "Placeholder_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_25"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "Placeholder_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_26"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_26"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "Placeholder_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_27"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "Placeholder_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_28"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "Placeholder_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/iterations"
        string_val: "Adam/lr"
        string_val: "Adam_1/beta_1"
        string_val: "Adam_1/beta_2"
        string_val: "Adam_1/decay"
        string_val: "Adam_1/iterations"
        string_val: "Adam_1/lr"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1_1/bias"
        string_val: "dense_1_1/kernel"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1_1/bias"
        string_val: "lstm_1_1/kernel"
        string_val: "lstm_1_1/recurrent_kernel"
        string_val: "output/bias"
        string_val: "output/kernel"
        string_val: "output_1/bias"
        string_val: "output_1/kernel"
        string_val: "training/Adam/Variable"
        string_val: "training/Adam/Variable_1"
        string_val: "training/Adam/Variable_10"
        string_val: "training/Adam/Variable_11"
        string_val: "training/Adam/Variable_12"
        string_val: "training/Adam/Variable_13"
        string_val: "training/Adam/Variable_14"
        string_val: "training/Adam/Variable_15"
        string_val: "training/Adam/Variable_16"
        string_val: "training/Adam/Variable_17"
        string_val: "training/Adam/Variable_18"
        string_val: "training/Adam/Variable_19"
        string_val: "training/Adam/Variable_2"
        string_val: "training/Adam/Variable_20"
        string_val: "training/Adam/Variable_3"
        string_val: "training/Adam/Variable_4"
        string_val: "training/Adam/Variable_5"
        string_val: "training/Adam/Variable_6"
        string_val: "training/Adam/Variable_7"
        string_val: "training/Adam/Variable_8"
        string_val: "training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Adam/beta_1"
  input: "Adam/beta_2"
  input: "Adam/decay"
  input: "Adam/iterations"
  input: "Adam/lr"
  input: "Adam_1/beta_1"
  input: "Adam_1/beta_2"
  input: "Adam_1/decay"
  input: "Adam_1/iterations"
  input: "Adam_1/lr"
  input: "dense_1/bias"
  input: "dense_1/kernel"
  input: "dense_1_1/bias"
  input: "dense_1_1/kernel"
  input: "lstm_1/bias"
  input: "lstm_1/kernel"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1_1/bias"
  input: "lstm_1_1/kernel"
  input: "lstm_1_1/recurrent_kernel"
  input: "output/bias"
  input: "output/kernel"
  input: "output_1/bias"
  input: "output_1/kernel"
  input: "training/Adam/Variable"
  input: "training/Adam/Variable_1"
  input: "training/Adam/Variable_10"
  input: "training/Adam/Variable_11"
  input: "training/Adam/Variable_12"
  input: "training/Adam/Variable_13"
  input: "training/Adam/Variable_14"
  input: "training/Adam/Variable_15"
  input: "training/Adam/Variable_16"
  input: "training/Adam/Variable_17"
  input: "training/Adam/Variable_18"
  input: "training/Adam/Variable_19"
  input: "training/Adam/Variable_2"
  input: "training/Adam/Variable_20"
  input: "training/Adam/Variable_3"
  input: "training/Adam/Variable_4"
  input: "training/Adam/Variable_5"
  input: "training/Adam/Variable_6"
  input: "training/Adam/Variable_7"
  input: "training/Adam/Variable_8"
  input: "training/Adam/Variable_9"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/iterations"
        string_val: "Adam/lr"
        string_val: "Adam_1/beta_1"
        string_val: "Adam_1/beta_2"
        string_val: "Adam_1/decay"
        string_val: "Adam_1/iterations"
        string_val: "Adam_1/lr"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1_1/bias"
        string_val: "dense_1_1/kernel"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1_1/bias"
        string_val: "lstm_1_1/kernel"
        string_val: "lstm_1_1/recurrent_kernel"
        string_val: "output/bias"
        string_val: "output/kernel"
        string_val: "output_1/bias"
        string_val: "output_1/kernel"
        string_val: "training/Adam/Variable"
        string_val: "training/Adam/Variable_1"
        string_val: "training/Adam/Variable_10"
        string_val: "training/Adam/Variable_11"
        string_val: "training/Adam/Variable_12"
        string_val: "training/Adam/Variable_13"
        string_val: "training/Adam/Variable_14"
        string_val: "training/Adam/Variable_15"
        string_val: "training/Adam/Variable_16"
        string_val: "training/Adam/Variable_17"
        string_val: "training/Adam/Variable_18"
        string_val: "training/Adam/Variable_19"
        string_val: "training/Adam/Variable_2"
        string_val: "training/Adam/Variable_20"
        string_val: "training/Adam/Variable_3"
        string_val: "training/Adam/Variable_4"
        string_val: "training/Adam/Variable_5"
        string_val: "training/Adam/Variable_6"
        string_val: "training/Adam/Variable_7"
        string_val: "training/Adam/Variable_8"
        string_val: "training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "Adam/beta_2"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "Adam/decay"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "Adam/iterations"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "Adam/lr"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "Adam_1/beta_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "Adam_1/beta_2"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "Adam_1/decay"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "Adam_1/iterations"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "Adam_1/lr"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dense_1/bias"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dense_1/kernel"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dense_1_1/bias"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dense_1_1/kernel"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "lstm_1/bias"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "lstm_1_1/bias"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "lstm_1_1/kernel"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "output/bias"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "output/kernel"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "output_1/bias"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "output_1/kernel"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "Placeholder_28_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_27_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_26_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_25_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_24_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_23_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_22_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_21_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Placeholder_20_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Placeholder_19_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Placeholder_18_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Placeholder_17_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_16_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_15_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_14_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Placeholder_13_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Placeholder_12_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Placeholder_11_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Placeholder_10_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_9_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_8_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_7_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "training/Adam/add_21/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_15_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_14_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add_18/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_13_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_12_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add_15/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_11_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_10_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add_12/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_9_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_8_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add_9/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_7_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_6_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add_6/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_5_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_4_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add_3/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/Const_3_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_20_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_28_1"
  op: "Assign"
  input: "training/Adam/Variable_20_1"
  input: "Placeholder_28_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_44_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_20/read_1"
  op: "Identity"
  input: "training/Adam/Variable_20_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20_1"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor_1"
  input: "training/Adam/zeros_20/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_20_1"
  input: "training/Adam/zeros_20_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_27_1"
  op: "Assign"
  input: "training/Adam/Variable_19_1"
  input: "Placeholder_27_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_43_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_19/read_1"
  op: "Identity"
  input: "training/Adam/Variable_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19_1"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor_1"
  input: "training/Adam/zeros_19/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_19_1"
  input: "training/Adam/zeros_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_26_1"
  op: "Assign"
  input: "training/Adam/Variable_18_1"
  input: "Placeholder_26_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_42_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_18/read_1"
  op: "Identity"
  input: "training/Adam/Variable_18_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18_1"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor_1"
  input: "training/Adam/zeros_18/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_18_1"
  input: "training/Adam/zeros_18_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_25_1"
  op: "Assign"
  input: "training/Adam/Variable_17_1"
  input: "Placeholder_25_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_41_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_17/read_1"
  op: "Identity"
  input: "training/Adam/Variable_17_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17_1"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor_1"
  input: "training/Adam/zeros_17/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_17_1"
  input: "training/Adam/zeros_17_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_24_1"
  op: "Assign"
  input: "training/Adam/Variable_16_1"
  input: "Placeholder_24_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_40_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_16/read_1"
  op: "Identity"
  input: "training/Adam/Variable_16_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16_1"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor_1"
  input: "training/Adam/zeros_16/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_16_1"
  input: "training/Adam/zeros_16_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_23_1"
  op: "Assign"
  input: "training/Adam/Variable_15_1"
  input: "Placeholder_23_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_39_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_15/read_1"
  op: "Identity"
  input: "training/Adam/Variable_15_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15_1"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor_1"
  input: "training/Adam/zeros_15/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_15_1"
  input: "training/Adam/zeros_15_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_22_1"
  op: "Assign"
  input: "training/Adam/Variable_14_1"
  input: "Placeholder_22_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_38_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_14/read_1"
  op: "Identity"
  input: "training/Adam/Variable_14_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14_1"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor_1"
  input: "training/Adam/zeros_14/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_14_1"
  input: "training/Adam/zeros_14_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_21_1"
  op: "Assign"
  input: "training/Adam/Variable_13_1"
  input: "Placeholder_21_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_37_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_13/read_1"
  op: "Identity"
  input: "training/Adam/Variable_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13_1"
  input: "training/Adam/zeros_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_20_1"
  op: "Assign"
  input: "training/Adam/Variable_12_1"
  input: "Placeholder_20_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_36_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_12/read_1"
  op: "Identity"
  input: "training/Adam/Variable_12_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_12_1"
  input: "training/Adam/zeros_12_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_19_1"
  op: "Assign"
  input: "training/Adam/Variable_11_1"
  input: "Placeholder_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_35_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_11/read_1"
  op: "Identity"
  input: "training/Adam/Variable_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_11_1"
  input: "training/Adam/zeros_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_18_1"
  op: "Assign"
  input: "training/Adam/Variable_10_1"
  input: "Placeholder_18_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_34_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_10/read_1"
  op: "Identity"
  input: "training/Adam/Variable_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10_1"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor_1"
  input: "training/Adam/zeros_10/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_10_1"
  input: "training/Adam/zeros_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_17_1"
  op: "Assign"
  input: "training/Adam/Variable_9_1"
  input: "Placeholder_17_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_33_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_9/read_1"
  op: "Identity"
  input: "training/Adam/Variable_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_9_1"
  input: "training/Adam/zeros_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_16_1"
  op: "Assign"
  input: "training/Adam/Variable_8_1"
  input: "Placeholder_16_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_32_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_8/read_1"
  op: "Identity"
  input: "training/Adam/Variable_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8_1"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor_1"
  input: "training/Adam/zeros_8/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_8_1"
  input: "training/Adam/zeros_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_15_1"
  op: "Assign"
  input: "training/Adam/Variable_7_1"
  input: "Placeholder_15_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_31_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_7/read_1"
  op: "Identity"
  input: "training/Adam/Variable_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7_1"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor_1"
  input: "training/Adam/zeros_7/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_7_1"
  input: "training/Adam/zeros_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_14_1"
  op: "Assign"
  input: "training/Adam/Variable_6_1"
  input: "Placeholder_14_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_30_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_6/read_1"
  op: "Identity"
  input: "training/Adam/Variable_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_6_1"
  input: "training/Adam/zeros_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_13_1"
  op: "Assign"
  input: "training/Adam/Variable_5_1"
  input: "Placeholder_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_29_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_5/read_1"
  op: "Identity"
  input: "training/Adam/Variable_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_5_1"
  input: "training/Adam/zeros_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_12_1"
  op: "Assign"
  input: "training/Adam/Variable_4_1"
  input: "Placeholder_12_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_28_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_4/read_1"
  op: "Identity"
  input: "training/Adam/Variable_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_4_1"
  input: "training/Adam/zeros_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_11_1"
  op: "Assign"
  input: "training/Adam/Variable_3_1"
  input: "Placeholder_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_27_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_3/read_1"
  op: "Identity"
  input: "training/Adam/Variable_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3_1"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor_1"
  input: "training/Adam/zeros_3/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_3_1"
  input: "training/Adam/zeros_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_10_1"
  op: "Assign"
  input: "training/Adam/Variable_2_1"
  input: "Placeholder_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_26_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_2/read_1"
  op: "Identity"
  input: "training/Adam/Variable_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_2_1"
  input: "training/Adam/zeros_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_9_1"
  op: "Assign"
  input: "training/Adam/Variable_1_1"
  input: "Placeholder_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_25_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable_1/read_1"
  op: "Identity"
  input: "training/Adam/Variable_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor_1"
  input: "training/Adam/zeros_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_1_1"
  input: "training/Adam/zeros_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_8_1"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "Placeholder_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_24_1"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Variable/read_1"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor_1"
  input: "training/Adam/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/sub_1/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/sub/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_8_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_9_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_6_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_10_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_7_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_11_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_2_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
        s: "loc:@lstm_1_1/while/TensorArrayReadV3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
        s: "loc:@lstm_1_1/while/TensorArrayReadV3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_3_1"
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_3_1"
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_2"
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_2"
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_4_1"
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_4_1"
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_1_1"
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_1_1"
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_2"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter_2"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_1_1"
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Identity_1_1"
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Sum/reduction_indices_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_2_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1/y_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum/y_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill/value_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/delta_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/start_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill_1"
  op: "Fill"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill/value_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range_1"
  op: "Range"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/start_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range/delta_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_2"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum/y_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_2_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod_1_1"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_2_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_2"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_2"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_2"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1_1"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/add_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/add_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill_1"
  op: "Fill"
  input: "training/Adam/gradients/Shape_1"
  input: "training/Adam/gradients/grad_ys_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/add_5_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Fill_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Reshape_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Fill_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Fill_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Reshape_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Fill_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Fill_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Reshape_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Fill_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Reshape_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Sum_1"
      }
    }
  }
}
node {
  name: "metrics_1/acc/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics_1/acc/ArgMax/dimension_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics_1/acc/Max/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/mul_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill_1"
  input: "loss_1/mul/x_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/NotEqual/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Mean/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/add_1"
  op: "Add"
  input: "loss_1/output_loss/Mean/reduction_indices_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/mod_1"
  op: "FloorMod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/add_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Size_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape_1/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\007\000\000\000"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss_1/output_loss/sub/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss_1/output_loss/sub_1"
  op: "Sub"
  input: "loss_1/output_loss/sub/x_1"
  input: "loss_1/output_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_sample_weights_1_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_1_1"
  op: "Shape"
  input: "output_sample_weights_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/NotEqual_1"
  op: "NotEqual"
  input: "output_sample_weights_1_1"
  input: "loss_1/output_loss/NotEqual/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Cast_1_1"
  op: "Cast"
  input: "loss_1/output_loss/NotEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss_1/output_loss/Mean_1_1"
  op: "Mean"
  input: "loss_1/output_loss/Cast_1_1"
  input: "loss_1/output_loss/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output_target_1_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "metrics_1/acc/Max_1"
  op: "Max"
  input: "output_target_1_1"
  input: "metrics_1/acc/Max/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape_2"
  op: "Reshape"
  input: "output_target_1_1"
  input: "loss_1/output_loss/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/Cast_2"
  op: "Cast"
  input: "loss_1/output_loss/Reshape_2"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/Shape_1"
  op: "Shape"
  input: "loss_1/output_loss/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam_1/decay_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_23_1"
  op: "IsVariableInitialized"
  input: "Adam_1/decay_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/decay/read_1"
  op: "Identity"
  input: "Adam_1/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay_1"
      }
    }
  }
}
node {
  name: "Adam_1/decay/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam_1/decay/Assign_1"
  op: "Assign"
  input: "Adam_1/decay_1"
  input: "Adam_1/decay/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/beta_2_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_22_1"
  op: "IsVariableInitialized"
  input: "Adam_1/beta_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/beta_2/read_1"
  op: "Identity"
  input: "Adam_1/beta_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/sub_21_1"
  op: "Sub"
  input: "training/Adam/sub_21/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_13/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18_1"
  op: "Sub"
  input: "training/Adam/sub_18/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_12/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15_1"
  op: "Sub"
  input: "training/Adam/sub_15/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_11/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12_1"
  op: "Sub"
  input: "training/Adam/sub_12/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_10/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9_1"
  op: "Sub"
  input: "training/Adam/sub_9/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_9/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6_1"
  op: "Sub"
  input: "training/Adam/sub_6/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_8/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3_1"
  op: "Sub"
  input: "training/Adam/sub_3/x_1"
  input: "Adam_1/beta_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3_1"
  op: "Mul"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/Variable_7/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/beta_2/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "Adam_1/beta_2/Assign_1"
  op: "Assign"
  input: "Adam_1/beta_2_1"
  input: "Adam_1/beta_2/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/beta_1_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_21_1"
  op: "IsVariableInitialized"
  input: "Adam_1/beta_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/beta_1/read_1"
  op: "Identity"
  input: "Adam_1/beta_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/sub_20_1"
  op: "Sub"
  input: "training/Adam/sub_20/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_31_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable_6/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17_1"
  op: "Sub"
  input: "training/Adam/sub_17/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_26_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable_5/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14_1"
  op: "Sub"
  input: "training/Adam/sub_14/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_21_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable_4/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11_1"
  op: "Sub"
  input: "training/Adam/sub_11/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_16_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable_3/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8_1"
  op: "Sub"
  input: "training/Adam/sub_8/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_11_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable_2/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5_1"
  op: "Sub"
  input: "training/Adam/sub_5/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_6_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2_1"
  op: "Sub"
  input: "training/Adam/sub_2/x_1"
  input: "Adam_1/beta_1/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_1_1"
  op: "Mul"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/Variable/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/beta_1/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "Adam_1/beta_1/Assign_1"
  op: "Assign"
  input: "Adam_1/beta_1_1"
  input: "Adam_1/beta_1/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/lr_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_20_1"
  op: "IsVariableInitialized"
  input: "Adam_1/lr_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/lr/read_1"
  op: "Identity"
  input: "Adam_1/lr_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr_1"
      }
    }
  }
}
node {
  name: "Adam_1/lr/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "Adam_1/lr/Assign_1"
  op: "Assign"
  input: "Adam_1/lr_1"
  input: "Adam_1/lr/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam_1/iterations_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Assign_7_1"
  op: "Assign"
  input: "Adam_1/iterations_1"
  input: "Placeholder_7_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized_19_1"
  op: "IsVariableInitialized"
  input: "Adam_1/iterations_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/AssignAdd_1"
  op: "AssignAdd"
  input: "Adam_1/iterations_1"
  input: "training/Adam/AssignAdd/value_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam_1/iterations/read_1"
  op: "Identity"
  input: "Adam_1/iterations_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations_1"
      }
    }
  }
}
node {
  name: "training/Adam/Cast_1"
  op: "Cast"
  input: "Adam_1/iterations/read_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/Cast_1"
  input: "training/Adam/add/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1_1"
  op: "Pow"
  input: "Adam_1/beta_1/read_1"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1_1"
  op: "Sub"
  input: "training/Adam/sub_1/x_1"
  input: "training/Adam/Pow_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_2"
  op: "Pow"
  input: "Adam_1/beta_2/read_1"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub/x_1"
  input: "training/Adam/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "ClipByValue"
  input: "training/Adam/sub_23"
  input: "training/Adam/Const_16"
  input: "training/Adam/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/sub_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam_1/lr/read_1"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam_1/iterations/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam_1/iterations/Assign_1"
  op: "Assign"
  input: "Adam_1/iterations_1"
  input: "Adam_1/iterations/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "init_1_1"
  op: "NoOp"
  input: "^Adam_1/beta_1/Assign_1"
  input: "^Adam_1/beta_2/Assign_1"
  input: "^Adam_1/decay/Assign_1"
  input: "^Adam_1/iterations/Assign_1"
  input: "^Adam_1/lr/Assign_1"
  input: "^training/Adam/Variable/Assign_1"
  input: "^training/Adam/Variable_1/Assign_1"
  input: "^training/Adam/Variable_10/Assign_1"
  input: "^training/Adam/Variable_11/Assign_1"
  input: "^training/Adam/Variable_12/Assign_1"
  input: "^training/Adam/Variable_13/Assign_1"
  input: "^training/Adam/Variable_14/Assign_1"
  input: "^training/Adam/Variable_15/Assign_1"
  input: "^training/Adam/Variable_16/Assign_1"
  input: "^training/Adam/Variable_17/Assign_1"
  input: "^training/Adam/Variable_18/Assign_1"
  input: "^training/Adam/Variable_19/Assign_1"
  input: "^training/Adam/Variable_2/Assign_1"
  input: "^training/Adam/Variable_20/Assign_1"
  input: "^training/Adam/Variable_3/Assign_1"
  input: "^training/Adam/Variable_4/Assign_1"
  input: "^training/Adam/Variable_5/Assign_1"
  input: "^training/Adam/Variable_6/Assign_1"
  input: "^training/Adam/Variable_7/Assign_1"
  input: "^training/Adam/Variable_8/Assign_1"
  input: "^training/Adam/Variable_9/Assign_1"
}
node {
  name: "Placeholder_6_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Placeholder_5_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "Placeholder_4_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Placeholder_3_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Placeholder_2_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_1_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Placeholder_29"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul_1_1"
  op: "Mul"
  input: "output_1/weight_regularizer_1/mul/x_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "output_1/bias_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_18_1"
  op: "IsVariableInitialized"
  input: "output_1/bias_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_6_1"
  op: "Assign"
  input: "output_1/bias_1"
  input: "Placeholder_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output_1/bias/read_1"
  op: "Identity"
  input: "output_1/bias_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul_2"
  op: "Mul"
  input: "output_1/bias/read_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/Square_1"
  op: "Square"
  input: "output_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Sum_grad/Tile_1"
  input: "output_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Mul_2"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Sum_2"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/mul_1"
  op: "Mul"
  input: "output_1/weight_regularizer_1/mul/x_1"
  input: "output_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/Sum_1"
  op: "Sum"
  input: "output_1/weight_regularizer_1/mul_1"
  input: "output_1/weight_regularizer_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output_1/weight_regularizer_1/add_1"
  op: "Add"
  input: "output_1/weight_regularizer_1/add/x_1"
  input: "output_1/weight_regularizer_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output_1/bias/Assign_1"
  op: "Assign"
  input: "output_1/bias_1"
  input: "output_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output_1/weight_regularizer/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul_1_1"
  op: "Mul"
  input: "output_1/weight_regularizer/mul/x_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "output_1/kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_17_1"
  op: "IsVariableInitialized"
  input: "output_1/kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_5_1"
  op: "Assign"
  input: "output_1/kernel_1"
  input: "Placeholder_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output_1/kernel/read_1"
  op: "Identity"
  input: "output_1/kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul_2"
  op: "Mul"
  input: "output_1/kernel/read_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/Square_1"
  op: "Square"
  input: "output_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/output_1/weight_regularizer/Sum_grad/Tile_1"
  input: "output_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Mul_2"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Sum_2"
  input: "training/Adam/gradients/output_1/weight_regularizer/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "output_1/weight_regularizer/mul_1"
  op: "Mul"
  input: "output_1/weight_regularizer/mul/x_1"
  input: "output_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/weight_regularizer/Sum_1"
  op: "Sum"
  input: "output_1/weight_regularizer/mul_1"
  input: "output_1/weight_regularizer/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output_1/weight_regularizer/add_1"
  op: "Add"
  input: "output_1/weight_regularizer/add/x_1"
  input: "output_1/weight_regularizer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/random_uniform/max_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29070094
      }
    }
  }
}
node {
  name: "output_1/random_uniform/min_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29070094
      }
    }
  }
}
node {
  name: "output_1/random_uniform/sub_1"
  op: "Sub"
  input: "output_1/random_uniform/max_1"
  input: "output_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "output_1/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "output_1/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3412890
    }
  }
}
node {
  name: "output_1/random_uniform/mul_1"
  op: "Mul"
  input: "output_1/random_uniform/RandomUniform_1"
  input: "output_1/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/random_uniform_1"
  op: "Add"
  input: "output_1/random_uniform/mul_1"
  input: "output_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/kernel/Assign_1"
  op: "Assign"
  input: "output_1/kernel_1"
  input: "output_1/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul_1_1"
  op: "Mul"
  input: "dense_1_1/weight_regularizer_1/mul/x_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dense_1_1/bias_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_16_1"
  op: "IsVariableInitialized"
  input: "dense_1_1/bias_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_4_1"
  op: "Assign"
  input: "dense_1_1/bias_1"
  input: "Placeholder_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1_1/bias/read_1"
  op: "Identity"
  input: "dense_1_1/bias_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul_2"
  op: "Mul"
  input: "dense_1_1/bias/read_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/Square_1"
  op: "Square"
  input: "dense_1_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Sum_grad/Tile_1"
  input: "dense_1_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Mul_2"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Sum_2"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/mul_1"
  op: "Mul"
  input: "dense_1_1/weight_regularizer_1/mul/x_1"
  input: "dense_1_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/Sum_1"
  op: "Sum"
  input: "dense_1_1/weight_regularizer_1/mul_1"
  input: "dense_1_1/weight_regularizer_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer_1/add_1"
  op: "Add"
  input: "dense_1_1/weight_regularizer_1/add/x_1"
  input: "dense_1_1/weight_regularizer_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1_1/bias/Assign_1"
  op: "Assign"
  input: "dense_1_1/bias_1"
  input: "dense_1_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul_1_1"
  op: "Mul"
  input: "dense_1_1/weight_regularizer/mul/x_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dense_1_1/kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_15_1"
  op: "IsVariableInitialized"
  input: "dense_1_1/kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_3_1"
  op: "Assign"
  input: "dense_1_1/kernel_1"
  input: "Placeholder_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1_1/kernel/read_1"
  op: "Identity"
  input: "dense_1_1/kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul_2"
  op: "Mul"
  input: "dense_1_1/kernel/read_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/Square_1"
  op: "Square"
  input: "dense_1_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Sum_grad/Tile_1"
  input: "dense_1_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Mul_2"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Sum_2"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/mul_1"
  op: "Mul"
  input: "dense_1_1/weight_regularizer/mul/x_1"
  input: "dense_1_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/Sum_1"
  op: "Sum"
  input: "dense_1_1/weight_regularizer/mul_1"
  input: "dense_1_1/weight_regularizer/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1_1/weight_regularizer/add_1"
  op: "Add"
  input: "dense_1_1/weight_regularizer/add/x_1"
  input: "dense_1_1/weight_regularizer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/random_uniform/max_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.042874645
      }
    }
  }
}
node {
  name: "dense_1_1/random_uniform/min_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.042874645
      }
    }
  }
}
node {
  name: "dense_1_1/random_uniform/sub_1"
  op: "Sub"
  input: "dense_1_1/random_uniform/max_1"
  input: "dense_1_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1_1/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "dense_1_1/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4300401
    }
  }
}
node {
  name: "dense_1_1/random_uniform/mul_1"
  op: "Mul"
  input: "dense_1_1/random_uniform/RandomUniform_1"
  input: "dense_1_1/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/random_uniform_1"
  op: "Add"
  input: "dense_1_1/random_uniform/mul_1"
  input: "dense_1_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1_1/kernel/Assign_1"
  op: "Assign"
  input: "dense_1_1/kernel_1"
  input: "dense_1_1/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "flatten_1/stack/0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flatten_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten_1/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/transpose_1/perm_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/transpose_1_grad/InvertPermutation_1"
  op: "InvertPermutation"
  input: "lstm_1_1/transpose_1/perm_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/transpose_1_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/sub/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/range/delta_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/range/start_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/iteration_counter_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_5"
  op: "Enter"
  input: "lstm_1_1/while/iteration_counter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_5"
  op: "Merge"
  input: "lstm_1_1/while/Enter_5"
  input: "lstm_1_1/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/maximum_iterations_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Less/Enter_1"
  op: "Enter"
  input: "lstm_1_1/while/maximum_iterations_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Less_2"
  op: "Less"
  input: "lstm_1_1/while/Merge_5"
  input: "lstm_1_1/while/Less/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_1_1"
  op: "Enter"
  input: "lstm_1_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_1_1"
  op: "Merge"
  input: "lstm_1_1/while/Enter_1_1"
  input: "lstm_1_1/while/NextIteration_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/range/delta_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/range/start_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_8_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_7_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/add_7/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/mul_4/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_6_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_5_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/add_3/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/mul_1/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_4_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_3_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/add_1/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/transpose/perm_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/Tile_1/multiples_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/Tile/multiples_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/ExpandDims/dim_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1_1/Sum/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul_1_1"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer_1/mul/x_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "lstm_1_1/bias_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_14_1"
  op: "IsVariableInitialized"
  input: "lstm_1_1/bias_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_2_1"
  op: "Assign"
  input: "lstm_1_1/bias_1"
  input: "Placeholder_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/bias/read_1"
  op: "Identity"
  input: "lstm_1_1/bias_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul_2"
  op: "Mul"
  input: "lstm_1_1/bias/read_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_11_1"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read_1"
  input: "lstm_1_1/strided_slice_11/stack_3"
  input: "lstm_1_1/strided_slice_11/stack_1_1"
  input: "lstm_1_1/strided_slice_11/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_3/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_10_1"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read_1"
  input: "lstm_1_1/strided_slice_10/stack_3"
  input: "lstm_1_1/strided_slice_10/stack_1_1"
  input: "lstm_1_1/strided_slice_10/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_2/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_9_1"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read_1"
  input: "lstm_1_1/strided_slice_9/stack_3"
  input: "lstm_1_1/strided_slice_9/stack_1_1"
  input: "lstm_1_1/strided_slice_9/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_1/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_8_1"
  op: "StridedSlice"
  input: "lstm_1_1/bias/read_1"
  input: "lstm_1_1/strided_slice_8/stack_3"
  input: "lstm_1_1/strided_slice_8/stack_1_1"
  input: "lstm_1_1/strided_slice_8/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/Square_1"
  op: "Square"
  input: "lstm_1_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Sum_grad/Tile_1"
  input: "lstm_1_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/mul_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/mul_1"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer_1/mul/x_1"
  input: "lstm_1_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/Sum_1"
  op: "Sum"
  input: "lstm_1_1/weight_regularizer_1/mul_1"
  input: "lstm_1_1/weight_regularizer_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer_1/add_1"
  op: "Add"
  input: "lstm_1_1/weight_regularizer_1/add/x_1"
  input: "lstm_1_1/weight_regularizer_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/concat/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/concat_1"
  op: "ConcatV2"
  input: "lstm_1_1/Const_9"
  input: "lstm_1_1/Const_1_1"
  input: "lstm_1_1/Const_2_1"
  input: "lstm_1_1/concat/axis_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/bias/Assign_1"
  op: "Assign"
  input: "lstm_1_1/bias_1"
  input: "lstm_1_1/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_13_1"
  op: "IsVariableInitialized"
  input: "lstm_1_1/recurrent_kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_1_1"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel_1"
  input: "Placeholder_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel/read_1"
  op: "Identity"
  input: "lstm_1_1/recurrent_kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_7_1"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read_1"
  input: "lstm_1_1/strided_slice_7/stack_3"
  input: "lstm_1_1/strided_slice_7/stack_1_1"
  input: "lstm_1_1/strided_slice_7/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_7/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_6_1"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read_1"
  input: "lstm_1_1/strided_slice_6/stack_3"
  input: "lstm_1_1/strided_slice_6/stack_1_1"
  input: "lstm_1_1/strided_slice_6/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_6/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_5_1"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read_1"
  input: "lstm_1_1/strided_slice_5/stack_3"
  input: "lstm_1_1/strided_slice_5/stack_1_1"
  input: "lstm_1_1/strided_slice_5/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_5/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_4_1"
  op: "StridedSlice"
  input: "lstm_1_1/recurrent_kernel/read_1"
  input: "lstm_1_1/strided_slice_4/stack_3"
  input: "lstm_1_1/strided_slice_4/stack_1_1"
  input: "lstm_1_1/strided_slice_4/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_4/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "1\303\370\275\305\017\331\275c\316\373\274\301\360K=\364m\035\274\247Y\247\274J(\205=:|*\275\265\177\366\275\300\206\245\274\266_C\276\201\277\272\274v\342\250\275\201\300\351\275-\000r\275\231\310\\\275u\277\004=<8x\275Yv\017=\001\364\006>\363\367g>J~e\275\325\221\357=\220\200c=\013\267h\275\205\364E=\213$\276\275\324dD\275I\037\274=!\367\344\275\212\317\217\275\034&\3059\364\356\216\274\035\000\303\275j\001\327\275T\345{\274\230\221Q>\034\253\017>mV\211\275\364\256\330\275\265\330C=\310E\215\275\256\016\025=X7\333;M\035\301\275V\021e=\354\375\234\275|\005\223\275k\300\367\274\226!\002\276\nc6\275\345,A\275I\245\371\274\3616#\276\376N\003>\233\355\230\275\264\004\344;\256j\025<\257\357\235=\276\255`=Y\241\030\275\226\033a\274\001\362\202\273G\253\210=h\320=<\365y==@\277\226\274w(j=\320)\032>\325]\217<\275\033\305<\244\214\363=\031\3241;Z8Y>H\3253\275j\245.\275LV\022=\214\372\010\276\353\312p<\341\210\233<\315\3364\275p\226(=\022\273\217=l\361k\275\005\n\026\275\324E\355<o\000B\2735\2016\2747\334\260=\317\310\241<\031\216\265<\357\037\341<L\341\212>O\311J>\267\n>\275\377\346\240=*s\327\275\213\232\014=@\360~\275j\237\210;\362\014\213=\03171\275\3557\261\275=\257\262\275@Y >\255\347\206\275\022\227\310<\262c\361=\362\024\206=\301\331\320<\317\217\367\275\233{\242=\317\261\214=!\305\031\276\222\325/>B \361=\351\2638>\255\252\236\274\314\277\265\2756\340\356\275J\252\222=\n\313\372=\303h\325\275\366\203\213\275\013\244\205\275L\373\215=/:\033=\266\235\277\274p\r\364\275\304\241(=\013T[\275\363b\232=A\357Z\275\311\204\031>\tq\010=\246\243\203\275\313\031;\274\000\002\005>\000\260\340\274$RE\275\207\275\337\275\335\312\200\275]SE=\004M\003=\326\301)\275\036\356,\275\370P\334=U\313\010\276\0375\037\275j\2221<\3077\n\2758\r\263=\002D3>Ou\241=\020\255t\275\235*\004>\276Ya;\351\252\255=\326/\007\274S\022\213<\377\363G\275w\021T=\247\211\007>S\023\271=\024\310v<.\312L>\331K\200<\323\037\240=\374\321\255\275Mr\360\275.\013\177=\225\253\373<\266\377\220\274\206\212\231\274Y\321\033=N\3525=y\366\357=\245P\365=\375&\037>\322\373E\275\023\264\342<\035z\263=r~\036\276q\3562\275j)I>\230\272\362=\332\rE=\232\266G\274\016T\037\275\204M\326\274n\'\333:\335zX>\212\310)=\003\030\366=;\251\204<\331\374\316=\020\340x<f\003\227=\001^\360=\273\336\361<\211\2756;\2776\363=\370\334B\276\330d\214=\221\020B>\307Xn<\275\352\016\275(\274\004>\364>\213<\211\020<\273\226\267\347=\362\337{<\007\224\244\274\016\212*\273\231`\250\275\257\266Q\274\004\3409=Y\267\022\276\373{{=\224\ts=\232\214\037\276\316\312L\275\200\005\021\276\376\241\312\273W6\326=\323b\206\275\003 \306=\314\311\'\275Uh\032\274\031>\t\276@@\203=9:\005=\023k\202\273I\325\010<f\2424=\221\334\004=5B\007\276\216\354\231<\341\213\260<@\302\323\275\233X\222<?\374N=\016G\376=\322K\032>\304\217\010>\327\333\t\275He\203=y{\275\275J\n\371\273\257\334{=\037\314\340=\243R\231\275\nk\216=\007\211\037\276Z\256\022\276\322\267\023\276\234x\000=N\035\203\275\014@D\275\370;\200=0\323\236\275r\027\212\275\251\203Y=\237\200\332=:\006\021>\357\213\377<\246\200\024\276VK\310=\246\246\222\274\204\216+=,Uj\272\007\203\316\275A\367y\274u\306\354\275\237E\024\276?i1\276\241\327\231<\332\206\032=\265Y(\2768\024\337\275\226\235\310\275\214\367\241\275a\326\000>\006=\346=5\362>\275\321^\022\275\267<b\274W\313\301=\356?\356\273e\267}\275\203\215\006\276\036\034\311\273q\027\014\276av\360\273\321u]\275X*\261=\204\336\223\275\217\346>\276O\246\010\275\023\216\n\276w\177\231=\232`\006>\246!T<Mk`\276\377\363\316=\030\003$\275\223\227\242=\222A#\276\220\244\233\273\276\014\007\274\031q\020\276\201\235;=S[Y\275#\376\231\275A\255\344<\032\024\021\274\270\307\254\275\376k\260\274\343<\n\275\342\372\t=\337\'Z\275:\032\272\275e\334\226\275\004\n\272\274\031\266\266=^)\273\273\244)\265\274d\3450\275\313q\303\274p`\215=\221\313a\274\342U\345<+\216\327\275\225\353\223\275\305Q4\275&\236\014>H\265\242\275\320;\034;\260\236\211\275\206\206\312=\342\222\024>.\320\245=qj\024\276\026\303\003\2761|\205\275\367\202\367\275\243\034\017=`\332Y\275\346\360\267\275\265\274\240\274\031\343,\273a\336\020>$,\214:s>\227=E\023?=\035|f=R\356\013>\342\203\201\275~\332\\\276a31>\200\307-\275\372\374\371\275\027/5\275\211\304\263\274l\016R=\343\236.\276\360\036\022>r\317\021<\241\324\350;\306\254!\276\210\270\266=b\324\333=\1775\366\273\365\355\265=\036\314\235\275:c\311<\244\265\323\273\026\2016\273\207\032\233\275\275Ip=\344N(<{Jr\275\031/\301=\010MK=\333\\\277=\025\202.>\367\203\356=\232W,<\363w\206<\300e\325\275\270\017V=\365f2;\375\225U\273\231!G\275\333-/>\352\324\304\275\237\341\'=\236\260\200\275 \004\301\274(+\255\275NU\221\275\322\021<=\261\214\251\275P\362\235=\035]\003\276\24630\276W5G=\2615\256=#E\003\276:(\253<\0134/=`N*>\336\030\332;\250\257U\275\014\332C>\377I\000\275\034\365\331\275Kf\256=\336\240\277=bS\201=5A\031\275\234#\273\275\255\235\353\274u\223\306<\213k\360=\322\n\366\275\342\331:\275A\024\264<t$A\275gg\223\275\335;K=\313\210\277\275p\365\351=\346Z\031=\004o\274\272C\017;:,KH\275\360\034-=\017\235\'\275\016\2469=r\2417>^2\226\275b\320\307=x1\211<I\220S\276\316\227\256\275 \267\310=I\3461\276c\tG\275\316L\307<\203\343\267\275\264\033\221\275\214\\\355=\241\335\356=\016dM=\213\302\n=\236\336-\276>,\213<1\300\317\272\336\322\223=\245\234\263=\374v\232\2737\213%\275$t\263\275\370k\235=S\371^7e\t\247\274N\024\234\275.\024j\274\343T\254>\204@\376<8\307\261=rP\275=\020 \266=\364L\206\275\005NE=[R\313\275\222\320\316=\207&X\274\233\262\227\274\352\222\033<r\264\241\275\305\371\271<\214k\372\274\374W\000>\260o\242\275\263W\327;N\010\324:V=\225=\273\030\242=\340\343\326\274\035\273\017=\002A\303<\204\357p\275$\304;\275|F\312=&\203\350:vl3\2754\002d\275=2\205=87->\035\027j\275\234K=\276\016\261\336=pG\007:\204\227\364\273\003\247\262<\334\320\306=Y\262\210\275KQ\377=\210\337\364\275\374\350\251<\240\212\255\275xW\310<\321\351X>t$=<l^\207<\270\213\233\275e\273\361\275%\341\331;\341\273\346\274\222^a=sq\252<\276\034\243=E\0130\275\006o\345\2746\334\234=G\034+:/=F\275\375\325\265=}cC\276X\270\257\274\325\345\271\275\026\3468>\260zc;\225&\001\274\206Xh=\030-\225\275\200{\340\275\355\320/<\217=\366=\332\177a=\032\024\240\274+\036\006\276w\245\374;\335Hv\275\312\312\364\274e\225M=\017\'\207=\025\365\023\276\204\210\317\274G\005\336<\376\250L\275!\201\312;g\342\205;\221D\022\275-j\310\275\356\034\260\272\2255\323\274i\325\351<\026\352\204\274a#\016>\245\017\271\275\331\244\334\275\322\034\271\275\207\n\204=S+\340<\"\0175=D\375Y\275\342Kn\275\033z\262<{\323->)\377\327\275\025#\000\2761l\n=,v&=\213\341\344\275\275? =\362\204\263\274-s;<\020\236C\275\037Rf\272\3409\272\275\271\362I;7\252\327=$\037\355=\023\370\237=\331,\301\273\241\350\r>3\361\341\275q\006\262=`\341-\275\210+)=\351\250\213\275\312\035\355\275&\2058=\006\006\212\274\036\344\030\276\373\273b\275\346\363+\2761\364\273=p\264\317\275\013;\210\275\215C0=\341\006\"=7\353\327=\275\364f\276s\353\277\275|r\023\276\205\217\261\274\343e\t>\363\324\253\272\207\355=\275{\2746=g\374\276<\020b\">\340h\226\275\344J%==\372\316=\303\2274\276\224\2653;\311\021A>\315\376\331=\376[\362=V\363O;\243]\265<\261\301&>C$\277=(A\026\276\017<)=\253\213(\275\245`\000\273\265\316\345=\370\032\225<gIA=\3741\000>~sv\275z\272I>eQ\360\275\272\\\376\274\010 \343\275\217\277N=S\216\004\276vk\251\275\372l\205\275lf\005\276\345\255U\275\334\340\007=]l}\274\201Q\002=f\211\315=\334\002\237\275\024Y\343\275\220\300\302\275\212\014\364<\331w\036\275n/\'=L\361\210\275\334\005O\274c>\261\275He\006;\220\013\226:)\311\307=tLc\2759\263\203<7w->\371\266\316\274\306l\037>\302/\372=\227c\013\276d@\250<\243I,\276\353]\252\275\214\273r\275\232\0225\275;\266\307=\203D\022>\353B\303<kle<\262.\025\2766\360\263\275\277]N=\307\276\313=\207\007\322=+\n\021\276.\330\320\275,\177e\273\322=\022\275\221\332R\275\350s\037>\303\0276\276\202\304B=\365\332N\273\234\361\213=\340>\357\275\300\024\245=\020X\217\275M\2357<g\340<\2761\\\371=z\331\316\274\304\325\327\274\233\223\364<\021bE=\374\272N=\255B\343\273-\272i=4QL=\257\376\341\275\'\254C=uK\212\275\300\267\203\272\370\032U\276\230\354]\275\3328\272:\021<\341=\210\336l=#\'\303=o4@<\234\377\320\275\335\0054\275\251\303\270\275\274\316\237\275\r\022\235=YU\236={\2429=4\275\214<5\314\004<.\235(=\230]I=\356O\225=\255\270\017\275\273\232T<\013\355\366=j\2771>\36377>\361\374\267=\t\363\324=\214\2031=\314\265l=\026\005\001\275\323\\\023<\244\236\361\274\327<\037>3R\023\275\'C\"\276\027\352\035\275\246\022\024\276\375\n\244=\271C\271\275\262\231d\273\373\000\227\275\377G\'\275\216\356R\275\332\030\030\276\'~\332=,x\264\274MF\020\276\317\0024>\271\235F\274\307\243\251\274R\371\274=\241&\274\275\r\311\007\275\372\340\007=\344\300\034\275/\312\033>\340|i\275J\360T>7\326\223=\210\001\035\275\"\027I<\021\3411\276_(0\275\314\345\244=\260\350,;\'\265\000<\026\335\004\276\356\245\360\275X\376\200\275p\004[\273\305\t\007> \314\245\275\307{\031=\234h\r\275\233^c<\025\351\312\275\025\342\355<\245\251\304\275\271\324\001\276n\202&\275y\261?=\\}`\275%~\343\275#OZ\275Q^%=\017\271@> \346\016\275\321_\232\2744\301H<f\t%=\001_\264=\210\335\243=Y\370\324=S\235\245\273\026\000\205<Ul\257\274\341\243\025>m\177\031\275K\331\252\275\004\361\000\276\034\321\023\275sv\006\274\232\213\302\275i\331\333<\323O\246\275b\013\266\275\007\233\2269\274\335\263<h\036\026\275\256\304\360\2758\023\346<#\214\034>\371%\366\275\314\307k<\267\027\223=\234\246\230\2756\352\252\275\"L\315\275\"<\243\274\344\177?\273y\246`=\332\316f\275J\307a\275\002\340\227=\035\271\350;\031>\361=\271\221g\275\273z!\276\365\264;>B\356\001\276\000\342P\276)\242-\275\260\257\001\275\004\257\273=t\262#>\256\3119>r\272\331\275`\273\247=\207\247\252=\\bl>o\233\321\274i\357\273\274\226\032\335\275C\222\233\275,H\007\276\363\342\207\275\354\353\035\276\244\300b>!\272\r\275\330\tT=\245>@=\256\347\323\273h\246P\274\2407\327\275\361b\345<\370\221\377\274\321O\t=7O^\275\272\021s\274\222\334\'>\262\276\321<\244\321\023\276l\357z\275\214\310\'\276\342\316\332;\\\263\232<\301\377\035=0\314\217\273m\252|\275\244\252\376:\266\342U\275s\3707=\325\317\006\274\244\016\255\273\230V \275\363\334X< Cv<\340\302\327=\234\265\006\2746\365F\274Gr\010\276\261\256\254=\r\324z=\306\226\225=&\021Y\275=\013\323=f\235\033>\226\375\236=3J\016\276\203k\303=\027/U\275F\0326\276\364\021\346=\342\204&\274\330\222\036\275\316]o\275A\244\202<\367t\301=\032s\373\275~\255\317=c`\'>t\330\337<G\023F\276\261p\247=\020\372\033=\220\034\253=jC\266=\236\2005=\203\220\257\275\252v\017<\374\270M\275\370\201?\275\231\226\263=z|\232=\\Y\345\274\334\302\343;Q\006\272=\203z\227\275\366[*>\343G\330\274\025\007\374<\250\367\331\275\270\261\252\274\230U;\274M\240d=v\270\202=_^\004\275\360\341\350\274\321\365\271=\250\251\251<=Y\255<\223\210\017=\231\2259\2751\202\220\275&\003\237\275\305\274F=\005\340\243=\241\251\232\275\345\020\231\275r\014\370<\274\313\026\275w\331==\t\306\023=\277\267\236=\321\256\000=\2132\204=\331o\362\275c\242\231<\315\347\000>f\276\213>\177\025A\275\306\016\331<\2732\002>;A9\275:\360\212\275\250\316\303\275\'\013(=8\3041>\320\217y\275L\356\000\276=\005\013=\274\220\007>7\315\027\274\226V\213\275\027\t\224=\352\357\217\274\255\221\272\272\351J\372\273\303\230)\274LH\356=\277\347\251=T\300\016>;\024q\275\005\375\317=69\250\275 \310Q\275\205\304U\276`\366\356\273\227w\254<\037\211\023<Y\247a\275\363\317u\275\017E\263\275\366W2\275S\313\205>W%\007>\231k\014\275$\334\207=\307\350\253=\224\377X<\214\223n\275\371\022!>\027s\312=\355[!>\300\336\261\275\270\236\207=\244!\021\275\211<$>|>\331=7d\021\276\224\213\223<\302\010G\275\301\n\n=\335>\231\273Y\376f\275\010K\326\274\002\023\243<\325W\326\274-\312q\274\242\261\226<\341\311\017>\202\247\332\274\020\317\343\273+\276\234=\372\373\323\275]\357\203=\277a\254=U\361\010\275\356\314\017\275\334\030K\274\262W\251=Po\371\275\005\032\\\275\301\237v\275N\nD\275\350\004\324=\362A\204<\343%f=D\025i<\265\205\246=\024\233F=@o\253\275m\t\007=N\r\024\276\215\305\337;\025\t6=Y\353;>\311\023\004==\265`=\271\357<>\360\221#=\223\335\256\275\256\247\311\275\350\3319\275\223\201\261<\343\222\325=\206\246\246\275\025\270\271<\236u\216=@3\020\273\0236\225=TI\341<\320\223G<\250\'\305<\307a\332<!\231\362\275Av&>\270U\n>j\361\203:C%\256<\326\" >\261(V\275n\323\241=\t<\354=\022 \331<Q\373\364<\216\2261\275\243\301!\276!\211+>\206\327\240\274\t\002f\275\313\255\331=\272\0375>s\2052\275\221\n\301\275N\213\016>\332l\322\273\341\205\216\274sy\t\274W\025\003\275\317\232\220=\252\335h\274\341\341%\276\017hn\275\343 \320\274b\302\016>\017N\223<\260p\022=\224\371H\274\000\247&\274\313\302\266\275&/\345=1[\322\273\213O\r\276\321,o>\\\252\036>@\305$<F\345\243=\265\010\005>n\337\245\275a\310\266\275\202\217&\276\330\334!>\261!\231\2752pR<?\366\254=\221\351\034\274\264<\310=\026\007\305\2753Uj=\266\2761=\024\333E\273\214\320\317=\342\'G\2730\270\032\276h\210\312\274\250\265\n=M\335\263\275\206\363\216<\013+<={\010\373\275\007\373\035\275\250\2575<\324\236\013\276\243\274\265\275XF\253\275\030\226\326=\215\322\277=\244\226\316=\314\025\220=Jg\t\276\305\002\272=\311P\000\276\370\234\025\273\252b<=\335\231\211=T8\222\275}`\310\274L\202\251=\313\333\357=>\371\376=\330;C\275\313\240\241<-\006\r\276\003\242\223\276xi|\275\365\225V\274on \273\371\225\205\275\361\350};LK\006\275\324\374\236=q\350V=\034\326\275=\n\204\217<;8\023\276f_|\274\305\276i\2758_\317=\315v\017\275\225\376\314\275a\210j\275\364\001/>\334\002\346\275\246U:\274Zf\360=\276?B=\306%\267<\307\375\370\275q\263\346=//\207\2752m\033\275\256\206+\275\177d\356\275j{\212\275]WR=\324\'\201<\357\265\201=\301\251\245\273\211\244;>\016\306l\275\353\263%=x\374\226=v\355\356\275\327\306\257=b\013O=\0301\022>\035\227\315\274\003#g<T-~<\361\254P=\333\300\220=\002\232\270=\215hd\275\2646.=\2626\222\274\207\241=\276\371\267\r=\033\331\203=\336\2569<w\227l\275\014\313\312\274\023\232\323\275\3069\222\275D\376)>\021\005\204\275\005um=X\343`=\234PC\276]\254\226=\016\213\220\275}\233v\274y\362\346\275\336J9=Q\354q\275af\264\275j\016P=H\316O=H\327Z\275\375\365\376=f\010\341\274\257\367\367=0\014\357=\234f\213\275\325#\307<\366\261\322<\235\265\016=\336\003 \276g\024<\275\221x\023>\031o,=\362<c\273\374\001\215\275\210o\020=b\307i\275\2119!\275AA\013\2763\037\227\275\361\273\344\274:\341]\274l\200@\275\2058\204>6\t\277=J\272\025\276\345(\372\2753{\316=f\266\277\274*\357\023\276\200\245;\275\031\316\271\275\253\302\234\274\362P\260\275\302w\357\275\016l2=o\256a;\274\216\310\275\265\372\016>\004\004\332<\024(d\275&\370\222\275\234<\330\274\025S\232\275\343\017\306\274\'\247 \276GA\340=\007Zl\275\235\356}\274\255\274\005=?\023\321=\032)\321\272\225s$\274R\256\317\274\023Mr=\3263\034\2760\340A\275\237\270\265\275K\253\212=zn\206=2\333\261=7\220V<^\263\023\274\374\271m=\000\026\342=\303q\027>\247\016\220=\027\336\027\276\014\370\232\275l\374\023=\232\235\202\275_\245\036\275sK\372=\273(\213\275\037\030%>1Y\004\276\021ox=\340+9\274\317\213\002\276/\0246\2758D\312=\205\363\204\275\301k\214=(\364\302;\237L\004=\3419\242=s\2504\275\017M\207\275\227u\262\275\315\353U\275\253\343\277\275\326\355\243\275{\270\363\275T\331\247=\322\007\235\275FB\003\274^\372\215\275eQ\211<\335\242<=\253ub=\216d\202=\313^\266<\377\355\206=(\374\326\274T\201\023\276\312\331\300=x\305\'=\0030\322\275\362\032\250==\250O>\001#\353\272\213\250\342\273\231\301\035>8\351\352\271\200\223\365\274\253\316\030\276\262)\245\274I\005\220<\035\340\377\275\254\323\343\275<\214\273\272\220+x\2755J\333=\235D\025\276\316\037\254<\357\351\203\274mph=\301\000\205;\212\201\t\275:\227\217=(\t\332\275\002\373\264\275\r\304@\274\365r9\275\3424\276\275\2007\255=\356\245h\275u\356;>\317\311\032>\275\260\356=\345S\021\276fO\t\276\2107t=o\300\304\2747\314\300\275\237\332\250\274G^\360=\245\200;\276\370\220\215<\034z\"\276\357\rP\275\213o\236=\367\263\t\276\000\254\232=\021\263e=+2\203=\031q\200<\316\030P\273\270>[\274[Y\002\276\255\327\347\274\350\372}\274\212.P\276U\342\023\275\305-0=T\020\217\274\201\234\222=~\232\323=\200:\352:\311b\363=\241{\307\275\336\017\177\275\2148>>\247*\020\276C+\210=%\321}\274\351L#>\313\225r=h\241H<P\376\225=\367g\317\275\035\264\243\275\033d\246\275\025\345\347\275\367\212o>\006\0003\274\206\357\241\275x\336\335\274}\214\'=\245%T\275\266\261\307<\035\377\244=\005\206\030\2764:H=v1\000>\374\237\215\275\001\276\262=\223\246\335\273\303zC\275\030\253\364=\307\306\367=\375\200Y\275\2339{=\237\017\001>D\033\254=\332\030\347\274U\241\006>h\311\252\275??)<ud\345\275\\\265\r\275+\330\255=/\327\022>\372=Q\2759\334\310=h\010\'\275M\021\261\275\r\022\t\276<\204\271\274 \020\230=bK\234=\025\233\030;f\203\303\273Q)H=\'F\264\274\341\250a=A\216\235\275\331\374>=Y+\010\2738\265\005\276\035\373_<r\342\303\275\3456\335\275\266\031F\275\000\377\207=NC\323=E\264G\276\256\233\'\274\300\312\360\274\224\322\217\275m!+\275\233\037\337=\ty\222\276\342\245\374\275\260\250\201=\031%8< `\237\274a\346X\275\252z\030\274\367\354\203=\t\244f=\301]\271<\237\025\217\275b\356\231=\236\246T<\027}\276\274c\344{=\301\224S=y9\227\275>k\377=\365\025\355\274\021\335\367\275\266\266\010<\273`\225=v\t\013\275}Pr\275\304\374h\276\363\'\327\274\347Py=\022\231\277=\000\r\301\275H\177\211<\211\365\351<*\237\260<\002_a\275\301bD\275\370\304\237\275\245\260\325\275Ju\016\276\217\025\373\275\016\310z=\245K\000\275\253\034\213=_\002\262=\342\373\022\276\212\232,=~\367\242=\264\220\261<\255\032\244\275D\2143\275\354\232 \276i4s>\370\355\022\274/\276\022=\253\257\240<\005\345\013>\203\337\332=^\335+=\025\2072<\220\371L\275\020\365\217=\337\312\312=\344V\303\275\272\030\000\276\005\245\222\275\033\261\007\275^\036\n\275\014\2751>\'\345\312\273#;R=bF\204\275\0138\226\272!U\227<j|\324\274\364\336\220\275q\212\234<,a\014\275\r\256s\274\274\320\370==\r\232=]J\214\275x(\036\276C#L=\350\254\026<\252[\221\274\267!G>\357\032\010>\356\322\021\276\220\036\244=\355\270\003;\237\205\035>A\235#\276\0252<\276\301\020\324\274}\323\220<\024\226\006>\236\246\002=v\000\200\275Qt\352\273\347a\220=\312\'\002\276\305 (\273\275!\363\274\210,\206=\345\0330>\217\305W\274\025_3=\251\234\243=\r\'\032\275^w%\276\205\230\026=t\037\345\274\366\330\321\275]\277)\276[\216\031>\311F\253\274\275\\(=\025\326\246;tJD\275w\233\212=\243\263e\275udF\276\333\334\256=\365\300X\275\304\346\247\274\320\244\031=\255\n\325\275\360\310\">\320\246\r\274\n\243\317=}-\311\275\350\007\003=f\025\242\275:.\253\275\241\326\021\275\014\371\356\275\255\353\003>\332\027\027\275$\265\205=O\364I\275\246\316\031=T\327\\=\264\" >\375\204O=p\355\346\275\367\356\305=9\267\372\273*\252\234=\251G\257=\035ZW\276Y\010\204=\252\274\232=\365mz=\365s\230\275\373\003\360=\307\364\026\275u\t*\2761\271\014>I\376\362\275\251\303\261<g1I\275\"\203\013\276\371\031\031>\024OL=jx\227<N\212)\2731\342?=\215=\212\275,\232U\274\226\341\215\274\237T\027\275\001\262\344=\003\250\204\274Kn\322:\225^\313;^A\207=\005\014\006\274\360,\306\274d1\023\273\033\201\206\273\\\320\252\275Z-\252<\236\322\207\274\315\311\316\275`\364\323\275\331gC=O\377\314\274\237\237\032=\204\254\205\275\203\274\230\275\376\257\221=\346\241\225\275\306\275\001\276\237/\000\276^~#\276\016A\003\276y\246I\275Vm\'>\213\374R\275/J\006=\r\313\325<\232G~=\021\354]\274\374\247\033\276\371\271\321<\005\006\316=\234\352\324\275\230\310`\274\350\260\">,V\305\275)\251k\275#\305-\275|\224\253\27533[\274\367\030O\276\376\nh\275\336\203\260=\205\366\001\276(\224\342<\373o\022>\016\214\364\275 .\"\2763\217\227=\255\266\004>s\321V\275>\333=\2762f\276\274\344\336\263\275d\016C<t\320\336\275\305w)=\242s\367\274\226\342\200\275=\305\372\275\256h\026\276\210S\034=\303E\234\274=\350\366\275\003:4\276!\216\237\2753#\262\275\250\374.\273\367l\'\275\3231\361\273\021\000\343<\202\304v\275\332\212^=NN\000=\177\237O=\266\177\322\275f\332\n>\277\002\270\273\255N\210<\215\355\231\275\034\233\306\275\336L\233=\025\000\002=\0375^=\323\201w\274\215\023\031>\004\003\211=\231g\024\276,\320\224\272\034z\n\274V\377}=\207\002\023\276\305\357R\275\022a\354;\304\3256\272\221\324\250=\244*\365\275\026\032\005\276\241\230\020>\362\272\306\274\314(\257<\'93\275~\234\206;7m)>Nu\345\274\254w+\276\335+w>\242\257 \275\2744\334\275\340\367\303<\000\203h\275\277\367\302=\321\000\361<o\223\203\275\233h\010\275\310T&\275N\340\022=\200\322\273\275\023t5\275.mG\275\363N\226=\353O\373<\355\002\262\275s\211V\275\235\3753\276F\325?<\232!0=y]\276=\250\313\r>83\326\273-\201d=\320\372w8\340\321\237\274\226\026+\275\360\272\344<\256\201\213;\270\301\024\276\256\245\330<R\232\033<r\321\363=l.\005\276\213\230\250\274\204!\266=\240\216\346\274\271\356\254=\000\210\267\275\251;I=]m\"=\374\232\345=\255\354\242=\336 \212\275\260=+\276\372.(=\324\221^>\361v6\275\332\373\372\275A\376\023>\177\013\215=\005\222\304\2752\033d\276\355\327f=\350\260];V\016\316\274OH\010\276\265\310\345=\334\252\252\275\215\rm\275\317G$>5\334\261\275\203\344s<*\231!\274\355\343\005=\365\"\304={\333\017=[x\t=7!\200\274\257\325\233<\272\001\222=G:h=\2364S=\373\314\232\2758\217\377<!\211;\275\217\321}\276\227\251\372=K\331X=%\0076=\213kq=\355\241m\275vpU>\357+n=0\200o=\016\337\241<\030\303\207=\0036,;\023\323\371<\3555T=\350\257\007=\210P\213\274q\003\371<\234u\276\275\0062Z\274\201:\375=I\323v=\305\242\232=\021\250)>\004J\230\275\021\243\325\275Ii\001=\222\356a\2739G|=v\242\371\274\243\210\342\275+66\275\3357\374=t\031T>u\302-=\234^i=\007+\262\274\242\246\024\275\362>\247=\0172\033\276\373\rM\275\223\334\245<\014U\023\276\234B1=\000\017\">o\372D<\211\017R=\262\363@\275\tv.<Y\326\366\275%\310\026>e\004\351\275\261\2612\275\313\031\250\275t\263B= _\"\275\033+\235\275k\246\013\276\231\317\305\273@\000(\275\307\250\321\275HM\\=\345\244\023\275\264l0\275\036\353v<\263\252\354=\327,\324;\217?\253=\363\346\003\276\3126\276=GK\221\273\314\355\001<\211\310z>p7\273<!A\234\274\'\017\314\274\232\n \275\003F\246=5\'\312\274<\251:<\236\302\313\275j\341 =\200\2060=\266\360B;_\332I\275E5]<#\315\313\266\006\203\001=l\205\264=\250\305L\275d\235\276=\324\002\333\274{U\214=\313Y`\275\230\340H>\031\232\t=\312X>\276\020\361\000>\006o!\276\336\271\'\275\275\030\353=ks0>jD.\276\032\203\014<\2256\000=\337P\236=+\306\266\274\257j!\276\0232(>\232~\205=\014#\024=\203\275\301\275\007\'\376\274f\325\220=\230_\241\275r\350[=\374\326u\275\234\334^>\320)\207\274\\\251\013\275t\253\354\275\026\215\227\275\2408\243<x\317n=\220\023!=\342\346\302=\343\204\214<h\260\034=\005/\210\275\210\243U==1\020>K\237\222\275\236Q\363<\310\021\361=\017\352\226\275\357\221\005>xn\207=@\313Y=\301%\322=\"\300l=\224\202\223=\240jt\275\017\315f\275\004\222\330\275\0108\017>x\334j\274\234TY\274n\313\t\275\031\203\020\275\224\275\031>^\373*>\010\000H\275\to\223<\263\254\246; \260\370\275\236s%=\365|\025>\311wz\274\357\"1\276r\3307=\205\034\024;\013*\305\274\000V\247\274y\276\231=7S\036=#q\323=\356[>\275\241n\217\275#\205\314=\333\275F\275A\017h\275\271\001^\275_t\"\275\033\204\343\275\204\361T>p\300\307=uj\000=\356\251\207=\302\244\326=\323)?>Bqv=\360B\277<\360\215c<x\335\222\275\343Q\005\275\207-\253<\246\\S\275\324\221\362:B\377\036>J<\035\275\276\263\t\276\274\022\370\275\027D\362\275\325xv\275c<\247=+\224\302=\204\372&\272P#D=tP\007>q@\002\275\030\333Z=DB\005\275\367<T\276\334>\205\275\330%\360\274\346\024\270;\232\335s\275$\307\252\272\rQ\275=%\010\030\2741\205\320=\035r\357\275\207\010?\274@B\245\275Kj)\274\265\322\333<\214W\260=\370\033\243\274T\006\326\273I\007\247=Mq\272\274\010%\350=\326if\275\373E2>\031&?\275\010\343f\275,\365\026\275M6\007\275\010\264\276=:\363\321<\000\324|\275\231%`=\271\274\273<\3470\000>5\355F>o#\361<\374g\207=\254\247\036>`\367\314;6\357\341\273\035m\305=t\377\277\275,\266\372=\316\316\363=\032\313\363\275!h\254\275\373\300==\260H\004>o\\\\>\027O3>\220\347\240\275\366\227\207=\331\274\240=\327\006\226\275\027>1=\027\374\221\275\000\t\256\275\355\0057\276i\2211=\213\352C=\314\362\'\275Fs\220=\256f\246=\370\3543\276N\026\243=\367\266\014=\306T\306\275\007\220\332\274\003\016\375\275\217!\223<mE\250\275\n\325s=0\342*\275\305\177\t\275\014\326\323<\247\363[<\336\\\241\275\276K\243\275\346\244\013\275\321\361\342\275\341\3656\276\322\203\236\275\335\275h=\250h\341=\272\216r\275\225R\262\275gwx<\370\272\341<\321\016\177=\254fm\275)\243\201<\320i\345\274;CZ<*\200\343\275=\236y;8B1\276\236\365\253\274PV&=/\034\317=\377)y=2z\225\275\016\330\255=BXY>\246\255w=\001c\323\275(\373\273=\361:\t\275\260\333\005\275D\321\344=\225\340g=\300G\243=\271\260\325\275\247\363\365\274\001d\262;\207!\205\275z\240\001=hr<=\257-\224\273U\265\022\275\344\366J\276\326\212\013=\254\272\020>r\022\267\273\343\356a>P\252\001\276\372\344\014>\262\327\236\275AE\007\275\243\347?<\"\321 >\207\\]\274_\"+=\3168\311=\377\275\n=\033\033\030;\017\307<=5\355\214=a\3758\274\236\317\201\275k+u=55\022\276\317\336\216\275`\3648\275|3+=Nh1\275\267\310[<b\216\036\275V\376\332<\004H\332\275\006\366i\275\201<\006\274\244\361\254=3\332\217=\272\260}<o\231B\276\2236[=\256\232\260\273\177\0104=\216\203@=zsf\275\213\373\030=F\026\351=\357\007\252=\351\227J\274\376\363\231\274-bM=\023@\323<\237\300\324<l\214*=,R\251\275\264\326\037\276cF\374\274\014\222\221=\231y\365\270\"7\312=!\017c\276^\203\241\274\274\324\241\272O\375\211\275\023z\260\274V\207\301=+x\256=7\316\347\275\010H\032\275}\320\006=mJ\020=\240+\205\276s\245\004>\032\276\237=\320\216\036\273,%\221\274m\236\242=D\273\213=nx)\275\345j\214\274\365,R>\355\227\322=\232I_\275B<\356\275\366\2650\275au\241\274\370\202t\275p\200W\275Y\262 =\006\320\355=\325\323\023\274\355SJ>\007pT<\357\007\344\274h\264\002>\274g\006\2757-\220<WV\265\275\340\216\252\275\364x\016>Hp\201\275\341tE=\371\nx=\253\203\257=f\375\352\274\266\351\324\275\351H\224<\256\345\335<\351&]\275\031Z\230=3\0227\275\350\013m=|`\304\274\356\232\013>\013\032\273\272h\370\356<B\377\314\272c\341\000\276\013b)\2747H\261\275Z\341\310\275c\364\361\272\240\271\033\275\377\213\207=io\231\275\257\254\344<%\346\252\275\375\027\211\276\3302\210<u\272\333=C\200\262\275V\001\013>r\262\202=:\226\335\275c~(<\3147M\275|\316[\272\257x\336\274B\216\260=-\274\010\276\247{q\276\356\342\246\275\321$[\275wb\324=\207\371\200\273\022s\246=_Rd\274\0221\273<\367\362\233=u^%\275\341\201\037>M4\262\274Z\203!=3\213\244\274\034\026\002=Y\247\230=o\302\004\276\220\323C>N?\346=\325\302\206\275\232\304\025\275\307\336\005=\036\363\035>*\032\363\274\0363\236\275\247\364\345<\020gQ=\367\322p\275\213<\200\275\033\321\265=\347\325\000\273Vz|=Iv\034>.$\341=\276\016\225\275M\356\335\275\257\034\266\275\242Ir\275+\025\027\276Mi\030\276\313\342\234\274]\213\210\275oL6\276l\300\263=.O\001\276<\202\t\275\273g >\263\332\270=|z\315=\203\231m>\354\027\203\275>\352N=\352\n\'>\270\235\246=cf\270\275\014\235\276=\300\330\003>a\244\251=Q`\024=G)\326\275\354\325\236=$\341\257=_\025\222=\226\306\030=c/\356<\344\361g\2750?*\276\2718\026\276\203\022\342=]>\016<\360\253\236\273A\036\342=\201~\217=y{?=()\240:1\330\t\276yk\005\275\337\244\275\275\214\263\306\274\344\240\244\274b\007\354<\231(\006>n)A\275\037Y\001\275}\254M=\326&\225=\364N\206\275\214R\353\275`\312}\275W\030\304\275\206\352f\275\352\225\201\275\221at\275A\306\370=\221z5\275\234l\001\275D\010\335=\240H\264\275\277\3764\2745\034(\276\024Vg<\211+\313=\223\373\007>\277\205g=\341AL\276\334fO\275U\317\276\275\r\273\274=\000\307\267\275\023\372U;S\203a>\270sX=\026\243\313\275j\252\211=\316i\005\276.\344\367\275\264\252\'<O!\005>?\256\323;\325\240\215\275\247\247\210=\023D3<\350;\r=n/\332=y\\\345=U\3308=\227\367\240\274\201|-=\336!%\271s\255\025\276\210\370\322\275\304U\354\274fm\233<h\033\250=\377\303\254=\222\247\321\273\325\371\264=YV\211=v\027\203\275h\202\233;<\342\254=~\262v=\241\360\232\275\020kq\274Q\255;<\251>l=\033\177\027=\331x$=\236\243\017\275\032\261\203\275\r.*\275\250\366\263<\373p\000>X\001\372<\034K<\275r\363\304=pz\002>!xm=\300\027\272\275\320\376N=\246\340\225<M\271\t>zBr<\277b\264=a\343\230=\322\257\352;\033\240\317\275+\201W\2759\321I\275F\322c>\'\246\202\274\333\n\033\276\325\245\026=\022\'\021=\356\304!>\265\331\023=\036\0252\2759.\275=\374\0146=O\320\347\274w\030\200\274+0\004>\214\3435\275\275B1=\263\376\235\275Z\305\220;5\034\323=O\232\244= \r\206\275k\312\376\274\211\006\005>H\254\352\274\216\003\244;\t\346\324\275d^\031=\343\237\331=H\261\002\276&\275\231;#\371\251\2746t\203=\005n\316\275H\033\373=\222\207R<\007\261\273\274<a\201\275\371Nt\275\274\252\343\275\314\362\022=\302TD\275\362\246\244=\227\361\326\275\006FG\2734\226\031\275\007\221\313;`Y\327\274\357\320\203\275\035\321\350\273\204OQ=\226\251\371<G)\315\275\307\227l><\302\342=\357\310\024=\315\356F>Q\024a>\367\353|<\370\245==\222#\310=\237?$\276\177\307\005:\2639A\276\374\347\007\275\242\311\306\275{7\014=\373\212\222<\003\023\323\275\031\366\215=\374l\207<K\2414=9\254\231\275\267\325\260=\251\374\216\275Vt\336=^L9;\217\007\203>j\275i\274a\305I= i\254<\312\260\233\275\253\2124<h\223C>\302\250\343<I\356\210=2\227\335\274\323\303\216<7\353\026\275,\216\233\275\377\023\355\275\002N\001\275\256\212\\>\212\332$<\333|-=\035lv=G9;\275\360o\273\275fz\322\275x\251\265\275\224\342i\275x\314\340\275h\224F\275\272\322\016=1\204\244=\377\375\324\274[\330\r>*\375\036>\033,E=8\221 =\263\233\267\274cd\243\274\324\004<=\235p\017;\260x&\276\013\326J=\370\373\036\276 \257H\276\207\341!=\232!\376;\377=\037\275\271`\323\273<f8<E\303j=\021\005\217<\200\230\211<\316\321\204\276\277\213\261\275\332\233\231=\330` \276\374F\256<M\326\020>7~Z<H\371\225\275\3259g<8\311\327=x\262\250\275l.&>\261r\337\275e\304\216=o49=\"\250\353\275R\263\355\273\031\356\370=\227\254`=0\n!>\324\'==\311(\000\276\206B\210\275A\303\262\274\031\375\245\275\251i\241<,\323\t>M3\245<a\207\223\275\016/\214\275O\230\320\273\332\373l>\325\220D\275\346\000\370\274\005\021\334\275!7\243=\316*t=\307L\250=\3546\373<\350\322,>j\3448>\245\264\035=\032QP=\301\255\024\276\337\352>=O\362\204\273\226*S>\023\251\t\276\034y\334=\276t*\275\373.\024<6\025\236=\257-\273=FJ\n>\276\021;\275\000\307-\275U\005\307\274\336\301a\275\203\346\263=\002\212\251\272\366\271\203\274+\311\024<\301\273\022;\312\261>=\261\325\225\275\310h\206\275\202\321%=Ao7\275\213\231\357\275\335\352\206=\332\363\214\275\274\212\231\275\376K\231=C\224\301=\320\277t\275\334\305\025>H>-<\343Jq<zr\276=<f$=\021j\217;\253\271\343\274\256\337\254=@\222B\275\024\320k=-\236\327\275Vh\273=E\230\220<0k\247<\230\226\027;6#|=\330\"H=1\001\307\275\324\300\253\275p\357\215=K\202\240\275\300\030V>j\001H\275\372\377\335< \341$\275\333\237,\276N/\201\274j\216\226\275\361\001>\275p\207\r\276\252\320H=\342b\016=\247\214\252=yN3\275\364W8\275\022\007\001\275C\r\214\273\2665p\275\317\341,\2759\021\330=|\252\211<<\3162;\026\320F=\242\273.=\315\2269<\034\235\001\274\345u\276=\020\3315>\365\232\320=\3726?;\321\315\001<\227\252;\275P/3=\275\311\305\275c\373\266\2722\263\027\275\005\211z=C\302\247=\217\226Q=\202\227\362\274\371\200\333\275W\003\233\274j\326\002<\323\\x\276\243\271\353=\227\303U>*\032\277=~\330\354\275Y6\232=\264\022\345\275_+\'\275\376S\243<\216\t2>O\024\202\275\303\256N>0\335\275\275\006=\003\276(\252l=\321\217\235\274\025~\251\274\317\035>>\267\206\007=#Y\255\274\025q\206<\315\341\375\275J\032\354\275\263\024\251<@^\002\276V\324\257\275v\036\372=_d\240\275[a\036\276,\037\016>t\237\221\272c\333\271=\365\021\221=?\3349\275J\316\252\275U.\204=\004\315&\276\202M\374\274\010\227\200\273i\221\324\275\262\n\307=tI\226<FT\033>>\375\213\274\3065%>2\263W\275\310\266\215<\304\352J;\213h\322<{&<\274\3630\017\274\233\346`=\362\376\265\273I1\334\274_\273\220\275\331)\233=\224\223U;\235\255\243\274\022AA\275\017\256\214=\037\253\\=\260 e=\034L\002\276{\300\024\276m\334\216\273\203;h\275\030\"\244<\230\232\002=9\007\246\274\322\236[<\255\211\341\275\373Q\220=\273\277\373=\027\027\342\275_\331\244\276\223\320\347\275^\031{<\375\203\240=\331\032S;\372r*<\312#t;Se\317<+H#\275\354\203+=J\316J\275\375\025\317=\202\313\027\275gt\223\275N3\320\273F\241\337\275=lz\275\177\0020\275=\037\231\273\256\315\311=U\311\027<\006\254W;\333\313\335\274\230\315\262;&\0314=\336\3030\2741$\273=\305#S<&q\210=\270\022t\276k\232\025<\220\243H>\372\250\024\275\336c\304=\006)*=\372t\017\276\013\361\025>?\r\020\274\316\035\233=H\246\n=\267nN\273\010D\217=\370f\200\274\204\332#\275\213\020\333\275\230\"L\275cl\"=\006\215\232\274\350\006\036\275R\244A=\207\\\265\274ivH\275 h6=`\276\003>|\324\203\276\313@\304\274\345;\225\275_h\013\276\311s\345\272\005d7<Gr\344=\342\303\264=4\002\360<\225_\345\275\352\367\003\276 \210\206=z&\361\275\374\256\256\275\216x*>\351a\037=D?\357<[\231\016\276.$\016\274\206L\232=\330\354\233=\242a(\275\203\007\215\275>(4\274\212\377\237\275\317n\313<\337\005]\275.&\330\274N\255\255<`\312\241\275\237\263\231<\320\352\010\276\270\260_\274\332\344\333=\231)\017\276r\370\346\273\036\235\264\275\233\373\316=\032\362\336\275\335\303\275<\347\273\031\275\033B\t>\020)\214\275\263\220\210\275\330\356\025=_\375\202=\260=*=\376\303\017\276\240$v\275|\2057\275\203\266K;\317bV\275\3066K\272\016k!=\367E\247\275HoR\275\274\370\r\276we\377\275Q\367i=D\nx\274\224\025\252=\235M,\276\212\006\017\276>U\365=%0\305\275\301%\323\274\003\004H>\244!.=\250\304\016<\324X\010=\245\374\332\275*\244\222\275\360\301,<\033;\255\2754e\013>|\203\371\274d](\276K\365&=\204z@<bo\006>\326\245&\275\034\307\353=\363\325M<#k/\275F=\317\275\014\214\304\275\232\370u\275\006\374\332<\310\022.;~\256\233=<\006\220;\035;\306=\271\362l=\264\021\315=O\351\030\275{;-<\264i\007\275\352\0035=\301\221X=\351\021\351=\031!/>\375\363 =\371!\033=\375\300L>\305\304H>5`\222=\375\260\376=#\226Z=\325\006\022\275\356i\037>)\335\005=\273\356\'\276\332\036\021\276P\037$=\311(\364\275=f\277;\234\303\366\275(\202\211\275\031\364\356\275\001\273\336=\356f\216\274v\311v;\035\216A>\265\214\023<\014,\030=v\341\237=$Z\021\275\217\225\331<\203\033p:$H\300\275 \373\340\275\241*\036\276\026\244a\274\364(\251<OD\311\274l3\220\275n\0212>\346i\036\274\370R\373\275\033$\220=HD/<\023\027\330=:\264\213\275\'C\323\275\365\001\027\275j\273\314<*\201&\275\211\005\207\274\rvv=\3157\375=\307\217\017\274\037\236\016\275XsU\275\3727\342<\345\326Q>\376U\361\273#\332\206\275\275\306\341<\006\232F=\034i\035\276L}\372<\372\325\203=\0261\235\275\267\332\257\275\304U\216\275\373\337L<\253\254\245\275{\010O\275\223\310\260\274\367R\235\275\222\351m=\336\373\224\274\007\321\023\274\351\273\256\274\006\250:\275chC\276\032\245\322<\265\032+\274\311@\021\275\311v\344\274n\267L<\237`c=\324L|\275\036\367-={_\030> e\352\275\372\325\311<?\266\">j\230\210<;\\\250=X\310\354\275O\r\306=\251-Q=gb\271<SX\022\276\213\267\022\276,L\304=\337/\217\275\270\304\226<\014\356\223\273\303s\006\276t\371`=\274==\275\036x\222:\266\311\023\276^\0249=\261\375\346=Y\252\010\276fz\036=G\240\254\274\r\017:=T\302\334=\027`\007=\327\217]=\006\037\010=\306\'(\275\212\375\234\275p\370\377\275\007\365]\276_\271\362\275\365\310\312\275.\271$>\347\337;>\021B\026=t-L\2732q\231:\305\347\345\274Z^\377\275\355\360\374\275\333M\377;\333\214\271\275\253\2257>\034\214R=\t\266\373<\330\t\342\274v\r\327;\331I/=f\326x=\206\236\025\276\240{\214\275\255\357\351\275Y`\260=\374\257Z;D\021\276<(\350\316\275\370\340\312\275`\n\022\276\006\360\304\275\320@*\276\032\363\234\275t\010\327\275\251\346\300=\217T\365;\225Z\221=Dt\212=\337\355\004\276q4\002>\334kx=\340\221.=v\354\365<\201*\204=\204\327\336\274?uC\274\375\3330=)\005\360\275t0\303<\337\321\216<\352g\t>\201 \302\275\352\332\246<\271\326\275<9\301\342\274e\222)=\0358\215\276t\037\223=\320\250\242\275\325p\272=L\354E\275r\300\317\274\353k\224=\211\324:\275#\336\273\275H\020\336\272U<.>\241\377v=\337\t\246\275\376\212)\275W\347\261\273\360\037\376\275\327\030N\276\262\275\350\275@,\237\275\305\tn\276\203+p=|\211\035<\014t[>S\2733\275\214n3=n8\240=`:>>\331\354\217=\205O\250=K\r\026\275!\370`\275A\214z\272GK\341\2757$\014>\266\207\006=\330\217\233\275_\\\370\275y\200\215<\242y\235=\337a3=G\310\'\275}\213\230\275\032\241_=b\230.\275\252\237\206\273\246\342\340<\\\224\234=^\246\231=\352\260\362\274\265\330>=\024j\024\275\324\010\003\276Tyx=\037\023[\275\"Q\'\276\216\004\336\275y\222\260\275M\270\342\275\202\026\334<h?\002>\344\220\337\275\363a\226\274\347Z\377\275\266\322\022>\261R\245\275\333\307\227<\307b;=`\212^<\325C\363\275\377\3136\275X\350\256\275\177\364K\273\274\257\353<\376\325c\275s\205\250<\037+j=\227\244\241\274]\357\336;\243\203S<\377\362U>\270cI\275\325\300\375:\200\204\304<\211L%<F\224\207\275\272IQ<~B\207\275\217$\376=-\252\204\275\t\354\220\275\201\300\230\274\306\331\322\274\033h\201=>\270\222\274\250\016\014>/\323\320\274v\326\232=\177t\204\275\2621\003\276\022\315\002\276\366\376\033>\325lF:{X\224=\371\326\003>\226\252\251=\267\r\210=/\271U\275:\014{<\225e\257=2\025\'=\3633\301\275\365\370\323\275\363s\311\274\245W,<n*\202\275OH\232=\332\271\254=6\236#>\361\220\307\275\031:\030<\374*>\27439\371\275\372\3559>\rt&\273*~\312=\005\377\305\272W_v>\316\364\317\274\025@\224<M6\217\275:\214_<}F\277\275\2079\240\274\363\262\327\275&\337\032<.I\004<\261\215\351=\003\373L\275L\234\240=\335\221\263\275*\262\262=\302\336 >=\217?=)\366p\272\334\224\342=\255b\025\273C\321\025;Z\002\350=\341\\I\275~\225\277\274\272\013\025>eq\026\275\r\222\203<}\033\225\275\246\266\316=?D\237=\037\033\362\275vW\317\275\361\303\206=\203\022\\=\005\002\273\275\317\030_\274*\240\311\274\301)H>u\251\356\275T\361\327=\277Bi=\0322\344\273\307\021)\276.\301\271<\025\036\001>W\313+\275\354\335\020\273j\235\373=.\331#\275N\257\230=!\013\022=4+]=\341\270\177=\235E\r=\212\010I>\340*\013>\372\010W\275\210\260M=\014,`\273q1\034<\250G\010\276\265\027\225\274.\3647=\0225\326<6\007K<Z\223\357=SGX=(\274E=\373@\024>\306\373\002=\034\221\017<\347>7=\324\000\375;\212!\356\275L\326\243=M\035\001>\362>\021=\227\243,\275\370\335=\276\337l\034>q\003s\275\356\237\022>\006\020\261\274|\270I\275v]e\274\322\003k>\310I\036\275\224{\362\275c\2732=\336\232\004=a>\205=5\362V=\347\311\000=\305\313\360=}\366C>\001\226\033>\000\313\227=\256W\271\274Ez~>w\316\3759m\013\003>\263>\220=\nU\036=~\271\260\274\223}0>pz\272=?\212\320\274\321K\313\275g\013\325\274\035\0161\276\243\236\032\275\331\212#=)\271o=\350\245\000>\014\2325=$\211\277=\331\372\340;L\316\001\272x\340\340=\nV\370\275\026\343\261=B\026\205\275\004\317\023<\225Z\236<D\322\322=\277w\036=p\313\014=z&};\177u\326<\336C\223\275\256\177\325<\0256\371\273\226\271\227=q\305\243\2730\300\033>\031\211\275\275\331\301[\276\340\270\203\275jo\200=\231S\032\275@\342\220\274J\305\006=\320cl\275\013=\336\275\247\274\212<\3226\004=\200\331\031\272\223\211\344\274}|\023\276f\205\322=H\267\003>S\207!>\312\354\335=z)Y=2\013\361=\346\271\013=\342\026\025=\345\352r\2758z^\274H\027\267;\334<\234<\177\233\234<1\257\313=w\024\322\275<\325\215\272\221\303h\276\005\313\245=U\270\373\275\240\265\213=\225\t\006\276t;$<\330\353j\2756\263\373<c\250r\275\226\204\332<\376\0363=\020\034n\275- \242\274\n<I=\244\351]\275\'\273\356<\026*\244\275g3\244;\216\301]=&n\027=\377sZ=\243+\226<\217\341[=\205\2227\275q/\254\275\342z\226\274\0206\237\275U\351\372\2757\3523\275`\013s\275KgJ\275-^C\275\370\255\327=\230\303?\273\367M\321<\230\321\311\275m\237\024=fg\214\275Z$\335\272<TB>MM\320=}\002\'=\336\311\327=\003\202\324\273\2439\223=7\354\327<\n.\236\276\025\236\213\275\326\253\004>\017\300.>\317wY=\024\346==^WF<ac\275\275\'\017&\276\321?~\275\365\273\361\275\260\035_\2767\272\321<\367\3142\276\375\202\222\275;e\355\274\003\234\336\275\344N\250=\201\313\001>\314\255\222=C\362\026>t\030\007\275\220\335\233=\245a$=\211\250\333=\237j\234=\360\217\014=f6\271\275\325\014\021\274\235q\207\275y\260.>DC\265=N\005\357;\'\276\t\275/i\351=\324Zs\275\341\203\335\275\246E\234\273\014\214P=\356}`=\327\354\323\275\252W\241=\020S \276\313b\256\275\265\230 >L\375\224=\035w[=N\317\034=C\030\357=\027\024\247=P\373\2669\005\220\343\275\377\350\222=\271\247\303=\3304\316\275@#\350=\210\253*\275\010\036.\275g\314b\275&9#\276Pf\355;\3620\352\274j\361\264\274\321\"\026<=\217H>\355\002?\275v\177\256<\372M\230\275P\325\376\274\205\335\231<\346o\247<\000\370K=\007\004\005>\304\262b=N\325\017=\370\333\273=\312\352\006>\237\245\n\276\313M|=\330\310]\275p* \273\035MA>\212\213Q\275\224\333\353=2vM\275=\341\264\274\265\263\313;\326N2\275\026\t\257\274\205\275\022=\345x9>}\266X=\337_\371<\305\024\257==/\'=\321\022\001\275#\252\017\276\336\031\005\276\271\335R\2744\002c=\307\226\023=\272\310}=$\365\354=\253\315\262=\245\267\232<0\020\353\275\260\340.\275\027 T\275\014\272\257=\347\332\305\275\326\254\234\274\353\241\253\275\312_\026=\322]\010>H\224\372=\301hw=\242%\346\275\020\025\306\270\212\3661=w\207\215\275\303\001\302=\367\364\221<\007g\022\275\376\325\025\275\246\022c=6\3642\276w\310.=\313\323\002\275\377\37119E\0244>0d\200=z\324\213=\207\322\005>\360\253\233=\356\214h\274\324\236\274<v\254[\275%\265\r\274\204\330\270\275\246\232\002\2751\343\n\2761\267t\275\275@\206\275\355A=\275\242\023\367\275\273\315\017=\021\200v=H\021f\276\005h\241\275\264\007H=\034\313B>\316\031^<\352\223\025\275\331\367\200\275\205\025J\275\366\276\263\275b\317\340\275\347\331W\271}-\306=\327\250N\275\233\353\005>+\261\334\273+\245%\276R\305\246<\301,A\276\335$\310\275s:7>Ny\275<\257W\014\276\265\305\220\275\241\257>\274\331\365==;\3676\275\317\241\221<\203:*\276\321\226\001\276\232\013_\275\320\242\n=9\236)<J\256\030=\332\006\271=0s\251\274u\007\207\274\024\217?\275\373<\201\275\242\035\264= \362\020\275\006[\324=\301\010\306=\304\212\336=,\037F=f\337T=esR\276[9 <\001p\337\274.\030\2359\013\\\350<^G\242=\245\316\211;{\336\321\275I\203&>\010\026\202\276I\373\032\275\010\000\027>\277hq\275O\233\010\2759~h=\035\251\240=P\3537\274\314\336\276\275\340v\234=+\200\302=\342\310\215=P\3275\275\261b\t\276R\273\254\275\373\214\355<Y*\226\275\004K\3149\217\316\326\275\235,\222=Q\224\255=J\220\202<\344G\310\275|\224\n=H\021\221=\200g\273<\353Y\342\275[\177\233\275\271\370#\274\203\353\307\272\017bf\275\353\326\227\275q\017\n=\254/\366=H3\321\275\014\205\001>\316x\375\274\325\312\312=3\216J=\377\244Q\274E\232\262\275\355\3672>\022\335\374\274\224\347\224\273\014\004\265<S\027\261\275\334\322\220=\031w\233=\264\007\003\275\243\363%=\021\222\001\276\327\270G=\334\324\375<M6\345\273a\267g=l\261\260<\202\231\334=.\013\010>\214\267Q>d!\205\275}\016\307\275\375\200z\275UI\265\275\271\220G\273\025jO\275\010\273\177\275hx<>R\2143>i\200\252\275\207P\005>J\270\255\2754\333\004>\212B==E\303\355\275\340k\345<Z$Z\275\335\254\030\2758 8\275W\223$>\343\245\276\275\246p\033>xH\226<[\372\352<Dd\031\273\n*V=\254\237e<\355\201\237\275|\014\215=^\013t=\262\302\346\274}.\207\275\305\t0\275\372\250d=\025\206f\275\231\206\341;\rU_=\250\020\236\2743\343\200\275/\335\354;\017\374A\276\303\277\364;\327\361\257=\242\n\352<\323<*\2768\343\374\274\351\306C\276Oi\243=\217\236`\275\230t>\276u\270\206=\250\326\347\275\367Pj\274\205gH<2\210\024\275\017\257\"=z\206M>\372\363H\275\376\016\375<\214M\216\2757\033:<r\3539\275\313r\344\275W\200\327\274j\rI;\263\\\331=k\217k=\036^\220\275~\003\010=\356>\236\275|~6=\207\210\354=7\264\242=\203\350\364\275\215$\230\275\347\325\033\275\302#\327<]\352\024>\356\227\225=@\230\003>!\203^\275eoZ=\301\363\237;u\016j>\307\005\262\273\036\004\r>KL\322\275\224\260\362\274U0\007\276\005\375\203=\375\216X\275\340\364\276\275\302r\371\275\373\3202\275\230\270\232=uO\016>\201\344\235=\247b\266=R\334\021;\031\354\261\275\216D\367=\341\257\222\275\227\230\204<3l\252=\273\321\217=\321(\233\275\240\363\307=\022\347\245<Y\250\030>\351\007\352\275K\030\304\274\360\217\204<5KG\276\213\347*=~q\362\275j\330\252=\204A\025>\213#;=\253[\242=\322\316\207\273\001\230\212\275\217Cq\2755\271\021\275\027\254\302\275G>\346\274\206\323\013>\357\t\345<\341\241;\275\245\260l\275\021\236\263<v\201-<\342U\351\2755\017\366\274\257 W\275\373f\016\276\'\332\255<,\302\025\276\226A<=v~C>\0045F>\230ei=J|\306\273B\300\007>k\301\244:n\356\374\275\031\341\212=\237\322\217=\0047\375\274\002O\330;b\341\304\275\204W\\;\252\321\252;q\207\021=t\203\254=\252\217\247<z\231^\274\026\376o\276\251\3435=N\205\215\2755)|\274\351\r\345=\027\303H=\215A\232\274\3114A=+Q\017\275\273\315\372\275\264\230\220=?Ys\274\272\007&=\023\212\244\275\205\233\000>\2508\236\275\316\3273=\032~\226<\201C\341\275\251\273[\275\n\371\314\275[r\267<\266\237b\275f#`\275me\202=\327\177\374=UY\207>\253\321\217\275^\357h=_x@=\\\267\017=,#\356=\322q\357\275\013\370(\274\"*\345\275\257d\221\275\222XO\275\350\302\237:\"\214\242\275h\270n<`\243\315\275\321\266s=\177\005)=Y\222,<\212\000\037=:\302.=\307K\003\276\007\311\324=:@\252=\265\327\267=O\243%\276\247<\363=\251\320\024=ZE\366=@\367\240\273Q\373H\276d\234\371<\223\364\335=\r\234&\275\247\375\000<z\336\310=|\326\342<`W\177<xf\262\272\356\330\266\275\311\270\364<Wn\243<A\350\257=\257?\305=\250\001\231=Y\356y=\251\275\244\274\315\210Y;\365\261\233=\007\353\307\275P\307\335\274\236\222\035>JN\271\274\236\201g\276M\010\001=\027\262\212\274QOD<M.\206\275\177\201\203\273U\177\273\275$\305\024\276\252\206\332\275\320\350(\276\253\004U=\225\023\213\275\200\342\257=\340\263\247;\310\177S=\340\207\265\274\377d\205<\253\207\353\2743\033 >\205\240\376<\366\210\3769\223\342\262=\264z\303\275#e\010\276\202o\027\276\265\010e=UA@\276\320\027\255=,\027\005>t9\247\274(\232\206\275\000Ck\276\3768l;\004:\016<c7?=\327\212\201\274m\231 \274g\320\253<\241\\\220\274\006\r\256:\202\252\277\275\024A}>Ka\364\273m\232$\275\315 \250\275~7\250=\267\300\307<\270\253\320=q,\260\275*P\215\275\271\363~\276\027}}=\001?\213=2\2535\275\213\250\201\275\261 \302\275\\6j=\222X\265=\215\017\303=H2\372\267\352+\214=\342\224X;t\310:=f\241\351=B\207\235\275$>*=0j*>\261H\030>\345\222\371\274^W\313=Vf\013\274xz\254<1\337\033>2>4=,lR<\242\3409\275\246\345\206>\261\314\234\275?W\351=|\245l\275\266\374\027\275\313\021\313\275\365\252\247=\013n\221\275\030\252\254<0\371Z\275\377\301\020=\210\300=\276\347\206\253=\305@\n\276\326<&<\257ca\275F\026a;\361\273\245=\020\'\220=\013\210\r=\225v\346<\351\362*\274\264\'\355\275jG\010\276_&|=^\312-\274`\371/\274\000\013\301=X+\273\275\316\337\006=\3337\016\276\260\313\324=>\240\233=\033\275\373\274\211\363\350=\240o\313<\274\262\212=\336\0259\276\030\n\366<\344$\303=\201\033\004\276\255\025\370;\355\3038;\302W(\2766l\020=\216\317\223\275O\231\214\275\231\277i\275\226\240\243\275B,\000=\237w\345\275\023\022\221\275fD\253=\022\020R=\013\240\247=\343\234\035\275\351t\016=u\354\224=\r\240\275=\034a\177<d\347C=\377\005Q=\277\245\360;\263qj\275e\241\304=\223M5>\032\336\243=wq]=\271B\211=\"4\321<2V,;\272\0253;\344\363\261=\273\001\035\275\004\236:\274\204Y\331\275\332\301\320\274"
      }
    }
  }
}
node {
  name: "lstm_1_1/recurrent_kernel/Assign_1"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel_1"
  input: "lstm_1_1/recurrent_kernel/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul_1_1"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer/mul/x_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "lstm_1_1/kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_12_1"
  op: "IsVariableInitialized"
  input: "lstm_1_1/kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_29"
  op: "Assign"
  input: "lstm_1_1/kernel_1"
  input: "Placeholder_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/kernel/read_1"
  op: "Identity"
  input: "lstm_1_1/kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul_2"
  op: "Mul"
  input: "lstm_1_1/kernel/read_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_3_1"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read_1"
  input: "lstm_1_1/strided_slice_3/stack_3"
  input: "lstm_1_1/strided_slice_3/stack_1_1"
  input: "lstm_1_1/strided_slice_3/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_3/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_2_1"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read_1"
  input: "lstm_1_1/strided_slice_2/stack_3"
  input: "lstm_1_1/strided_slice_2/stack_1_1"
  input: "lstm_1_1/strided_slice_2/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_2/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_1_1"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read_1"
  input: "lstm_1_1/strided_slice_1/stack_3"
  input: "lstm_1_1/strided_slice_1/stack_1_1"
  input: "lstm_1_1/strided_slice_1/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_1/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_14"
  op: "StridedSlice"
  input: "lstm_1_1/kernel/read_1"
  input: "lstm_1_1/strided_slice/stack_3"
  input: "lstm_1_1/strided_slice/stack_1_1"
  input: "lstm_1_1/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/Square_1"
  op: "Square"
  input: "lstm_1_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Sum_grad/Tile_1"
  input: "lstm_1_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/mul_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/mul_1"
  op: "Mul"
  input: "lstm_1_1/weight_regularizer/mul/x_1"
  input: "lstm_1_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/Sum_1"
  op: "Sum"
  input: "lstm_1_1/weight_regularizer/mul_1"
  input: "lstm_1_1/weight_regularizer/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/weight_regularizer/add_1"
  op: "Add"
  input: "lstm_1_1/weight_regularizer/add/x_1"
  input: "lstm_1_1/weight_regularizer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/max_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20927404
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/min_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20927404
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/sub_1"
  op: "Sub"
  input: "lstm_1_1/random_uniform/max_1"
  input: "lstm_1_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "lstm_1_1/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9195856
    }
  }
}
node {
  name: "lstm_1_1/random_uniform/mul_1"
  op: "Mul"
  input: "lstm_1_1/random_uniform/RandomUniform_1"
  input: "lstm_1_1/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/random_uniform_1"
  op: "Add"
  input: "lstm_1_1/random_uniform/mul_1"
  input: "lstm_1_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/kernel/Assign_1"
  op: "Assign"
  input: "lstm_1_1/kernel_1"
  input: "lstm_1_1/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_input_1_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 9
        }
      }
    }
  }
}
node {
  name: "lstm_1_1/transpose_2"
  op: "Transpose"
  input: "lstm_1_input_1_1"
  input: "lstm_1_1/transpose/perm_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/Shape_1"
  op: "Shape"
  input: "lstm_1_1/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1_1/TensorArrayUnstack/Shape_1"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_3"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_1_1"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/range_1"
  op: "Range"
  input: "lstm_1_1/TensorArrayUnstack/range/start_1"
  input: "lstm_1_1/TensorArrayUnstack/strided_slice_1"
  input: "lstm_1_1/TensorArrayUnstack/range/delta_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_13_1"
  op: "StridedSlice"
  input: "lstm_1_1/transpose_2"
  input: "lstm_1_1/strided_slice_13/stack_3"
  input: "lstm_1_1/strided_slice_13/stack_1_1"
  input: "lstm_1_1/strided_slice_13/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1_1/MatMul_3_1"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13_1"
  input: "lstm_1_1/strided_slice_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_3_1"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_3_1"
  input: "lstm_1_1/strided_slice_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/MatMul_2_1"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13_1"
  input: "lstm_1_1/strided_slice_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_2_1"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_2_1"
  input: "lstm_1_1/strided_slice_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/MatMul_1_1"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13_1"
  input: "lstm_1_1/strided_slice_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_1_1"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_1_1"
  input: "lstm_1_1/strided_slice_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/MatMul_8"
  op: "MatMul"
  input: "lstm_1_1/strided_slice_13_1"
  input: "lstm_1_1/strided_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/BiasAdd_4"
  op: "BiasAdd"
  input: "lstm_1_1/MatMul_8"
  input: "lstm_1_1/strided_slice_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1_1/Shape_1"
  op: "Shape"
  input: "lstm_1_1/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/strided_slice_12_1"
  op: "StridedSlice"
  input: "lstm_1_1/Shape_1"
  input: "lstm_1_1/strided_slice_12/stack_3"
  input: "lstm_1_1/strided_slice_12/stack_1_1"
  input: "lstm_1_1/strided_slice_12/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1_1/while/Less_1/Enter_1"
  op: "Enter"
  input: "lstm_1_1/strided_slice_12_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Less_1_1"
  op: "Less"
  input: "lstm_1_1/while/Merge_1_1"
  input: "lstm_1_1/while/Less_1/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/LogicalAnd_1"
  op: "LogicalAnd"
  input: "lstm_1_1/while/Less_2"
  input: "lstm_1_1/while/Less_1_1"
}
node {
  name: "lstm_1_1/while/LoopCond_1"
  op: "LoopCond"
  input: "lstm_1_1/while/LogicalAnd_1"
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_1_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2_1"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1_1"
  input: "training/Adam/gradients/NextIteration_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1_1"
  input: "training/Adam/gradients/GreaterEqual/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2_1"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_grad/Shape_1"
  input: "lstm_1_1/strided_slice/stack_3"
  input: "lstm_1_1/strided_slice/stack_1_1"
  input: "lstm_1_1/strided_slice/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_14"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/Shape_1"
  input: "lstm_1_1/strided_slice_1/stack_3"
  input: "lstm_1_1/strided_slice_1/stack_1_1"
  input: "lstm_1_1/strided_slice_1/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_1_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/Shape_1"
  input: "lstm_1_1/strided_slice_4/stack_3"
  input: "lstm_1_1/strided_slice_4/stack_1_1"
  input: "lstm_1_1/strided_slice_4/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_4_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/Shape_1"
  input: "lstm_1_1/strided_slice_8/stack_3"
  input: "lstm_1_1/strided_slice_8/stack_1_1"
  input: "lstm_1_1/strided_slice_8/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_8_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/Shape_1"
  input: "lstm_1_1/strided_slice_5/stack_3"
  input: "lstm_1_1/strided_slice_5/stack_1_1"
  input: "lstm_1_1/strided_slice_5/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_5_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/Shape_1"
  input: "lstm_1_1/strided_slice_9/stack_3"
  input: "lstm_1_1/strided_slice_9/stack_1_1"
  input: "lstm_1_1/strided_slice_9/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_9_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/Shape_1"
  input: "lstm_1_1/strided_slice_2/stack_3"
  input: "lstm_1_1/strided_slice_2/stack_1_1"
  input: "lstm_1_1/strided_slice_2/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_2_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/Shape_1"
  input: "lstm_1_1/strided_slice_6/stack_3"
  input: "lstm_1_1/strided_slice_6/stack_1_1"
  input: "lstm_1_1/strided_slice_6/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_6_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/Shape_1"
  input: "lstm_1_1/strided_slice_10/stack_3"
  input: "lstm_1_1/strided_slice_10/stack_1_1"
  input: "lstm_1_1/strided_slice_10/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_10_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/Shape_1"
  input: "lstm_1_1/strided_slice_3/stack_3"
  input: "lstm_1_1/strided_slice_3/stack_1_1"
  input: "lstm_1_1/strided_slice_3/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_3_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer/Square_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_3_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_2_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_1_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_grad/StridedSliceGrad_1"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4_1"
  op: "Mul"
  input: "training/Adam/sub_3_1"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2_1"
  op: "Add"
  input: "training/Adam/mul_3_1"
  input: "training/Adam/mul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_1_1"
  op: "Assign"
  input: "training/Adam/Variable_7_1"
  input: "training/Adam/add_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1_1"
  op: "ClipByValue"
  input: "training/Adam/add_2_1"
  input: "training/Adam/Const_2_1"
  input: "training/Adam/Const_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3_1"
  op: "Add"
  input: "training/Adam/Sqrt_1_1"
  input: "training/Adam/add_3/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2_1"
  op: "Mul"
  input: "training/Adam/sub_2_1"
  input: "training/Adam/gradients/AddN_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1_1"
  op: "Add"
  input: "training/Adam/mul_1_1"
  input: "training/Adam/mul_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_5_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1_1"
  op: "RealDiv"
  input: "training/Adam/mul_5_1"
  input: "training/Adam/add_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4_1"
  op: "Sub"
  input: "lstm_1_1/kernel/read_1"
  input: "training/Adam/truediv_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_2_1"
  op: "Assign"
  input: "lstm_1_1/kernel_1"
  input: "training/Adam/sub_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/Shape_1"
  input: "lstm_1_1/strided_slice_7/stack_3"
  input: "lstm_1_1/strided_slice_7/stack_1_1"
  input: "lstm_1_1/strided_slice_7/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_7_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_7_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_6_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_5_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_4_grad/StridedSliceGrad_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_7_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_1_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9_1"
  op: "Mul"
  input: "training/Adam/sub_6_1"
  input: "training/Adam/Square_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5_1"
  op: "Add"
  input: "training/Adam/mul_8_1"
  input: "training/Adam/mul_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_4_1"
  op: "Assign"
  input: "training/Adam/Variable_8_1"
  input: "training/Adam/add_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2_1"
  op: "ClipByValue"
  input: "training/Adam/add_5_1"
  input: "training/Adam/Const_4_1"
  input: "training/Adam/Const_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6_1"
  op: "Add"
  input: "training/Adam/Sqrt_2_1"
  input: "training/Adam/add_6/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7_1"
  op: "Mul"
  input: "training/Adam/sub_5_1"
  input: "training/Adam/gradients/AddN_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4_1"
  op: "Add"
  input: "training/Adam/mul_6_1"
  input: "training/Adam/mul_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3_1"
  op: "Assign"
  input: "training/Adam/Variable_1_1"
  input: "training/Adam/add_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_10_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2_1"
  op: "RealDiv"
  input: "training/Adam/mul_10_1"
  input: "training/Adam/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7_1"
  op: "Sub"
  input: "lstm_1_1/recurrent_kernel/read_1"
  input: "training/Adam/truediv_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_5_1"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel_1"
  input: "training/Adam/sub_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_2_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_3_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/Shape_1"
  input: "lstm_1_1/strided_slice_11/stack_3"
  input: "lstm_1_1/strided_slice_11/stack_1_1"
  input: "lstm_1_1/strided_slice_11/stack_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/b_acc_3_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/strided_slice_11_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/weight_regularizer_1/Square_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_11_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_10_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_9_grad/StridedSliceGrad_1"
  input: "training/Adam/gradients/lstm_1_1/strided_slice_8_grad/StridedSliceGrad_1"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_2_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14_1"
  op: "Mul"
  input: "training/Adam/sub_9_1"
  input: "training/Adam/Square_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8_1"
  op: "Add"
  input: "training/Adam/mul_13_1"
  input: "training/Adam/mul_14_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_7_1"
  op: "Assign"
  input: "training/Adam/Variable_9_1"
  input: "training/Adam/add_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3_1"
  op: "ClipByValue"
  input: "training/Adam/add_8_1"
  input: "training/Adam/Const_6_1"
  input: "training/Adam/Const_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9_1"
  op: "Add"
  input: "training/Adam/Sqrt_3_1"
  input: "training/Adam/add_9/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12_1"
  op: "Mul"
  input: "training/Adam/sub_8_1"
  input: "training/Adam/gradients/AddN_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7_1"
  op: "Add"
  input: "training/Adam/mul_11_1"
  input: "training/Adam/mul_12_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6_1"
  op: "Assign"
  input: "training/Adam/Variable_2_1"
  input: "training/Adam/add_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_15_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3_1"
  op: "RealDiv"
  input: "training/Adam/mul_15_1"
  input: "training/Adam/add_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10_1"
  op: "Sub"
  input: "lstm_1_1/bias/read_1"
  input: "training/Adam/truediv_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_8_1"
  op: "Assign"
  input: "lstm_1_1/bias_1"
  input: "training/Adam/sub_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3_1"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_2"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_2"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater_1"
  op: "Greater"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less_1"
  op: "Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/LogicalOr_1"
  op: "LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_2_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_1_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater_1"
  op: "Greater"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less_1"
  op: "Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/LogicalOr_1"
  op: "LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_2_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_1_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_2"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater_1"
  op: "Greater"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less_1"
  op: "Less"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/LogicalOr_1"
  op: "LogicalOr"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_2_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_1_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_1_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync_1"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_1_1"
  op: "Switch"
  input: "lstm_1_1/while/Merge_1_1"
  input: "lstm_1_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_1_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_1_1"
  op: "Exit"
  input: "lstm_1_1/while/Switch_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/sub_1"
  op: "Sub"
  input: "lstm_1_1/while/Exit_1_1"
  input: "lstm_1_1/sub/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_1_1"
  op: "Identity"
  input: "lstm_1_1/while/Switch_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_5"
  op: "Switch"
  input: "lstm_1_1/while/Merge_5"
  input: "lstm_1_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_5"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_5"
  op: "Exit"
  input: "lstm_1_1/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_5"
  op: "Identity"
  input: "lstm_1_1/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter_1"
  input: "lstm_1_1/while/Identity_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_9/y_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_9_1"
  op: "Add"
  input: "lstm_1_1/while/Identity_1_1"
  input: "lstm_1_1/while/add_9/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_1_1"
  op: "NextIteration"
  input: "lstm_1_1/while/add_9_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Const_5_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_4_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_8/y_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul_4/x_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_3_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_2_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_4/y_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul_1/x_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_1_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Const_6"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_2/y_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul/x_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add/y_1"
  op: "Const"
  input: "^lstm_1_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1_1/while/add_10"
  op: "Add"
  input: "lstm_1_1/while/Identity_5"
  input: "lstm_1_1/while/add/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_5"
  op: "NextIteration"
  input: "lstm_1_1/while/add_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/TensorArray_1_1"
  op: "TensorArrayV3"
  input: "lstm_1_1/strided_slice_12_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayReadV3/Enter_2"
  op: "Enter"
  input: "lstm_1_1/TensorArray_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_1"
  op: "TensorArrayScatterV3"
  input: "lstm_1_1/TensorArray_1_1"
  input: "lstm_1_1/TensorArrayUnstack/range_1"
  input: "lstm_1_1/transpose_2"
  input: "lstm_1_1/TensorArray_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/transpose_2"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayReadV3/Enter_1_1"
  op: "Enter"
  input: "lstm_1_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "lstm_1_1/while/TensorArrayReadV3/Enter_2"
  input: "lstm_1_1/while/Identity_1_1"
  input: "lstm_1_1/while/TensorArrayReadV3/Enter_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/Enter_1"
  input: "lstm_1_1/while/TensorArrayReadV3_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_3_1"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3_1"
  input: "lstm_1_1/while/MatMul_3/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_3_1"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_3_1"
  input: "lstm_1_1/while/BiasAdd_3/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_2_1"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3_1"
  input: "lstm_1_1/while/MatMul_2/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_2_1"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_2_1"
  input: "lstm_1_1/while/BiasAdd_2/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_1_1"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3_1"
  input: "lstm_1_1/while/MatMul_1/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_1_1"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_1_1"
  input: "lstm_1_1/while/BiasAdd_1/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_8"
  op: "MatMul"
  input: "lstm_1_1/while/TensorArrayReadV3_1"
  input: "lstm_1_1/while/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/while/BiasAdd_4"
  op: "BiasAdd"
  input: "lstm_1_1/while/MatMul_8"
  input: "lstm_1_1/while/BiasAdd/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/BiasAdd_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "lstm_1_1/strided_slice_12_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_1_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
  op: "Enter"
  input: "lstm_1_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_2_1"
  op: "Enter"
  input: "lstm_1_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_2_1"
  op: "Merge"
  input: "lstm_1_1/while/Enter_2_1"
  input: "lstm_1_1/while/NextIteration_2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_2_1"
  op: "Switch"
  input: "lstm_1_1/while/Merge_2_1"
  input: "lstm_1_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_2_1"
  op: "Exit"
  input: "lstm_1_1/while/Switch_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3_1"
  op: "TensorArrayGradV3"
  input: "lstm_1_1/TensorArray_2"
  input: "lstm_1_1/while/Exit_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow_1"
  op: "Identity"
  input: "lstm_1_1/while/Exit_2_1"
  input: "^training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "lstm_1_1/TensorArray_2"
  input: "lstm_1_1/sub_1"
  input: "lstm_1_1/while/Exit_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/TensorArraySizeV3_1"
  op: "TensorArraySizeV3"
  input: "lstm_1_1/TensorArray_2"
  input: "lstm_1_1/while/Exit_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/range_1"
  op: "Range"
  input: "lstm_1_1/TensorArrayStack/range/start_1"
  input: "lstm_1_1/TensorArrayStack/TensorArraySizeV3_1"
  input: "lstm_1_1/TensorArrayStack/range/delta_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "lstm_1_1/TensorArrayStack/TensorArrayGatherV3_1"
  op: "TensorArrayGatherV3"
  input: "lstm_1_1/TensorArray_2"
  input: "lstm_1_1/TensorArrayStack/range_1"
  input: "lstm_1_1/while/Exit_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_1_1/transpose_1_1"
  op: "Transpose"
  input: "lstm_1_1/TensorArrayStack/TensorArrayGatherV3_1"
  input: "lstm_1_1/transpose_1/perm_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/flatten_1/Reshape_grad/Shape_1"
  op: "Shape"
  input: "lstm_1_1/transpose_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@flatten_1/Reshape_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten_1/Shape_1"
  op: "Shape"
  input: "lstm_1_1/transpose_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten_1/strided_slice_1"
  op: "StridedSlice"
  input: "flatten_1/Shape_1"
  input: "flatten_1/strided_slice/stack_3"
  input: "flatten_1/strided_slice/stack_1_1"
  input: "flatten_1/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten_1/Prod_1"
  op: "Prod"
  input: "flatten_1/strided_slice_1"
  input: "flatten_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten_1/stack_1"
  op: "Pack"
  input: "flatten_1/stack/0_1"
  input: "flatten_1/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten_1/Reshape_1"
  op: "Reshape"
  input: "lstm_1_1/transpose_1_1"
  input: "flatten_1/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1_1/MatMul_1"
  op: "MatMul"
  input: "flatten_1/Reshape_1"
  input: "dense_1_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1_1/BiasAdd_1"
  op: "BiasAdd"
  input: "dense_1_1/MatMul_1"
  input: "dense_1_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1_1/Relu_1"
  op: "Relu"
  input: "dense_1_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_1/MatMul_1"
  op: "MatMul"
  input: "dense_1_1/Relu_1"
  input: "output_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output_1/BiasAdd_1"
  op: "BiasAdd"
  input: "output_1/MatMul_1"
  input: "output_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "output_1/Softmax_1"
  op: "Softmax"
  input: "output_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Greater_1"
  op: "Greater"
  input: "output_1/Softmax_1"
  input: "loss_1/output_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Less_1"
  op: "Less"
  input: "output_1/Softmax_1"
  input: "loss_1/output_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/LogicalOr_1"
  op: "LogicalOr"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Less_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Greater_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_4"
  op: "Shape"
  input: "output_1/Softmax_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_1_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_4"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_4"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "metrics_1/acc/ArgMax_1"
  op: "ArgMax"
  input: "output_1/Softmax_1"
  input: "metrics_1/acc/ArgMax/dimension_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics_1/acc/Cast_2"
  op: "Cast"
  input: "metrics_1/acc/ArgMax_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics_1/acc/Equal_1"
  op: "Equal"
  input: "metrics_1/acc/Max_1"
  input: "metrics_1/acc/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics_1/acc/Cast_1_1"
  op: "Cast"
  input: "metrics_1/acc/Equal_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics_1/acc/Mean_1"
  op: "Mean"
  input: "metrics_1/acc/Cast_1_1"
  input: "metrics_1/acc/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/output_loss/clip_by_value_1"
  op: "ClipByValue"
  input: "output_1/Softmax_1"
  input: "loss_1/output_loss/Const_3"
  input: "loss_1/output_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/output_loss/Log_1"
  op: "Log"
  input: "loss_1/output_loss/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Shape_1"
  op: "Shape"
  input: "loss_1/output_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Reshape_1_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/Reshape_1_1"
  op: "Reshape"
  input: "loss_1/output_loss/Log_1"
  input: "loss_1/output_loss/Reshape_1/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss_1/output_loss/Reshape_1_1"
  input: "loss_1/output_loss/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient_1"
  op: "PreventGradient"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_2_1"
  op: "Shape"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod_2"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_2_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_4"
  op: "Shape"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/DynamicStitch_1"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/range_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/mod_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_4"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Fill_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_2"
  op: "Maximum"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/DynamicStitch_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv_2"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_4"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/Mean_3"
  op: "Mean"
  input: "loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
  input: "loss_1/output_loss/Mean/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_3_1"
  op: "Shape"
  input: "loss_1/output_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod_1_1"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Shape_3_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv_1_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Prod_2"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Maximum_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Cast_1"
  op: "Cast"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv_1_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_2"
  op: "Shape"
  input: "loss_1/output_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_2"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/mul_1"
  op: "Mul"
  input: "loss_1/output_loss/Mean_3"
  input: "output_sample_weights_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Neg_1"
  op: "Neg"
  input: "loss_1/output_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_1_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Neg_1"
  input: "loss_1/output_loss/Mean_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_2_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_1_1"
  input: "loss_1/output_loss/Mean_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_2"
  op: "Shape"
  input: "loss_1/output_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_2"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "loss_1/output_loss/truediv_1"
  op: "RealDiv"
  input: "loss_1/output_loss/mul_1"
  input: "loss_1/output_loss/Mean_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_1_1"
  op: "Shape"
  input: "loss_1/output_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod_2"
  op: "Prod"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Prod_2"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Cast_1"
  op: "Cast"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_3"
  op: "Shape"
  input: "loss_1/output_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Reshape_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/truediv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Tile_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/truediv_1"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/mul_1"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_3"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_2_grad/truediv_1"
  input: "loss_1/output_loss/Mean_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/RealDiv_3"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Sum_2"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul_1_1"
  op: "Mul"
  input: "loss_1/output_loss/Mean_3"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/truediv_grad/Reshape_2"
  input: "output_sample_weights_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Mul_2"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Sum_2"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/mul_grad/Reshape_2"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/DynamicStitch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Tile_1"
  op: "Tile"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Reshape_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/floordiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Mean_grad/truediv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Tile_1"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "training/Adam/gradients/loss_1/output_loss/Mean_grad/truediv_1"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims_1"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul_1"
  input: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Reshape_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Log_grad/Reciprocal_1"
  op: "Reciprocal"
  input: "loss_1/output_loss/clip_by_value_1"
  input: "^training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/Reshape_1_grad/Reshape_1"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/Reciprocal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_3_1"
  op: "Shape"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_3_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_2_1"
  op: "Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Greater_1"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_2_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_2_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_2_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_2_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_1_1"
  op: "Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Less_1"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_1_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_3"
  op: "Select"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/LogicalOr_1"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/zeros_1"
  input: "training/Adam/gradients/loss_1/output_loss/Log_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_3"
  op: "Sum"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Select_3"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/BroadcastGradientArgs_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_3"
  op: "Reshape"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Sum_3"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Shape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/output_loss/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/mul_2"
  op: "Mul"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_3"
  input: "output_1/Softmax_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_2"
  input: "training/Adam/gradients/output_1/Softmax_grad/Sum/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/output_1/Softmax_grad/Sum_1"
  input: "training/Adam/gradients/output_1/Softmax_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/loss_1/output_loss/clip_by_value_grad/Reshape_3"
  input: "training/Adam/gradients/output_1/Softmax_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/Softmax_grad/mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/output_1/Softmax_grad/sub_1"
  input: "output_1/Softmax_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/Softmax_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "dense_1_1/Relu_1"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1_1"
  op: "AddN"
  input: "training/Adam/gradients/output_1/weight_regularizer/Square_grad/Mul_1_1"
  input: "training/Adam/gradients/output_1/MatMul_grad/MatMul_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_5_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29_1"
  op: "Mul"
  input: "training/Adam/sub_18_1"
  input: "training/Adam/Square_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17_1"
  op: "Add"
  input: "training/Adam/mul_28_1"
  input: "training/Adam/mul_29_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_16_1"
  op: "Assign"
  input: "training/Adam/Variable_12_1"
  input: "training/Adam/add_17_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6_1"
  op: "ClipByValue"
  input: "training/Adam/add_17_1"
  input: "training/Adam/Const_12_1"
  input: "training/Adam/Const_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18_1"
  op: "Add"
  input: "training/Adam/Sqrt_6_1"
  input: "training/Adam/add_18/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27_1"
  op: "Mul"
  input: "training/Adam/sub_17_1"
  input: "training/Adam/gradients/AddN_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16_1"
  op: "Add"
  input: "training/Adam/mul_26_1"
  input: "training/Adam/mul_27_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15_1"
  op: "Assign"
  input: "training/Adam/Variable_5_1"
  input: "training/Adam/add_16_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_30_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_16_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6_1"
  op: "RealDiv"
  input: "training/Adam/mul_30_1"
  input: "training/Adam/add_18_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19_1"
  op: "Sub"
  input: "output_1/kernel/read_1"
  input: "training/Adam/truediv_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_17_1"
  op: "Assign"
  input: "output_1/kernel_1"
  input: "training/Adam/sub_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_1_1"
  input: "output_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad_1"
  op: "ReluGrad"
  input: "training/Adam/gradients/output_1/MatMul_grad/MatMul_2"
  input: "dense_1_1/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/Relu_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "flatten_1/Reshape_1"
  input: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3_1"
  op: "AddN"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer/Square_grad/Mul_1_1"
  input: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_3_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19_1"
  op: "Mul"
  input: "training/Adam/sub_12_1"
  input: "training/Adam/Square_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11_1"
  op: "Add"
  input: "training/Adam/mul_18_1"
  input: "training/Adam/mul_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_10_1"
  op: "Assign"
  input: "training/Adam/Variable_10_1"
  input: "training/Adam/add_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4_1"
  op: "ClipByValue"
  input: "training/Adam/add_11_1"
  input: "training/Adam/Const_8_1"
  input: "training/Adam/Const_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12_1"
  op: "Add"
  input: "training/Adam/Sqrt_4_1"
  input: "training/Adam/add_12/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17_1"
  op: "Mul"
  input: "training/Adam/sub_11_1"
  input: "training/Adam/gradients/AddN_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10_1"
  op: "Add"
  input: "training/Adam/mul_16_1"
  input: "training/Adam/mul_17_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9_1"
  op: "Assign"
  input: "training/Adam/Variable_3_1"
  input: "training/Adam/add_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_20_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4_1"
  op: "RealDiv"
  input: "training/Adam/mul_20_1"
  input: "training/Adam/add_12_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13_1"
  op: "Sub"
  input: "dense_1_1/kernel/read_1"
  input: "training/Adam/truediv_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_11_1"
  op: "Assign"
  input: "dense_1_1/kernel_1"
  input: "training/Adam/sub_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad_1"
  input: "dense_1_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/flatten_1/Reshape_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/dense_1_1/MatMul_grad/MatMul_2"
  input: "training/Adam/gradients/flatten_1/Reshape_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@flatten_1/Reshape_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/transpose_1_grad/transpose_1"
  op: "Transpose"
  input: "training/Adam/gradients/flatten_1/Reshape_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1_1/transpose_1_grad/InvertPermutation_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/transpose_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3_1"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3_1"
  input: "lstm_1_1/TensorArrayStack/range_1"
  input: "training/Adam/gradients/lstm_1_1/transpose_1_grad/transpose_1"
  input: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Exit_2_grad/b_exit_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad/b_switch_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/Exit_2_grad/b_exit_1"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad/b_switch_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_2_grad_1/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3_1"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch_1:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow_1"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch_1:1"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3_1"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Enter_2_grad/Exit_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_2_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Enter_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1_1/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1_1/Relu_grad/ReluGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2_1"
  op: "AddN"
  input: "training/Adam/gradients/dense_1_1/weight_regularizer_1/Square_grad/Mul_1_1"
  input: "training/Adam/gradients/dense_1_1/BiasAdd_grad/BiasAddGrad_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_4_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24_1"
  op: "Mul"
  input: "training/Adam/sub_15_1"
  input: "training/Adam/Square_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14_1"
  op: "Add"
  input: "training/Adam/mul_23_1"
  input: "training/Adam/mul_24_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_13_1"
  op: "Assign"
  input: "training/Adam/Variable_11_1"
  input: "training/Adam/add_14_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5_1"
  op: "ClipByValue"
  input: "training/Adam/add_14_1"
  input: "training/Adam/Const_10_1"
  input: "training/Adam/Const_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15_1"
  op: "Add"
  input: "training/Adam/Sqrt_5_1"
  input: "training/Adam/add_15/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22_1"
  op: "Mul"
  input: "training/Adam/sub_14_1"
  input: "training/Adam/gradients/AddN_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13_1"
  op: "Add"
  input: "training/Adam/mul_21_1"
  input: "training/Adam/mul_22_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12_1"
  op: "Assign"
  input: "training/Adam/Variable_4_1"
  input: "training/Adam/add_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_25_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_13_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5_1"
  op: "RealDiv"
  input: "training/Adam/mul_25_1"
  input: "training/Adam/add_15_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16_1"
  op: "Sub"
  input: "dense_1_1/bias/read_1"
  input: "training/Adam/truediv_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_14_1"
  op: "Assign"
  input: "dense_1_1/bias_1"
  input: "training/Adam/sub_16_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/output_1/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/output_1/Softmax_grad/mul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/output_1/weight_regularizer_1/Square_grad/Mul_1_1"
  input: "training/Adam/gradients/output_1/BiasAdd_grad/BiasAddGrad_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/weight_regularizer_1/Square_1"
      }
    }
  }
}
node {
  name: "training/Adam/Square_6_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34_1"
  op: "Mul"
  input: "training/Adam/sub_21_1"
  input: "training/Adam/Square_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20_1"
  op: "Add"
  input: "training/Adam/mul_33_1"
  input: "training/Adam/mul_34_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_19_1"
  op: "Assign"
  input: "training/Adam/Variable_13_1"
  input: "training/Adam/add_20_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7_1"
  op: "ClipByValue"
  input: "training/Adam/add_20_1"
  input: "training/Adam/Const_14_1"
  input: "training/Adam/Const_15_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21_1"
  op: "Add"
  input: "training/Adam/Sqrt_7_1"
  input: "training/Adam/add_21/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32_1"
  op: "Mul"
  input: "training/Adam/sub_20_1"
  input: "training/Adam/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19_1"
  op: "Add"
  input: "training/Adam/mul_31_1"
  input: "training/Adam/mul_32_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18_1"
  op: "Assign"
  input: "training/Adam/Variable_6_1"
  input: "training/Adam/add_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_35_1"
  op: "Mul"
  input: "training/Adam/mul_36"
  input: "training/Adam/add_19_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7_1"
  op: "RealDiv"
  input: "training/Adam/mul_35_1"
  input: "training/Adam/add_21_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22_1"
  op: "Sub"
  input: "output_1/bias/read_1"
  input: "training/Adam/truediv_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_20_1"
  op: "Assign"
  input: "output_1/bias_1"
  input: "training/Adam/sub_22_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "loss_1/output_loss/Mean_2_1"
  op: "Mean"
  input: "loss_1/output_loss/truediv_1"
  input: "loss_1/output_loss/Const_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss_1/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/Fill_1"
  input: "loss_1/output_loss/Mean_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss_1/mul_1"
      }
    }
  }
}
node {
  name: "loss_1/mul_1"
  op: "Mul"
  input: "loss_1/mul/x_1"
  input: "loss_1/output_loss/Mean_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_6"
  op: "Add"
  input: "loss_1/mul_1"
  input: "output_1/weight_regularizer/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_1_1"
  op: "Add"
  input: "loss_1/add_6"
  input: "lstm_1_1/weight_regularizer/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_2_1"
  op: "Add"
  input: "loss_1/add_1_1"
  input: "dense_1_1/weight_regularizer_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_3_1"
  op: "Add"
  input: "loss_1/add_2_1"
  input: "lstm_1_1/weight_regularizer_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_4_1"
  op: "Add"
  input: "loss_1/add_3_1"
  input: "output_1/weight_regularizer_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/add_5_1"
  op: "Add"
  input: "loss_1/add_4_1"
  input: "dense_1_1/weight_regularizer/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/group_deps_1"
  op: "NoOp"
  input: "^loss_1/add_5_1"
  input: "^metrics_1/acc/Mean_1"
  input: "^training/Adam/AssignAdd_1"
  input: "^training/Adam/Assign_10_1"
  input: "^training/Adam/Assign_11_1"
  input: "^training/Adam/Assign_12_1"
  input: "^training/Adam/Assign_13_1"
  input: "^training/Adam/Assign_14_1"
  input: "^training/Adam/Assign_15_1"
  input: "^training/Adam/Assign_16_1"
  input: "^training/Adam/Assign_17_1"
  input: "^training/Adam/Assign_18_1"
  input: "^training/Adam/Assign_19_1"
  input: "^training/Adam/Assign_1_1"
  input: "^training/Adam/Assign_20_1"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_2_1"
  input: "^training/Adam/Assign_3_1"
  input: "^training/Adam/Assign_4_1"
  input: "^training/Adam/Assign_5_1"
  input: "^training/Adam/Assign_6_1"
  input: "^training/Adam/Assign_7_1"
  input: "^training/Adam/Assign_8_1"
  input: "^training/Adam/Assign_9_1"
}
node {
  name: "lstm_1_1/while/Identity_2_1"
  op: "Identity"
  input: "lstm_1_1/while/Switch_2_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_1_input_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Sum_1"
  op: "Sum"
  input: "lstm_1_1/zeros_like_1"
  input: "lstm_1_1/Sum/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/ExpandDims_1"
  op: "ExpandDims"
  input: "lstm_1_1/Sum_1"
  input: "lstm_1_1/ExpandDims/dim_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/Tile_1_1"
  op: "Tile"
  input: "lstm_1_1/ExpandDims_1"
  input: "lstm_1_1/Tile_1/multiples_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_4_1"
  op: "Enter"
  input: "lstm_1_1/Tile_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_4_1"
  op: "Merge"
  input: "lstm_1_1/while/Enter_4_1"
  input: "lstm_1_1/while/NextIteration_4_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_4_1"
  op: "Switch"
  input: "lstm_1_1/while/Merge_4_1"
  input: "lstm_1_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_4_1"
  op: "Exit"
  input: "lstm_1_1/while/Switch_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2_1"
  op: "ZerosLike"
  input: "lstm_1_1/while/Exit_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Exit_4_grad/b_exit_1"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_4_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad/b_switch_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/Exit_4_grad/b_exit_1"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Merge_4_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad/b_switch_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Enter_4_grad/Exit_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_4_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Enter_4_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_4_1"
  op: "Identity"
  input: "lstm_1_1/while/Switch_4_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/Enter_1"
  input: "lstm_1_1/while/Identity_4_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/Identity_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/Tile_2"
  op: "Tile"
  input: "lstm_1_1/ExpandDims_1"
  input: "lstm_1_1/Tile/multiples_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1_1/while/Enter_3_1"
  op: "Enter"
  input: "lstm_1_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1_1/while/Merge_3_1"
  op: "Merge"
  input: "lstm_1_1/while/Enter_3_1"
  input: "lstm_1_1/while/NextIteration_3_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Switch_3_1"
  op: "Switch"
  input: "lstm_1_1/while/Merge_3_1"
  input: "lstm_1_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Exit_3_1"
  op: "Exit"
  input: "lstm_1_1/while/Switch_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1_1"
  op: "ZerosLike"
  input: "lstm_1_1/while/Exit_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Exit_3_grad/b_exit_1"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_3_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad/b_switch_1"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1_1/while/Exit_3_grad/b_exit_1"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Merge_3_grad/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad/b_switch_1"
  input: "training/Adam/gradients/b_count_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_3_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPopV2_1"
  input: "training/Adam/gradients/AddN_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Tanh_1_grad/TanhGrad_1"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_4_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/Tanh_1_grad/TanhGrad_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_5_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Tanh_grad/TanhGrad_1"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Tanh_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/Tanh_grad/TanhGrad_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_6_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/Tanh_grad/TanhGrad_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_2_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_2_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2_grad/BiasAddGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_2/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_2/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_3_1"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_3_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_2_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Greater_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_2_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_2_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_1_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_3"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/LogicalOr_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/zeros_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_3"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Select_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_3"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Sum_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_3"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Reshape_3"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1/Const_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_4_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_8"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_8"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_4"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_grad/BiasAddGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/AddN_5_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_4_grad_1/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_3_1"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_3_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_2_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Greater_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_2_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_2_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_1_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_3"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/LogicalOr_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/zeros_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_3"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Select_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_3"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Sum_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_3"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Reshape_3"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1/Const_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_5_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_1_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_1_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1_grad/BiasAddGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_1/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_1/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/AddN_4_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_3_1"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_3_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_2_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Greater_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_2_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_2_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_2_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_1_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_3"
  op: "Select"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/LogicalOr_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/zeros_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_3"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Select_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_3"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Sum_3"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_3"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Reshape_3"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1/Const_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum_1_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_1_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_6_grad/MatMul_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_5_grad/MatMul_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_4_grad/MatMul_2"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Switch_3_grad_1/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Merge_3_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPopV2_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_2"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_3_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Add_1"
  op: "Add"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Switch_1:1"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3_grad/BiasAddGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1_1/while/BiasAdd_3/Enter_grad/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/BiasAdd_3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_2"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Reshape_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum_2"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Reshape_2"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Sum_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/Enter_3_grad/Exit_1"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1_1/while/Merge_3_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Enter_3_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/Identity_3_1"
  op: "Identity"
  input: "lstm_1_1/while/Switch_3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/Enter_1"
  input: "lstm_1_1/while/Identity_3_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/MatMul_7_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_7_1"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3_1"
  input: "lstm_1_1/while/MatMul_7/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_7_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_7_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_7_1"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_3_1"
  input: "lstm_1_1/while/MatMul_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/Enter_1"
  input: "lstm_1_1/while/add_7_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/add_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_4_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_4_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/mul_4_1"
  op: "Mul"
  input: "lstm_1_1/while/mul_4/x_1"
  input: "lstm_1_1/while/add_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/mul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_8_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_8_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_8_1"
  op: "Add"
  input: "lstm_1_1/while/mul_4_1"
  input: "lstm_1_1/while/add_8/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/Enter_1"
  input: "lstm_1_1/while/add_8_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_4"
  op: "Shape"
  input: "lstm_1_1/while/add_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Shape_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/clip_by_value_2_1"
  op: "ClipByValue"
  input: "lstm_1_1/while/add_8_1"
  input: "lstm_1_1/while/Const_4_1"
  input: "lstm_1_1/while/Const_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/Enter_1"
  input: "lstm_1_1/while/clip_by_value_2_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/clip_by_value_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_6_1"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3_1"
  input: "lstm_1_1/while/MatMul_6/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_5_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_5_1"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_2_1"
  input: "lstm_1_1/while/MatMul_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Tanh_2"
  op: "Tanh"
  input: "lstm_1_1/while/add_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/Enter_1"
  input: "lstm_1_1/while/Tanh_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_5_1"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3_1"
  input: "lstm_1_1/while/MatMul_5/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_3_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_3_1"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_1_1"
  input: "lstm_1_1/while/MatMul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/Enter_1"
  input: "lstm_1_1/while/add_3_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/add_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_1_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_1_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/mul_1_1"
  op: "Mul"
  input: "lstm_1_1/while/mul_1/x_1"
  input: "lstm_1_1/while/add_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/mul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_4_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_4_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_4_1"
  op: "Add"
  input: "lstm_1_1/while/mul_1_1"
  input: "lstm_1_1/while/add_4/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/Enter_1"
  input: "lstm_1_1/while/add_4_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_4"
  op: "Shape"
  input: "lstm_1_1/while/add_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Shape_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_1_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/clip_by_value_1_1"
  op: "ClipByValue"
  input: "lstm_1_1/while/add_4_1"
  input: "lstm_1_1/while/Const_2_1"
  input: "lstm_1_1/while/Const_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/Enter_1"
  input: "lstm_1_1/while/clip_by_value_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/clip_by_value_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_2_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/mul_2_1"
  op: "Mul"
  input: "lstm_1_1/while/clip_by_value_1_1"
  input: "lstm_1_1/while/Identity_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/mul_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/MatMul_4_1"
  op: "MatMul"
  input: "lstm_1_1/while/Identity_3_1"
  input: "lstm_1_1/while/MatMul_4/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/MatMul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_1_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_1_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_1_1"
  op: "Add"
  input: "lstm_1_1/while/BiasAdd_4"
  input: "lstm_1_1/while/MatMul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/Enter_1"
  input: "lstm_1_1/while/add_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/add_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/mul_6"
  op: "Mul"
  input: "lstm_1_1/while/mul/x_1"
  input: "lstm_1_1/while/add_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_2_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_2_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_2_1"
  op: "Add"
  input: "lstm_1_1/while/mul_6"
  input: "lstm_1_1/while/add_2/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/Enter_1"
  input: "lstm_1_1/while/add_2_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_4"
  op: "Shape"
  input: "lstm_1_1/while/add_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Shape_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/clip_by_value_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/clip_by_value_3"
  op: "ClipByValue"
  input: "lstm_1_1/while/add_2_1"
  input: "lstm_1_1/while/Const_6"
  input: "lstm_1_1/while/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/Enter_1"
  input: "lstm_1_1/while/clip_by_value_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape_2"
  op: "Shape"
  input: "lstm_1_1/while/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/Enter_2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_3_grad/Shape_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_3_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/mul_3_1"
  op: "Mul"
  input: "lstm_1_1/while/clip_by_value_3"
  input: "lstm_1_1/while/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/mul_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/add_6_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/add_6_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1_1/while/add_6_1"
  op: "Add"
  input: "lstm_1_1/while/mul_2_1"
  input: "lstm_1_1/while/mul_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_4_1"
  op: "NextIteration"
  input: "lstm_1_1/while/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/Tanh_1_1"
  op: "Tanh"
  input: "lstm_1_1/while/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/Enter_1"
  input: "lstm_1_1/while/Tanh_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape_1_1"
  op: "Shape"
  input: "lstm_1_1/while/Tanh_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1_1"
  input: "training/Adam/gradients/lstm_1_1/while/mul_5_grad/Shape_1_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_3_grad/MatMul_1/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/MatMul_7_grad/MatMul_1/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_1_grad/Less/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_2_grad/Less/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/clip_by_value_grad/Less/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_1_grad/Mul/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_2_grad/Mul_1/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_3_grad/Mul_1/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_4_grad/Mul/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_2"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_5_grad/Mul_1/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1_1/while/mul_grad/Mul/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/Exit_2_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/mul_5_1"
  op: "Mul"
  input: "lstm_1_1/while/clip_by_value_2_1"
  input: "lstm_1_1/while/Tanh_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_3_1"
  op: "NextIteration"
  input: "lstm_1_1/while/mul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_1"
  op: "TensorArrayWriteV3"
  input: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
  input: "lstm_1_1/while/Identity_1_1"
  input: "lstm_1_1/while/mul_5_1"
  input: "lstm_1_1/while/Identity_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "lstm_1_1/while/NextIteration_2_1"
  op: "NextIteration"
  input: "lstm_1_1/while/TensorArrayWrite/TensorArrayWriteV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_7_1"
  op: "MatMul"
  input: "lstm_1_1/Tile_2"
  input: "lstm_1_1/strided_slice_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_6_1"
  op: "Add"
  input: "lstm_1_1/BiasAdd_3_1"
  input: "lstm_1_1/MatMul_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_4_1"
  op: "Mul"
  input: "lstm_1_1/mul_4/x_1"
  input: "lstm_1_1/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_7_1"
  op: "Add"
  input: "lstm_1_1/mul_4_1"
  input: "lstm_1_1/add_7/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/clip_by_value_2_1"
  op: "ClipByValue"
  input: "lstm_1_1/add_7_1"
  input: "lstm_1_1/Const_7_1"
  input: "lstm_1_1/Const_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_6_1"
  op: "MatMul"
  input: "lstm_1_1/Tile_2"
  input: "lstm_1_1/strided_slice_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_4_1"
  op: "Add"
  input: "lstm_1_1/BiasAdd_2_1"
  input: "lstm_1_1/MatMul_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Tanh_2"
  op: "Tanh"
  input: "lstm_1_1/add_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_5_1"
  op: "MatMul"
  input: "lstm_1_1/Tile_2"
  input: "lstm_1_1/strided_slice_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_2_1"
  op: "Add"
  input: "lstm_1_1/BiasAdd_1_1"
  input: "lstm_1_1/MatMul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_1_1"
  op: "Mul"
  input: "lstm_1_1/mul_1/x_1"
  input: "lstm_1_1/add_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_3_1"
  op: "Add"
  input: "lstm_1_1/mul_1_1"
  input: "lstm_1_1/add_3/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/clip_by_value_1_1"
  op: "ClipByValue"
  input: "lstm_1_1/add_3_1"
  input: "lstm_1_1/Const_5_1"
  input: "lstm_1_1/Const_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_2_1"
  op: "Mul"
  input: "lstm_1_1/clip_by_value_1_1"
  input: "lstm_1_1/Tile_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/MatMul_4_1"
  op: "MatMul"
  input: "lstm_1_1/Tile_2"
  input: "lstm_1_1/strided_slice_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1_1/add_8"
  op: "Add"
  input: "lstm_1_1/BiasAdd_4"
  input: "lstm_1_1/MatMul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_6"
  op: "Mul"
  input: "lstm_1_1/mul/x_1"
  input: "lstm_1_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_1_1"
  op: "Add"
  input: "lstm_1_1/mul_6"
  input: "lstm_1_1/add_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/clip_by_value_3"
  op: "ClipByValue"
  input: "lstm_1_1/add_1_1"
  input: "lstm_1_1/Const_3_1"
  input: "lstm_1_1/Const_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_3_1"
  op: "Mul"
  input: "lstm_1_1/clip_by_value_3"
  input: "lstm_1_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/add_5_1"
  op: "Add"
  input: "lstm_1_1/mul_2_1"
  input: "lstm_1_1/mul_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/Tanh_1_1"
  op: "Tanh"
  input: "lstm_1_1/add_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1_1/mul_5_1"
  op: "Mul"
  input: "lstm_1_1/clip_by_value_2_1"
  input: "lstm_1_1/Tanh_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/Max/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/output_loss/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/output_loss/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/output_loss/NotEqual/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/output_loss/Reshape_1/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\007\000\000\000"
      }
    }
  }
}
node {
  name: "loss/output_loss/Reshape/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/output_loss/sub/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/output_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/output_loss/sub_1"
  op: "Sub"
  input: "loss/output_loss/sub/x_1"
  input: "loss/output_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_sample_weights_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/output_loss/NotEqual_1"
  op: "NotEqual"
  input: "output_sample_weights_2"
  input: "loss/output_loss/NotEqual/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Cast_1_1"
  op: "Cast"
  input: "loss/output_loss/NotEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/output_loss/Mean_1_1"
  op: "Mean"
  input: "loss/output_loss/Cast_1_1"
  input: "loss/output_loss/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output_target_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "metrics/acc/Max_1"
  op: "Max"
  input: "output_target_2"
  input: "metrics/acc/Max/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/Reshape_2"
  op: "Reshape"
  input: "output_target_2"
  input: "loss/output_loss/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/output_loss/Cast_2"
  op: "Cast"
  input: "loss/output_loss/Reshape_2"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/SparseSoftmaxCrossEntropyWithLogits/Shape_1"
  op: "Shape"
  input: "loss/output_loss/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/decay_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_11_1"
  op: "IsVariableInitialized"
  input: "Adam/decay_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/decay/read_1"
  op: "Identity"
  input: "Adam/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay_1"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay/Assign_1"
  op: "Assign"
  input: "Adam/decay_1"
  input: "Adam/decay/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_10_1"
  op: "IsVariableInitialized"
  input: "Adam/beta_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_2/read_1"
  op: "Identity"
  input: "Adam/beta_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "Adam/beta_2/Assign_1"
  op: "Assign"
  input: "Adam/beta_2_1"
  input: "Adam/beta_2/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_9_1"
  op: "IsVariableInitialized"
  input: "Adam/beta_1_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_1/read_1"
  op: "Identity"
  input: "Adam/beta_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1_1"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "Adam/beta_1/Assign_1"
  op: "Assign"
  input: "Adam/beta_1_1"
  input: "Adam/beta_1/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_8_1"
  op: "IsVariableInitialized"
  input: "Adam/lr_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/lr/read_1"
  op: "Identity"
  input: "Adam/lr_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr_1"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "Adam/lr/Assign_1"
  op: "Assign"
  input: "Adam/lr_1"
  input: "Adam/lr/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_7_1"
  op: "IsVariableInitialized"
  input: "Adam/iterations_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Adam/iterations/read_1"
  op: "Identity"
  input: "Adam/iterations_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations_1"
      }
    }
  }
}
node {
  name: "Adam/iterations/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations/Assign_1"
  op: "Assign"
  input: "Adam/iterations_1"
  input: "Adam/iterations/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output/weight_regularizer_1/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "output/bias_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_6_1"
  op: "IsVariableInitialized"
  input: "output/bias_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/bias/read_1"
  op: "Identity"
  input: "output/bias_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias_1"
      }
    }
  }
}
node {
  name: "output/weight_regularizer_1/Square_1"
  op: "Square"
  input: "output/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer_1/mul_1"
  op: "Mul"
  input: "output/weight_regularizer_1/mul/x_1"
  input: "output/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer_1/Sum_1"
  op: "Sum"
  input: "output/weight_regularizer_1/mul_1"
  input: "output/weight_regularizer_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output/weight_regularizer_1/add_1"
  op: "Add"
  input: "output/weight_regularizer_1/add/x_1"
  input: "output/weight_regularizer_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/bias/Assign_1"
  op: "Assign"
  input: "output/bias_1"
  input: "output/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output/weight_regularizer/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/weight_regularizer/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "output/weight_regularizer/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "output/kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_5_1"
  op: "IsVariableInitialized"
  input: "output/kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/kernel/read_1"
  op: "Identity"
  input: "output/kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel_1"
      }
    }
  }
}
node {
  name: "output/weight_regularizer/Square_1"
  op: "Square"
  input: "output/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer/mul_1"
  op: "Mul"
  input: "output/weight_regularizer/mul/x_1"
  input: "output/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/weight_regularizer/Sum_1"
  op: "Sum"
  input: "output/weight_regularizer/mul_1"
  input: "output/weight_regularizer/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "output/weight_regularizer/add_1"
  op: "Add"
  input: "output/weight_regularizer/add/x_1"
  input: "output/weight_regularizer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform/max_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.29070094
      }
    }
  }
}
node {
  name: "output/random_uniform/min_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.29070094
      }
    }
  }
}
node {
  name: "output/random_uniform/sub_1"
  op: "Sub"
  input: "output/random_uniform/max_1"
  input: "output/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "output/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "output/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1665575
    }
  }
}
node {
  name: "output/random_uniform/mul_1"
  op: "Mul"
  input: "output/random_uniform/RandomUniform_1"
  input: "output/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform_1"
  op: "Add"
  input: "output/random_uniform/mul_1"
  input: "output/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/kernel/Assign_1"
  op: "Assign"
  input: "output/kernel_1"
  input: "output/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "dense_1/bias_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_4_1"
  op: "IsVariableInitialized"
  input: "dense_1/bias_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/read_1"
  op: "Identity"
  input: "dense_1/bias_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias_1"
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/Square_1"
  op: "Square"
  input: "dense_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/mul_1"
  op: "Mul"
  input: "dense_1/weight_regularizer_1/mul/x_1"
  input: "dense_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/Sum_1"
  op: "Sum"
  input: "dense_1/weight_regularizer_1/mul_1"
  input: "dense_1/weight_regularizer_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/weight_regularizer_1/add_1"
  op: "Add"
  input: "dense_1/weight_regularizer_1/add/x_1"
  input: "dense_1/weight_regularizer_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Assign_1"
  op: "Assign"
  input: "dense_1/bias_1"
  input: "dense_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/weight_regularizer/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "dense_1/kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3200
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_3_1"
  op: "IsVariableInitialized"
  input: "dense_1/kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/read_1"
  op: "Identity"
  input: "dense_1/kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel_1"
      }
    }
  }
}
node {
  name: "dense_1/weight_regularizer/Square_1"
  op: "Square"
  input: "dense_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer/mul_1"
  op: "Mul"
  input: "dense_1/weight_regularizer/mul/x_1"
  input: "dense_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/weight_regularizer/Sum_1"
  op: "Sum"
  input: "dense_1/weight_regularizer/mul_1"
  input: "dense_1/weight_regularizer/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/weight_regularizer/add_1"
  op: "Add"
  input: "dense_1/weight_regularizer/add/x_1"
  input: "dense_1/weight_regularizer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/max_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.042874645
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.042874645
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/sub_1"
  op: "Sub"
  input: "dense_1/random_uniform/max_1"
  input: "dense_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\014\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3329045
    }
  }
}
node {
  name: "dense_1/random_uniform/mul_1"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform_1"
  input: "dense_1/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform_1"
  op: "Add"
  input: "dense_1/random_uniform/mul_1"
  input: "dense_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/Assign_1"
  op: "Assign"
  input: "dense_1/kernel_1"
  input: "dense_1/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "flatten/stack/0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flatten/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/sub/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/iteration_counter_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter_5"
  op: "Enter"
  input: "lstm_1/while/iteration_counter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge_5"
  op: "Merge"
  input: "lstm_1/while/Enter_5"
  input: "lstm_1/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/maximum_iterations_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter_1"
  op: "Enter"
  input: "lstm_1/while/maximum_iterations_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less_2"
  op: "Less"
  input: "lstm_1/while/Merge_5"
  input: "lstm_1/while/Less/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter_1_1"
  op: "Enter"
  input: "lstm_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1_1"
  input: "lstm_1/while/NextIteration_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_7_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/add_7/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/mul_4/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/Const_6_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_5_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/add_3/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/mul_1/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/Const_4_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_3_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/add_1/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/transpose/perm_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile/multiples_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "lstm_1/bias_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_2_1"
  op: "IsVariableInitialized"
  input: "lstm_1/bias_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/bias/read_1"
  op: "Identity"
  input: "lstm_1/bias_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias_1"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11_1"
  op: "StridedSlice"
  input: "lstm_1/bias/read_1"
  input: "lstm_1/strided_slice_11/stack_3"
  input: "lstm_1/strided_slice_11/stack_1_1"
  input: "lstm_1/strided_slice_11/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_10_1"
  op: "StridedSlice"
  input: "lstm_1/bias/read_1"
  input: "lstm_1/strided_slice_10/stack_3"
  input: "lstm_1/strided_slice_10/stack_1_1"
  input: "lstm_1/strided_slice_10/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_9_1"
  op: "StridedSlice"
  input: "lstm_1/bias/read_1"
  input: "lstm_1/strided_slice_9/stack_3"
  input: "lstm_1/strided_slice_9/stack_1_1"
  input: "lstm_1/strided_slice_9/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_8_1"
  op: "StridedSlice"
  input: "lstm_1/bias/read_1"
  input: "lstm_1/strided_slice_8/stack_3"
  input: "lstm_1/strided_slice_8/stack_1_1"
  input: "lstm_1/strided_slice_8/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/Square_1"
  op: "Square"
  input: "lstm_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/mul_1"
  op: "Mul"
  input: "lstm_1/weight_regularizer_1/mul/x_1"
  input: "lstm_1/weight_regularizer_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/Sum_1"
  op: "Sum"
  input: "lstm_1/weight_regularizer_1/mul_1"
  input: "lstm_1/weight_regularizer_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/weight_regularizer_1/add_1"
  op: "Add"
  input: "lstm_1/weight_regularizer_1/add/x_1"
  input: "lstm_1/weight_regularizer_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/concat/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat_1"
  op: "ConcatV2"
  input: "lstm_1/Const_9"
  input: "lstm_1/Const_1_1"
  input: "lstm_1/Const_2_1"
  input: "lstm_1/concat/axis_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias/Assign_1"
  op: "Assign"
  input: "lstm_1/bias_1"
  input: "lstm_1/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_1_1"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read_1"
  op: "Identity"
  input: "lstm_1/recurrent_kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel_1"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7_1"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read_1"
  input: "lstm_1/strided_slice_7/stack_3"
  input: "lstm_1/strided_slice_7/stack_1_1"
  input: "lstm_1/strided_slice_7/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_6_1"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read_1"
  input: "lstm_1/strided_slice_6/stack_3"
  input: "lstm_1/strided_slice_6/stack_1_1"
  input: "lstm_1/strided_slice_6/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_5_1"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read_1"
  input: "lstm_1/strided_slice_5/stack_3"
  input: "lstm_1/strided_slice_5/stack_1_1"
  input: "lstm_1/strided_slice_5/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_4_1"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read_1"
  input: "lstm_1/strided_slice_4/stack_3"
  input: "lstm_1/strided_slice_4/stack_1_1"
  input: "lstm_1/strided_slice_4/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\3440\367\275\034\335\273\275l\253C\275\237\351{=\356Gw=m\332\265\275\251\331\010\276\032\271\023\275\277\004\\<\337\240\024>\232\322\003<O\302}=\337\234\323\275p\206\324=%\370\373;\300,U=\227\344u=\320\324\177\275\315\021\230;\370\254\"\276\345\306M>\365\344\007;\034\317\351\275\277\331\254\275\232b\230=4Z\310<wo?\275\361\235*=\310\217\\>#gC>!\310!=N\305\325=C\351\004<\007ZY=\331\365\351<\205\255\366;\376\2742=\341\235\336\275\367=\224\273\n3\326=a1\257\275\006\333\033\275\300\243\">X\317@>\272T\360:n\006\261<\327\3471\274c\227\330=\r\017\r<\031b3=\331\315\260\274x\345\373\275^\303\245\275\250\231\343=g\240\004= Q>=F\372\003\275DB\236<\\\023\345==\355f=g\027\316=\022\217f\275\312 \007\276+\277\007\274\363\363\305\275\342\234\216=\236\272\375\274\361\300\203=\354\r\341\274\222\357\247<f\303A<\342\364Z>\204\013\014\276\220\177\351\275\357\003\226\272t\254\277\275i~.=\314\321/\275\331\325\367\275+5\006\275#\232-\276K\347\221\275\177\257\260=ox\214\274[\2231=\337\253\212\274\215\231\325<iP3<\n\036\247\274\r\302\n\275%5m=\312\364\204\274\356\364!>\023\257Q>\236K\217=\226\353\030<\347\215P\275\030\014`\275\331\3238<#\343\227\275\365\3002>;\336\260=G\332\273=\260\303\033\276\322\307!\276\252\263\207\275\010\177}=\225\351\367\274\340\025\344\275\334\307S\273\232\000\301=Kc\346=\212\010\324\275\216\276\355=\311bT=\363\024\027=\2546\267</,\273\275\231\240M=#\022\317;\200\320\214=44\333\275\325!&\273\300\013\330\275\240M\277\275T\340\215\2752\203x\273\321c\t>\347\275\232<\177G\265<B\016V\275d\373\363<\025_\032=\004\377\244\275z\254?\276\344(\366;V\007\317\274\371T\210=\2001\002\2767\3504\275}1+\274\334dA>\2562q\276\001\324!\276\261\260\201\275!`V\274\250;J\275pZ\237\275\2323l\275W\323\333=\211\025\273=\200>\317=\271\226\363=\315\254\033\275\037\002(\276\2079E=\002\301f>\016\205.\276\351`0\275y\267\204\275H\303\312<T\305\225\275\232\3652\276\372\356\233\275\036\322\t=\317\t1;\233\274\253=U\333\243=\305(\307<\315T\254=\"\250r=\241\272\017\275\271\207\313\274\317\272\033\276V\022\n\275\320^\311\274\356y6\275%\373\007\275X2\373=\036cN\274;m\305\273.\215\247=\036{\316=_\323\231\2757\267\200\274\364\355\343=f\321H\276\373\031r\275~w2\274c\323\235=S\350\027=\315*\235\275L\346\351=9B\022\275\233j\322\275\261\2030=\235x\303=$xr\275\316\276\354;B\271\231\275\343\004\277;\217\352C\275\314Y\361\275\254\370]>\2531L=\3647@<t%\306=\215\276\341<\221~B<$@\016\276Y\220s\275J=\242=]\177L\275#aZ>s\017\212=ED\253\275\250\316\013>\315\221\347=|&\270\2740\365\317\274\367:@\275\237\242\354<K\304\022=\021\231\207\274\217\226\376<\227^%\275\017\311\r>\246\300\230\275}#\333\274|\007\206<&h\215=\345\231`=\306\270\234\275e\275\255\273\006p\305=\032H9>1\254A<c\265\227=p(\276==\364\234=\307\022q;\031\027R\274\364J\024>\001\333]=@\216\315<\274\325\361\275k0\013<7\2427=\260nP=w/\346=\355[c<\020\r2<h1\327\275\237\001\242=Fe\266\275ze\203\274)\343&\275fEm\275V\276\253\274\242\237\220\274?t\223<>&\022\276E\000\256\275I\377\216\275\311\213\t\276\207\210\224\275\225\023\035\276\337R\372\274\257uQ=\250\224C=J.~\274\240\030\">0\257\360\275\375\227\227<\250\267\356\2747\032\016\273\314\373\325=\000\306\311\275\271\256y=\035\254\023=\372N\214\2750\'\332\275\007\330\263\275\211\246\357\275\024\202\003>\272v\266;m\320\320=\315g\305\275\257\003\376\274em\261=\330j\225=\244\320\007>\022\303e\275E\273\037\275L\260h=D\241\355;\220Lc=\216\t\255\274G\311\311<\343\014\216\275\331dt\2734B\243;\307 D\276\3168\335\275d\202\321;\r\245\r=7\366\013>\300x\305<\253w\216\274\377\360\356=\336@V\276(\266}><\224\020>p\3333\275\265\251\203<\005\301*=\177}\372<\007\324\016>\001\272\222\274z9\210\274*4\311\274\216\002\313<\364\263\274=kU\020\276\303\034\001\276\002X\243=\327\330a<I=\337\275/\250;=2Ll\274\177\332\276\275\026d\231=\340\264\241=\354\217\307=\023\010o\2758\3741=q\013\346\274\222\t\220\275*\355\035\275J52>fg\241\275\034\344k\274\273\203\213\274~\360\202<9NV\275_\272\275\275\\\264#\276;\217\007\276\301\273\327\274\022\264L=Uce=\365\343\023\275\306 Q\276\2665}<M\340\322\2757\376\233\275`Ck<\361\361S\275|\032,\275\355\271\230;zK\314\274\010\212 \276\211\264\227\274b\036\301\275\020\247@\274f\373(\276q\346\321\274\1778\\\275\033\372\311=\342T\210\275\204K\260\275\222\"\014\276\360\3149=K(\324<\267\177;<\303&\246\275\277&\\>\021R`=\025^\314=QF\235\271\210\247n\275\342)\272=\217\260\010>\374\036\354\275\204vc<\243\2029\275\262\022\327\275\244\221C=\214)k\272\310!\202=V+\242=B\013\205=Gp\035\275\360\212\030>\236\207\212\274E\355\300\275\215\331\331<a0X=5\264N<V\260\253\275\016\356\005=\023\001\227\275\310\036\014>5\257S\275\365\277\215=\3254\212=\352\233\246\274\223\214\024=s)\003<\2740P=@x\276=\"\223$\276\037\2212=N9\224=\323\366\240=\367\315\350<\236y\277<=\327\245\275\240\316\025=wD\000\276\224*\036\276J\345\265;n\256&\276\0273\035=l\301\004>iez\2751n\356\274P\266\247=\027\036\235=\266\343a\275\357\232-\276n\253-\276Q\300\016=\257\001-\276\242\346==\344\225\016=\261\000 \275A\r\323\274e\360\372=\257\366\361<I0\267<\021/\007\276\355\344\220<\333\350\351\273\366\343\232<\0204\276\274P\370\313\275\232\255\033=}\204;;\372\200\250\275\276ii\276\2372\337=\002\276S>\317a\205\276\225\016\221=H\220\361<\360\324u\274\217\213\026\274\355L\253\274\223\357\3159%j\233=\005\004t\275\000\276\300<\001yB>\325\375 >\274S\340=\017\330\330\274\033\230/<M\247\306\275\216\353\325\274$\235v\275\356\345\\=;\223\354\275\262\277\344\275T\310\240\273j\024\203\275\203\352\362\275\353\273F=~\367\206\275ay\214\275|\247\247\274O\376\246\274\320.\374<\317\3719\275\272;\025\276\001\301\337<v/\017\274\320\216\017=\312r\303=\024\206\301\275:`/>\350J\272\275\301{\261=5Y(\276\\\237\002\275\263\034\303=\006\246\204<\214\"\200\275X\035\300\274>\235\366\274)mH>@\272\311\275^a,\275\235\261-=q\263E\274\020\364\306\275\274]o=\022\224\252\274$\233\032=o\215\024\276#~\006>\365\345W=\000\252\\:\367\007\027\276\310K\203\2751k\217\275YJ\241<\221\t)>\243\231\025\276\250\033\313\275\024%C>,\234\253\274S\322\364\274b\034Y=\366\233\344\274\232^A<\250\301\230;m\317\201=r\220\013\276\246\260?\276\244\266\203\276\236\243\242=\212\3034=\372\213m\275oC#<\216f\177\274N\242\235;\025\357\375=\345\322B\275\r4\367\275\340\247\247;h\257\006<\3479\225<%\210\260=\211w\317\275vXG\275\350\253(>\300\n\261=\303&\325\274qs\316\275\004w9=\303\223Y\275\001\260\026\275\377\002\225=\275\215`<\243\016\223\274`\021\230\275\332\306\226\275\204\321\004\271=`\244\273\025\300\023\275\234Y\237=\364\"\223=E\213:\275\355\230\210=\255`^\275;\2650=\276n\034<\037T \276\311\303\020\275\276\001\256=IR\203>\275\263h\275i\022\214<\016g\277\275B\322\002\276Ud\277=\331\251\220\273\202\375\252<\326\306\335\275r;\356<sE\223\275@Q9\2756\366K<R\363\033<\247\210\345=\007\372\232<|\005\321;L`x=\"\215\016\275\023\367\025\276\250\372\231<S\013\343=\\\267[\275\030k\314\274\3767%\2752\270\343=`\016$>9<\233\275G\311R=\037,)>\254V\002>\005\303\034\275\023\274\020\275;\367\346<\037\007\376\275 \234\211:\221\301\232=<\037\3729Z\305\327\2759@x\275\201@G=[\031a\275I\303\004>\276\010\014=>\001\243=\354\016H\275\266\227y\275\256Z\215=S\020@>\237\207\316=+M\202\275\r\315\346\275\234\213\302<\344\300\352=\257\\\275=x9\356\275h\016\372\275\006Q-=S_x\274\"\251;\276v\340\006<\233\265\322\275\251Ge\275\342\2578=\245bE;N\205\375=\264\304\375\274\343\357\364\273D\366\036>i\223\032=\245;\207=\273\030s\275\nA:\276g\\\250\273\247\016\271=&|\226\275\332\252\211=\305\341\237\275b)\037</\002\212<*\000p=)\221i\275\266\030-\275\265\231(=\022ap\274\306x\032\275M\212\237\275\307\264\"=fI\006\276\240\231\004\276\221\243\226=\234h\226\275\204\275\022<\375\316/\275\2673\326\275\357\275\r\276jg\000\276\305\231\305<\031)\001=\227\225\203\274\344\323\234\275\210}O<\350\340\211\275!T\326<\274\220Z\275\223\377\030>\313\354A<\303]u=3\230\035\273\321\226\034>\233\272\260\275\216\0165>\331E\006=\362,\010\275Se\007\276j\024\271< n\275=\204\030\240\275dj \276\337\351\216<7\036\362=\323\317a=Z\264a\275\202\262\210\274?\315\255\275\333s\010>\262\3740\276\031\320\242=8\206\245\274B\322z=\312\324\315\275\204\367I\275dC\204\276e\367/>;\200\203\275@OQ>y\342\030\276\365\356\"\275:\023\262\275y.\000>\317\311P>\037\227\016\274V\232k=\215\024\304:d6\323\274\337\330F=\263\320\357=\000A\224=\371\352\"=:\203\303\275\245i\031\276#q\342=m_\002\274\177a#>\003\023\221\275(\250E=\204\023I\275\206\250\324\275<\016l\275\344\365\253=\322\352\354\275o\231\211=<|\t\2752\313\241=~i%=\263\320\234\275yT5=\316\310\007>\334\nS;\036\360\033\276y\361c\275{\221\323\275\237\016\344=\270+\244=\251\366\221\275\217Or:\366Fo=\002\320\325\275v\'\271<\356`\211\275\345\0201\275w\367\254\274@\254Z\275\2657\233<\262\342\373=g\025[\275\224\212m=\224\225\247=TV!\275}\026\227\274\221R\017\276\237\021\211\273\007Z/\2750;\267=wQ\244\274)\321Q\274\225@f\275Y\222\345<HA|=\2403\221=\257!\037\274RP`=q\204o\275\215\214\263<\257j\317\275S\272\256=\034\376==@\213b:\007\177-\275@\355\010>Ml\301\274;u\260\274\242\2233\275\350\367x:\251\356\332\274\313\344\036\275\303\357Z\275\306\001Z\274^\212&=a\344\002>k\306\\<\216\351\272;\331}\222\275\306\003\006>\247\221e\275\231\220g=n$\323\275x]B\275\205\0364\274\376\336\311=\2471\267\275\243!\225>\270\320!\276<\227X\2750\026\367\275\363\020\017>w\025\310\275\023e\211\274J\255\244=\213\271\211=\321\370\022\276\022\210)\2733R\205<\232\037\321\273\3339\214=\177d\344<wi\350;\020-\276\274\257\312\227=K5\034=\2055\205=\243l\006\275\000[\266<\235\026\270;\340\033K=\241\355\277\274\2465\236=Cwx=ls\014;\277q\006;(0\334\275\343 N<\255{\242\274\366\232=\275\266\300\017\276\203\230\240\274\335D3=\2116Q\274\013w\'\276\336\341\274<\035\033\377\274\307\207*<\213\231\333\275Vg==\004\037C<\334\344\304=\351\377\264\275i\343\347\274\271h\347=o\023\232\275\372\310\026=Wf\010>O\333\014=\204\270\\=\332\310\320=\tB\225\275\204\256\"\276\257\353`>7gV\275\257\366I>\324)\317;\271E\315\275#=\033\276`e-<\022\243\227;\021\361\372=e\356`\276\\\371\262<eLs=\204\355\264=\250\022\345\2754\232[;|#\331=f\273Q<;\314\360\275\223\3109=U=\003=\2516\023>\311\334F\273\177\261N=\367\362N\276W\"z<b\364\223<UV\266\275\245\325\203\275\212\275\005;Yu,=\032\304\212;\020\304\312\275J\252\261=\321N\206>\332f\322<\014 \'\275\356Q\031=\377\274i>6\345\246\2751q\002=\025F\350=\365\340\\=<l\265<\304\022\315=j\212=\274\203\253\317\275\377\354Q\275\355\313]=P>\327=H@9\276%\274.\276\262\367;>\237h\270<\223\255\004>\342\245\271\275\204W\264\274u\310!;\177\272\353\274`jo\275+kg=P\020\301\273\224\317\214=\200Y\330<\007\266\205=\005\251\222=!Lm=5\202\240<t>G>Aj\216\274Xb7\2751G\307\275lF\037=>o\364<4R\037=\242\2210\275C\262\014\276\340\324;\274mK\035>d\367\365\275\254O1>F\244\320=\352d\305<B\211?\276l\205\312=\025\213\354\2733\351\237\275\001\3537\271\205\252\320;,\261\025\275\355\244\024>a\237\355=*cd\275\2774\331=\003@\265\275\267\253\305=o\311\226=\\\t\216\273`\307\255=\317N\236=\367\016\257\275c\177\213\275\200\245\213\275\2402\013=M1m\276\024#\005>\310\233\215\274)&\254=\233\246\000\275\261\2366\275\277\305\254\275M\3316>\026X\365<9\265\344=\262$\314\275g\0163\276A\026W=6x\351<\322\007\032>\351\014\223\274\006\234\320:?\272\271<\226\014\272=?\265@\276\006 \032\275OP\304=\n\341\204=\304u\231\275\\\031\031\275C\220\031\276\267\023s\275C\357\320\275\330v\336\275\016H(=\360``=\233\013\r\275\355\313O\275\225HA\275\016\"\237\274>\357\275<N\031\221\273s\366\036>\034_\212<P\324\305=\337\353\000>\350\030\007\275\332\375)=M\230u\275eM%\274\372\214\262=(=\357<\t\036\341<hl\311<5J_=\251\010,=\312\253\004\276\026\013\307<\373\376\371=\356\304\227=\355\255K\273H \311=\200p\222\275\246\235\327\271\375\3022\275v9`=\033y\035>\254\210\230=^\332\262;\237s\252\275\371\301\342<\377)\266<\226p\022=n\025\337\275\005\"\215\275\242\254\331\274\236\365\356=\032\264\\=\207\021b=\367\250\003\276\216\276\261\275\344\2242=\202\021\262\274xi4=@\366==\211s\261=\2545\345<\236\370\026=^\331\277=\371\346.\275\034\324d=\223e\205=\354X\022=X.->\233g9>\313\331k\275\006\227N\275K\301\220=m\226\263\275V\371\032\276\014\3016=\255\251\202>\034\326k\275\034\216\337\275\377.,>B| >\005M\037=\317\255<\276hf5<\255\274\242=\311\215\232;}x\311\273v\036\315\275\006c\264\274\252\377\362=\244\267\267\275q5\341<I\001\000>\3354\334=}2\300\274\257~\020=\233r\234\275\251\020\210\274j\034a=\362\364\004\276\307%$\2763?\220\275\316?\232<\377\254;>m\304*=J\251\325<\034cQ=\345\260[<zG\275=\037\230\341\274_\364\305=1\037\211<\036\214\364\275.L,>$\014\320\275\030\031\262\275\277}\260\274\262&\323\274\326\031\356=xP\230\274\264\311^={:\223\272\323\375\355\275A\221#\275\001\202C\276[m\363\275\210\3374\275\006\222\275\274i\226\272\275\277}\207=\\\371R\275H`X\275U%\t=\254E\240=\256R\242\275\231\210\367=x\027)\275*\256q<\037\217&>1\237\027\275\355\254\022\275\206\272\311<\232~\203;\345n\265\275\023\017m\275C\241\344;-\342?\275\307|\203>\375\002j\275\203\354\020>\213\271\254\274\\\274\032<\341v\320\274\204\273\267=\310#@\275\\\375b\2745h\031>\2230?=\316P\247\274\023\212\224\275*\326\233\274\366B\212\274\316\237,\276@\234\272\274`\013\366\275\035q:<*\215\200=#\001^=,:\251=\234\336\313=\020\376\206<\0007\352;\036XD=\301\301.\275e\"O=c\263\320<\360\210i=\20602\275`rO\276\324g\327\275m.B=\365\307\027\275Z[\374=\351\262\020=D\206\331;X/\031>\035\n\341\2753\222r\273\373!\303=`\372\241=n\025!\276P\212O<\303O\016\276\241\032\033=(j\237\275\2603\027>+;\221\274\030U\250\272\340\'\252\275IW@=\306\364\365\275\364\017+\275jj\347\274\260\224\271=z\357(\2751\362\264\275\231\352?>\221hu\274\024\357?=\374\001\357\274\276\026\027>p.R=\206D[>\344\244h=,\022\032=pi\263<\343](=\231\377$=,\323\263=\206\3476\275\262!\205;\262\251\335\273\000Z\r==C$\275\364\216\030=\374\357a\276\311\270$=\345qe8\363Z\326;\224\317\r\276\341\013\311\275)7\331=\370\367\031\276\026\025\325=\236\372\034>d\263o=mZ\206=Q3B\273\007\211\244=\366de=|#\224=\270\2634\275$h\370=\201\254`=\351\007\n\276\364\371\005>n\215\243\275\232\316&=\035\217\226<\270\261}\275|{\257\274d\257H=\303l3\276\027\025\300\274^C?=\353\204\231=R\243\255\275\345\247i={\n\240=\\\303\207\275\021N7:\315\370\365=G;9=\021e$\276\237?%\276[\312l=8\0075=\014}9>?\267,\276\376\251\n=T\325W=\377F\327\275\373\356/\275\346\247@<\023a)=\014\276H<M,?\275\236\253}\275\032\206\276=\244\301\334=\364\014\243\275\302]v\275\010\273\334=\001\362E=\177<\260\273\2479\360\275\241\276\026\276cn\255\275\343\375\007\274\327]\217<\226\214\326<_\231\204\274T\375Q\274\016\t\026>q\216\264=qM\277\2733\240\251\275\304\025\006>o\031\000>\217\205\304\272\022+\344\273\357\r\211=\t\277\355<r\no\273}\252\031=Z\014\236\272|k\003>ZQ-\275\003\2663>\234\372^\275G\356o= E\274\275\"mE\276\0005\306\275\0264\264=\013*\253\275m)\212<D\364Y<\263\303t=\022\245\304\274\261Ip\275\257\242E\274iY\373=\036\323\377\273\351\3277\274\243\257\372\275\237\320d;?\203\354\275\225k\267=/\223\217\276\251\357\233=P\204\273=A\2601=k\010\370\274\r\377\354=\353\267\244\275_\377\237\274\264\311\007=\2234<=8`\377<\321\037l\275\352\326\354\275w\334\243<\262(\003>_.\314\275\350\301\327\274\216>\355=\266}3\276\333\224\013>\376|\246\274LU#=\r(B\271\230X\231=\202U \276R+\210=\203\230\233=&$\324\274p\264\220\273 \001}=\023R\244\275\361\014s=\021P\277\275\334c\005\2764\332\350\275\352\250\314\275\245\3275\276C;\251\274x\355H>\367\325\020=y\321\260<\337cj\275|\324\305\274\023Q\266<\2530\346<\n_0\275\362\376\025\274d\320\335\275lM\225=\202\354\226=>M\253=\361\266\345\275-\023\022\274\314\231\332=IH\274=-\322\240\275\263T\205\273C\237\236;\035\351\005=\327/\212\274\253\021N<\016F\230=IoB=\245C\006\276{~\342\274\353i\230\275e8\373\274\316\201i\275\177\n\025\275\200\353v\275\352Mf=V\'\235=$\014\342\275\024\334\267\2750\262_>g\224\320\274\313i\267\275F\257\230;\272\264\234\275\005\034\017>\227\242\334=\010]\221=\037\200l<b\331?>\016c5>q\334\211\275}\221o:\200\232\266\275R\327\307=\351\230\310=\006)\334=\201\336\273<\264\257\375=p\2751\275\246\0264>\350\217\2129\315\242\210<\321s\265\273!\334\361=e\204\326\275\323c\004>\007\233\257<\034\345\n\275\305)\272<\356\341?>\013\214\272\275\342B\243\275W9\200=\270\260\010\275\205\001\034\276\250\263=\275\347\027D=\356\232b=\263Z\331=J9@\275\311\361\304\274C!\231\274\225\355\324\275\256=\221\275\316\203\351\274\317O\'\275\303\033\256=\224\026;>\263T*=\377\333\264<\314\024I=Mk\345=\354\306\245\2740\013Q=\332%\370=\303\232N\2769@\325\275\301O\261=\005\314\003>\323\232\342;=\341m>4\353\017>\021\234\323=\023\000\230=\325\3175=.\313\316\275}J\206\275\314\262\344=\203\366\240\275.\361]\275aY\010>\275\310T=\033\303\222=v1\"=\025u\247=y\200\263=\022Z\353\275\023\276\"=Mf\200\275\014w\'\276\201^\242<\240\344\302\275\243oM\274\310]V\276h\360\375<D6?\276\0067l=\034\010v\275\373\313\273=\323\353\035\274\207\240=\274\235\231\022\276\344\0066\274\221D\">ew\326<0\2428\275\212\345\276=\027\251\337\275\017\024k=\231\361\'\276lC\336\274\036\027*=]\031\216=\345\217\213;\\\362\274\273m\260\320\275\022\211X=B\035\234=u\250\313\275\373\345\234=\351R\243\275\267H,\275\010\036\255\275\237\341->3\370,=\003P&=\217%\001\274\273\315\307=\267\027\222<\356\226w;\270\206M;\265\022y<\317\370z\275\225,\204\2742\363/>\235\311\271\275\307\206\306=\202\275\215\274\247\364\271\274\240l\223=\252FC\275\315\353%\276]\372\304\275\2533\273<\264\373a:\275w\375\275\225s\354\274\253\017\346\275\036S\251\275\036\2024\274\336\363#=I\361P=e\3108\275\020\350\361\274\304R\331=\311\213*\275\020\2760;\240\334\354\275\202\2511\275\266r\002\275\031\216\277<B\322\002\276\023=\311\274\002f\216\275m\340&<G\3507\276\252\360O=<Te\275\215\352\242\275\316\372A\275J\200O=\367\333\t>Z\373\255<\235\250L\275et\274=\371\316\352\275Q;\346\275=\225\243;\306^8=\026;\323:\200\242\215\275k\242\262=\337\200\001\274\343jh<&2\025\276\234}\260\272\265\r\346\275\017`\322=\265\313\t=Ve\n\274A:\347=\n\353\256:\016l\234\274\3032$\275\226\266\230\273O\001\\>\335\330\257;$\306W=\3132\247=5;|\275G$0=\344;\t>\037^\016\276x%\205\276\330\231\026\276\317)\034>\321:\024\275\337\033\016\276\237v\240=/0\333<\361\376\203=\034\316\231<\r\316\211\275F\305\001>\010\036\244=\212\007\270\273\263B\t\275\321\240\344=\273 \305\274\3665\240=&\250\377=rgM\274S;\020=\275*W>\233\265\330=\021\001t\275R\311N\276\023jc;\245\230\254;GxM=\356\214r=5b\234=\374\022\373=\261w\254=\204\033\253=XF\227\275\277\364\332=L\350\323=\242\235\317\275\376)0<\277\270J\276\rVf\275Gb\301\274SC\336;\310\3349\275fW\252<\205%\311\275\211w\331=\323xG=\371\241\300;J~\014\275z\314\t\276T*\264\275`\254\257\275\225@\031\275\2742\324<5\332\021\276J\\\341<FW\236=)\013\016>P\331\322=\207\250%\275\253\311[=\027s\005>\013\341\271=u|\367\274\2246:;eW\317=\260\016X=\305\235\214\274\247\320A=\351\2326\275\303\275\351\274%:\255\274%@\004>(\316M=#\307\002\275\346;\013\276.\314\r\2735+\006=\354\304x\275\260\261\311\275\033\347\356<*\210\374<I\3418=\304\350\"\275\216W+>m\211\030\274\334\035\366=.\030d\276\215M\">\343-\307\274F\252d=Io\210<\202s\317\275A\023\204\274r\017\371\275\3061&>D8\237\275\032w\271\275\340G\001>P\0249\275\203x\335<WfA\2752+5=A\363I>\033\2607\275\220\365\324\274T\200\346\275\177\2053\275\010ih=)\260]<\374\305>\275\323\234\300=\320\025\022\276/\r\013>h>l=\227\315\236\275\241\370\203\274\017;P<\2551(>\344;c=\177cq\275\017\304M<\271 \343\275\"!\035\276\227*\234\275\273\212\3109\311\336\341=\206\337\267\274\354y\212\271\340:\241\275\246\314D=v\231\024\275\221\325J\275\370\254>\275\270\004\354=A\346\205\276/\360\221\275=\356^=\030\243\227=@L\373<o)W;Y\245+\276\307\354\317\275\325tV=q3U\275\261\331\t<d-t\274\340A\022<\241T6>\253&\312<.D\367<\316t\250=\206\324(=\203\351\325\274\333\'\350<1\'\t\276\203[\253\275\273\3147=\006\213\333\275\353h\212=\340\234O<s\305\233\275\324\n\263=_\332V<u?t=\364\033\225\275\222\376V>\211=\352\275\254\236\204<\204\020\344\274\246A\200\275\212h\201\275\323\277\023\275%\251\235\274A=B\275\267@\343=t,V=$s\007=5y\001\275\376h\207\275\216\350I=\340\014\211\275\036g%>>C\307\274\273`\023<\207 \264\275{3<>r\324\337<\313\002V<\301\0149;N\232\005>\273\361h=O\301%\275k2\312<\272:\304\275\002\"\300\275\365H\353<\006\260\205>\221\341N\275\325\322\331<\363`\306<\305\177\350\275_\356\351\275\r}\224\274\254\230\231;\215\005\223=\233l&<\211\360\271\275\340U\370\275{\250\217\275\300C\210<0S\002>\244\306\210\275S\242\212\274R\254\027<B\225\253:\233~\324=\\\343\031=\277\364\027>\311\260\357=ke\007=\237\026D>n\336R\275\236\331m=H\027\275==\202\351=\2173\021\274\353\243\245=#&\002\275`}\261\274Ra\220\275\347\215\274\275\321\346\202=0\177\356\275_H\335\274\251Z{\275\364dm<.\303\013\276\001k\022>\344\037\306=\022\")\274\247\035-\276w9\244\275\037p\355=\233_\231=\320\256l\275\3251\013>\344l\345=\214\016t=8\205\025\274\354\027\275\274P\332K\275.l\336<\3679\260;O\244\334\275ZU\234\275\001A\026\276\'\327\211\274l\002\010\275q\204\263\275\261\241.\276\301\234b<\231\260\n=\263\211\240=\"\0348=eI\256=\355\201\312:2\354\307\274\277\253\317\275W\364-\275\025\317\031\276\273\262\331=\321\304\010\274\210\035\343=\262\222\245\275\014\026\274\274\331\030+=9\374\206<\013\303\007>\246kq\275\361P\353\275\253\344-\275\315D\202\275\263q\372\275\033\321\254=\276]]\275\301\245\200<\351\216\001\275\337?\242\275\370\000\246\275\332;\332\274\247o\264=\201\034F\276\365\273d=\361a\003;\005:F\275\215.I\276\n-\227=}\332J\275#<1\276\220|\263=[\272\360\275\023\027\010\275T\332k\275\320\021\311\275\203X\370\274\325\202\026\275e\3373\273\301\201\205\273\215\275\347=\377\327\343=;\251\250\274Q\350\265\275\205-\001\276Qi\227=\242\337\373\274\033\301|=\006\345\177\275\013\016\202\275#^6\275\200~\323=\'*\006>\3718O=\r\224`>\311v\017=x\036\236\273\230)u=y\010r\275\373..\2769\312\025\275\210\2712=\306\212\225\275\327)A>\004\333;\2750\020v\275\222L\217=8-~\275\231B\031\275\257\204V=,\023\303=\034\352\345=\333\240\010>\226\342\205=\017W\237=\356\232\341=\341&\254\275\343V\304<\363\314\230\275\234\3335\274\322\025\027>\003\252.>\350\\d\275q\336\247\275\337\277R\275\232\247\313\273m;b;N\005\202\275\021Y:=B\214\237\2750\213\315\2758\374T=x\324\273=\225V\302<\263Z\315=\305\014)\276\246\262E\274\244\335\373\275\340\r\361\275\337\017\362=\000\317\235=\272\216\257\275G2p=\226\353\013=|\260V\273\374$:=\203\352W=\351C\001\276\227\300e\275\227T\367<\2636\023=i-X\274\263\036\013=\177\'\225=%E\204=\232\242\037\275\2014\003>5\033\261\275eaA=Z\320\371\275\1773\213\273\214\324\267=\'\002\363\2747\021F<\227\0165\276k\217j\275\241\003O>\000\340,\276\306\212/;/\343\254=\024+I\275\246A\222=\250.>\275\352tm\275\313\014\004>\336X9>;\364Z=S\342\275\275\374h\236<I}\213=\341\261\332\273\256\2774=\300\373\204=\010C->\301\274\355=\203\005\230\275\325M\273\275\020\366\004>\021\333U=\333\206F=\244\276\323<\r8\017>B\263\267\274\020\257\267=\207\370\233\275H^\002\276\275\313\313\273S\333\007\275\237N\220\275\326G\275=[\211\320\275\365\315*\275\273D\363\275\270\373N\275\226\251\305\275\024\353\341\275\375`\027=\353\362\223<\254\340!\276\330^\200=M\370\226\274z\355\222<\302\242\277=A\225B<2\'\004>\201\321\276=\0226A>]\313\020\274\264\217\030=\243\363\236=\310wA=\257\322\304=P<\037=\205\316\200\274\373\211(\273\365^\316=\345\203p=\277\035\020=\2355$<\345\327;\276\025\020\201==A\034>\322\340\220=\330\363\265=\314aX=?3\367;`\030i\276\361\247\253\274\277\334\033\275\016\026\\\275\263b\342\274\305\367\035>\273\224\351=\271\304\227=\215\273,\274z\234s\2756\335\263\275\332\313\246\275>\211\271<\377\320\252\274\366G\036\276\0179>=@\250\036\275\216&\336\2756*\340\274\030\335)>NQ1\275\030h\223<\014\3379>\334C\016\276\300P\230\275\364!\275\274i(a\275\230\323\235\271\010\322\367\274\2136\346<\264\231\251<8\221\241=\353\220\205=i\307\256=\336\246\325\275o,P=:d\302\275\245\260\307=m+#\275\226\002\234\274\243\031\003\274\216\314\003\276^\013g\275\230,\025\274/\213F\276\347\030\305\275\203\215\203=\222\215>>!\246\013\275\254h\251\273\035\002\030=A\300\231\275]o\013>\306\322\">\311\035\"\276\\\377\033\275\365\302\370\275\346\"\363<\234\250U=\0016\203=\371 \372\275\310\017\346=\332\363\365<%\251;>\344\213c\275\245}\377=\0361\332=\260\224\032<%\205\237\275\357\260\310<Ey\037\275?\265\241\275Hv\262=\225\217`\275L\373\302\275\273L\026=\355A\010\2762\"\017=\311\356\000>M\221s=\026\023\272\274Q\236%>\013Y\013>n>\313=\025\242\203=x\274\246\275\023\272\005>\202\234\360\275\374\350\362<\226V\377\273\335\203\203;\364,\014<\251\274\306\275\256<\346\274\202\306\376\275H4\323\275\000\277\014\276v\273Q=\202\200\200=\3536\n\274\330qY=\231\330\371;\347 g\274f &\276\325\327\371\274q\236\302\275\001<\347=\203\324T\275\273\306\303\275=\225\374\274\304IW\274\274\317\202\275\311a\244=\227Y\250\275\265\251,>\222\252\234\275k\033\231\275\220\267\023=\377\346\356\275%g\003=}\205\r=2\341\010>\254j\306=\021\226\333<\\\020z\2753\'$\276A\310\006\276\360\351/=\324YK<%*\031\275M\014S;\037W\010\276\001\301\320\275Q\374<\274n\024\333=\307\252\000\276\220\356\265;\347{\337<P\373\327=\226\233\2229\2762\274\2756\316\n\275\005\355\006\273\222\205\324:\325\'\240=\303\214\226=\027\037\034\275\324\025W\275\266\231v\275Nx\356\274\335<t\275\005\327v;j\357d\274\245c\207=\216b\340\275\2266%\276\276\225\244<\342\250\230\2744\217m>\346\212*\276y\240n<\312\263\331\275X\r\241\275S\271\340=\"\367H=T\037}=\337\017\025>\342\217\257=h3I\275,[\\\275E\305\034<\243Cd\275\256i\010\276\'\023\026=\036B\210<\024?V=QT\365=~c\r\276\244\376{=\203\371\316;\357\027\267\274\371m\235\275/3&\276\246MW\275\372f\220\275\205\327\016\274\006D\365\275\210}\275=\324\247\375=U\212\214=6\230/=8Z\211\275\350\274\370=\354b\257\275\025G\206\275\334\020\034>\232\226\224\275[\365\217=#\374\n\276!\317->\3241?>\310;\033\276\005\325\250;\r\335\242\275I\213\207;w8K\275>V\202<\224Q\023\275\006n\344\274\270;\326=\203?\335\275\234]C\274\232\231~>\376%t=\020\022\306=\026\017\013\274\342q+<\020\365S\274\033\253w;\002\271\350;\206\321`\274\365Px=w\277\r\276\276\204\024>\215\251>\273$\313.\276\336\344\326=\213\235\255=\210K\365\275f*\315\275T\260\343=%\"\023\275\300\300\242<\214\232\301<\203\004[\275\324~;<Y\215\312<\030\304\214<\3361\032;\026\363->\021\220\020\274\353\205\231\273@\202\372\273\303J\211=m\001c\2755Y\262=\250\264\306\275/\027\357=\036\323P\276{8\362\274f,\001\276\255\267\200\275\235\327\320\274\316\377\236\274\254K\221\275\261\276\235=\317\234\377\274\256\217\371\275\207\230\303\275G\264\326<v\373\300<0\266\210=~\240\326=\223\366*\27614^\275#\237<=\333\250\024=\226\342>\274\\\377\017=\222\206D\275\347\335/\276\267\014\351\275\t00=F8\033>;Z\024=36\036\276\275\217\027\275\014\216C\275?\355[=\022\203\260==K\252\275\262I4\276\213\367\252=\241\227\267<\261\017V\275\324\365\336\274\343g\251=+\277\377=\367\224\343\274\216\220!\275Bo6\276\030O\224;\0134\302\27523\036<\234\313\243=z\000\036\276\352\321\252=\322\217A\2752\233\223<\203tI\275(\335\364\274\034`U\275\326\273\343\275\351\204\302=\374<\302\275?P\242\275\200\306N\276\2743\267<\242_\325\274\342N\363=4\216\004\275\305\037Z\276cH\337=\266K\260\272\352\n\303\274\322\310\246<\311tZ\275\322\031==\3475\033\2752~\"=k\214\031<]_\343=\360\034\024\275\374\304c\275\375|C=\334\241\374\275\370ec\275\264\270\257<\273\320C;\2524\346\274\222\306)=)\304\336\2753\017T>\342\332\026<b\367\201=2\231\264=\220\250\342\274_\367\256\274\313\223\033=\220\341\265\275L\224\251\275\345\016\016=1+F\275.j\233\275\327n\204\274\374\356]\276\222\023x\276\324a\203\274\030^o=F\377\311\274\325\373\211=\024\340\345<x \262=I\372\236\273\"S\324\275\370\344\201\274\353\202\261;\314\023\036\275\371\322\212<\330\254\005>\002\243\371;\223\242\\\276\310\274\234=\026\351\014\276\317\232\215\275\353\215\021\276z9[<\r\206C\272\037\267p<\224\024\360=5\300Y\275\212\331)<\303\326\200<\326\311\347\275\215\266\220\275\342\'b=\347\325z\275\245\251\022=nW\262=\256\226\005=\004\226\366\274\242\330A<\345:\001>\345\313+>>C\214\275\326\230<\274+\221\001\276\024N\353;\237\t\034>\036\320\261<\375w5\276>\311f=aN\276=\255sQ=a\273m\276 (\323=d!(=j9\006\272\237;\323\273\353\224\232<\r\032\322;\003\224\347=V\260\037=i^\021=\0170.=e\237\332\274 x\300\275T5\325<~\263\013\275ww\261\272\244\004\251=\314u\232\275[)_\275K\237\371=y\017?\275\364\206\312=a~\n=\014\033\014>k_J>\001;\231\274\241\000\350\274\226\371p=\351\000\021=\237\277\227\275J7[=\345\300\277\274\254\265\325:iE\000\275\237&V\274\235\023\210\274\023E\254<*hO>\257\004\001<2\021m=C\3501>s\220\317\274\320\\\277<\300\305S=Y\257\023=\311\260\335\274\264K\326=Z\200\207=\031\301\364<lX\303\275\277\346\301=]\\\245=BR2=7\375\000\276\263\346E\275\277\003j\272\312\251\334\275\335\324f\276\312[7>\266\234\341\270\013\220\361=\356Y6=UxX\273;\276\001\2762\"\260<\324K2\275Y\006%>\225\2172\274@\204\323<\227C<\275\320\302\t\275_\335\207\275\214ot\275%g\236=?|e>\351a\021=\310x\032=,\r%\275\035\263\010=\013\233\247\274\232\020\214=\302\266\347=\245\330\n\276\267\027\332=c\334\362=E\220\225=\275\332\222\275-\340+=\033\262\020>\200?Q\275#\204\037\276\270\020\212\275\373\251\352\2741\257\306<$Y\277\275\r\234\010>\337\032Y=\353d`\276\272\313\313=\010z#\276\003\356&\275,\327\223\275\364?\270=\270\267\002\276\372\277o<\030\256\360<\014\276\306=\267yJ=\315~\000\276\017tL=89\360\275\204\2709\274a\277\214<\025\032\326<\260\217\262<\347\315\'\276M\223\236=Pn\020=\357_\334<|D\247\275\036*\217<\317\251\010=\352\"+=\351\247\304\275n\327\353<\321\365\017\276\035u\024\275\242))\276ke\342\275\367&5\275\277\336\370\275j\377\033=)\361\307=\240\022d;\t\245\013\275\036\217\271\274\205\267\020>\200\177\347<,hC\275)\216\237\275[C6\274\013\223\031\274\314\232\026\276X\254\225;\330L\001\275\333\352H=f\376\277\275\0040$\276\004;\340\275l\270\210\275>\234:=\210\327\221=f\323\016>\222h\035>\242+U=\016_\024=w\374\347<\nM\024\274\362_\252\275\355A\254=\220\346\207\275\004\345\234=\336\334K<Z\030\232\275w\027\224=\263Eh\275c\374\204>\214$J=\016h+\274\227\202\241=\230!\315\274\343\217\306=\264S\312\275\370\031\221\274\326\tN=\336\253u=\202\372\332=\253\0057\274\027\355\220\275+\261\217\273\275\337\213\274\204\307\236<K\212\365\275\330\267\235\275\250*\306\275I\2041>\005\002F=\230\223\226<\323\275\003\276%\302\245\275Q\037H=\030|\354=\364e\000>\237\205 \276\266]\376=\266\377\332\275\341\347w=\245t\303\2754l\024>\343\307\003\276\340\262f=\336W\355\275\316\013\237\274\217e\232\275\375y\n=\341y\322<\340\353\204<m\256E=\304\303\365\274\240\377\343\275a`;\276M\252\267\274K\007=>|d\003\276N\306\373;\356\"n=\357\243\250=\322\034\003\275%4\345=\2016\213\275\244\3516=Y\320\375\274=Q\252\274\206\314\254\275\241\363\207<\005\353\226=k\326\257=\317s\006=1\211\005>\272\353\306<\316\270\347\2757C\272=\222\220\254=GQ1<\032\215\001=\310\230\202\275\300c\036\276Rd\346\275w\241\252\275\263\263\315\274\206\270\321\275\210$C\274d?F:\027\264\014\276>\307\320\275&)\014=\"J\363\275\331)\277;\000\207\034\275\312R{\275&\352\002>|\272\027\276\352Z\232=J\031.\276r\260\244\275\200\213.>\355\263=<\004\242\370<\021b;>\020\326\222;\212\337\201\274\240\343\'>qXE\275\'\272\216=\355$\262\275\300\250\314<.B+\275z\275\223<\353\254\357=G\217\023\274\010&\331\275t\345\370\274\365\274\231\275\316\345A\276\252|;\275\224x\000>:\265\231\275\330f\345\274\025\304\035\275\240\250l=\337\034\210=\346\276:=\020\374\023=\026_2\276bX\341=c\274\330\274\353\005\361:9\266\234=\310\252\274=\277\257\2249J\307\247;Q<\025=~\245\005\276\354\367\312=\021\326\222\275\0167\303=\376\207h\275J]6\276\037\316\031\273\3358\010\275\t\346\326=\260)h\275\365\273\267\275\000x5=v&\344=\"`\177=C\267\006<G0\247\275\373\027\253=Z\030\352\273T\025$\276,9V\275\312\372\216\275\315\215\261<\356\212\211=\036A\267:\304\221\314=[\177\006>^\211W<\307\234A\274]K\'\275P\305\213\275}I\273;\023]9\275hH\302\273|S\002>\20233=s\325\021\275\241T->\026\210%>\363\370\267\275 \242\005\275\236\t\000\275\203\373\343=\350\310Q\274\211\221\355\2711\020\010\275\224\312\005\275\363\324\177\275Z2-=&\032\003=-p\364;s\355\265\2752\261\021\276\r\207\374=E\277\263=^\303\271=ua\003\276\200ka=\037\200\004=\303m\370\275\313\355\322<\203\224?\275\337\350\375=\017\006\224\275i[_=\005}<\275\213\307\244\275\327\367\004\276\177$\356\275\247\204!>\021S\002>\307\353\222\275\240\350\334\275\2657G\275_\2043>\257\340a<\351\251g=&0\220\273F5\305\275\204\021\361=\213\207;>\311\366\372\275\342j\356\275\264\311-\275\371\353\027>\261S\373\274>\314\305<h\255\331=\201\3045;p5\034\274o\321]=m\352B\2751\004\216=\225-\000>\227\2053\275\220\007\263\274\307\342\201<\001\014O\275\016L\025\276\277N\035>\331\367\275\275\204\240\033=r\342\211>\202N\274\275j\272\276<B\016\000\276\352\310\223>8\002o;\202\327;\274\371D\216=\260\214\006=\031\032\022>\260\257\352\275:(c\275\275!\026=\352T\307;h\204\330\2754$\022\275i\273\302=\305G\311\270\363k}\275Xu\013=\tt\300=\223\020K\272*n\214=\365\224F=\213)\026\274\'\210\353\274\303\010\211;\323\205\355<\376\320m\275\327e\202\275\266\367/\275\212\003\344<\022\254\213\274\036\372\362\274Y\251K>4|\004\276H\3553\275\303t\027\276\352?\003\276\013\026\330\275\276\336\222\274\333\326\277<\' k<\232V\376\275\037\261\023\275e\271\003\2765xt=C J\275\201n7\275\027\220v=!\314\010\275\354;\262=\266\311\207\275\203$\332\273kU\031\276aw(=`\350\013\276\301\322\361<sT\312\274\364g\226\275\214=\022>\345\237\323<\263\216)\276s\267X=\255oz;\272.\356: T\257=\336\356\325=\307\265.=\342\246B\275\276\027b\273\007\277A=\202\347\267<\363!]\276\372\216\201\275\372c\202\275\367\"\030=\006\205\347<-\225h>\356\246R<\333\364\005>\361`u=\030\320\250=\003\212F\275\245\001\205\274vT\331\275\\\337U\275\247u\375\274\205\307/\275}\260\004\276\206j\305=\373\216\"\276\255\024\n\274\337\241\310=\rI,\275t\014\353\273VR\000\275\303\255\304<%\326\243=\240\262(\274r\252\350:\366\372\244\275\246\005J=\237\342^\276\021\254\331\275[\262\023>\257\321\272=\265\250V=\232[9<=V\247\273\204\305\234=`n\254=\342R\325<\346Q\n\275\352\007\344\274p(G\276\241\t\224\275TA\247\275\265}\256=UGS\273\247{m\275k\275z\275x\261\212\2759\253\003<$\262\201=\344&\364<\301:\237=\317\237Q\275\340\0017>\370$\316\273\tR+\275\246A\004\275\261\214\t\2765#\326=\272\035\206=,\213D\275\001\214N:\233\\\253\275\354\252\277<\316\3622\276\366\215}<|\021\035\275\305h\261=\226\206X=T\340\031\276\275c2\276\"\263\017=\322\333]\274\210\014\377=r\252*\275(\234f>>!\232\275F\010\r=%o\303\273:U&\274\035\270\236\273v\347\020=\235B\256\274\370\326\205\275\352Z\217=Kz\334=R\366z\275\376Bu;oN\274\274\'j\342\273\002\366q\275\227\220\242\273\203\307\241={0\207=w\013\"\275@YI\275\230\236?=\221yB>\351\363\266=z\261\270<_*\313\275\316a\244=\351\026\021\275\314A\233=\234\264\244<%\032\235=\361\241\261<\226\357\275;\362\306\006>bW\220=\267\037B>\305\334\217\275\335\335\240\275\240\267\216=\321R\370<\021W\217\275\273\371\227=\2056\276;\304\2244>*}\345\274U\215\377\275y\272\024\275\024\220\204=\334\020\366\275u#\r\276\260s%>\334w\003>\025\003\223=\311\375A\276*\204\354\2746\321\030>\240*\300<\244\000\233<\332\353#\275\232\334\036\275P\031\272=\266a\244\275\177\216\350=\027\320-\276\010\305\r\276\354[,\276;\250\322\275t\234d\275\373\t\253<#\264\303=C\211\217\273\214\316\025<Sq\"=\234\201\272\274\267\241\242\275\302x\325\275wa\226\2755\204\202:mj\225\275\225$\255\275u\315\225=\260\023\234\274f\177\301\275)\256\035\276\217\020\213=\301\331\237\275\021\210\003\276\233\352\300\275\334.X\275\327\304Z<\316yW\275F\311\006\276-\311%=\006u\233=5\367\267=8\250\264\274\352\023h\275&P\242\275S8Y<\305cv<\312\360$\275\3362\363\274\330\343\356\275\200\215G\275\332\251}=\rs\022\276\256(\302<\222\346B>\210\250?<*$3\275\374\220\343\274\3725\256=\247R\376\274Y\371\027\275\232\304)=\tIV\275(\367L<_\204\271=W*\337=Jh\241\273i~\273;=\374\027;Y\352\206\275\037$\263<\227{\004\276\231h\240<0\303U<\330\t{=y\300\334<\367\371\302\274\217\216\227<T;l\276\357eu\274~\276+>O6\366\274\311V\022;\032\360\000\276\010\347)=:\265\032=\263\251\\\275\244\305\246\275\305\265\272=\250\260\036\275\n\305\224=\216\224\350=\207\347\005=\2610c=\320\317l\275G\036\032\276\\Q!\275\212\332\363\274I\026f=[\031\222\275\023\213Z>0^8>\273\016\332\275e\256c=\273\372\267=\230v\206:\240\201C\275\255\370\207\2756I\t=x\316\037=H.\234\275\230b\240\275\351\267_<\232\210Y=^\247\212\275%=8\276\\A\t\274\005\0260\276#P\351\275\022\261\364;FW\200\275v\251\013\276\036\t(\276\311\306\177\275\034\366\030=_|\003>_\270\222\275\276\311%\276\255\332\005>\036\n>\275\275\220\037\275\310\371<\275x\035V>\'\303\320\2757\306\360=\225\207B\275o\n\022>Mo\314=L#1\275\352\327\t<*\013\216<\2113\213\275\275\350\330<R]\263\275\226\371\316\275?\317r;V`\214\275j\037\010\276b`\2716^\320\226\275\024\267\024=\037jh< Y\237\275>[\242<\333\036\001=\204[\021=x,^\275\315R\212\276\025\244W=\212]\216=p\004*\275\231\341\002>\223\314\223\275Ek*\276\233\372\005>C\201w=\377\266\352;\347\222Q=\2320\222\275\252b\377\274\310\022\231=f\250L\274n\244\000={\3102\275\267;\277=EO\330=*3\267\275\2418\277\275\0343\376\275\036\276\016= \342-=\300\214\245=`\242\270\275\230m\037>9\235\005>\324 \207\275\226\305\032<\214\225\014\276\272\305b=\320\226\222\274Q\231\214\275\305\026\333=\2455\327=q\033\001\276\001_\334\274:\037\212<ah\010\276Y\316\357=>v#=N\316S=\372.\300\275G/6=\334\364L=#\324\217=5Z0>\375m\221<\227?M=\210\202\017\276\263+\202>\267\212\316=\327\321M>{\315\r\275\256>g<Z\257v\273\305\2152\275ze\007\275+k\254\272l)`>\256\205\031\276{$\207\275\332\357\274<\352\355\340=u\265\230=\365^P\275 p\337=t\377\016=<r\006<\251\014\254\275]\271\240<\020\3554\276\376\216\221=l}\030=\242\317\331=\362>\033\276\013\032D\275\213\031\330=(\006\320\274\264\3335=\253\365\225<\253\231\022\276|\302\\\275\213\375\014<d\220\276=\021\'\261=\340\353\260\275\232\251\252\275\326\021\037\275\306C\325<\316\363\031\2753\255F\274\215t\257=\251\313;\276\ry[\274v\227+>\305\003\252\275\335)L\275U\2127\275\263b\001=\230\307\223<l\370\247=_-\311\274\354M\253=Z\307M\275Y \033;\033\241)=A\027\311=C\030\260=\203\211?\274}\375Z\275\357\226\t>c\214!;\224X\377\274\213\243\214<\313\367\216\275\352jx\274\001c==X\\T<\t.\340=\367\331\001\274\302\206\240\275Ro\274=\201%M\274q\326X\276\316\203\226;\"\"\261=\212\255\317\275\014\337\271\274\315\256a\274\227\201\241<\227.\375=\240J\277=<\326\010=\375\376\031>\352\001\026\275P\251)>\260x\025=\321 \356<\304\375\254=\310\274\024=\205\240\363=\032\r\204\274\"\217\302=\2541\344=\252\016\201=\330\340o\274\303\270\037\275\223\202x<\276Y\214\275\207\220\310;\234\"\"=~\331.=\234y\215\275\020\232%>\262^\367<\026E\307=\264>\272=\275\237A\276\211\201\201\2755\213\177=\024\026\230=\236\355\233<\237\315\317=t\031\303\275\002\037\000=G\371~=a\3334=[\023\234<`\024\022>{FA=\'\302\313=\356a:>\020\216\353<]\227\025=y\221\212\275\020\234\255=]\207c\2745\225\020\276\037\213\210\275i\3462>\354\354\217\275QIr<R\271\271<h\202D<-\357\224;\010C\243\275\337I\212\274\2254\177\275\253`\371\275\241k\375<\332\375\364=\316\"5\276\257\007\216\275\351\250{;\247\200S\276\321\304\235\275\006\025\000>\206\213g={\037\206=\014|w\275\235p\363<\205\257Y\275\250OC\276:\204\037;\370L*>~n\340;@3C\2757\201}<\035\232\244=\013\221n\275\343\\\330\272W!\370=\374\022->\332\276\013\275\032\001\274=\376:\241=\321\241I\275+\373\022>\276x\256<6\177^\275?,\005\276m\343\037>\336YD=\255\360&=po\352<\260N\033>\274\346\177=\207\340\037=\251\014\334\275\013\022\210:\306`\312=\335\"\r>\207\326\200\275\252\243\201\275\353\t >\204\310\002\276\252\0241=K\201\302\274\036r]\276\3111W<l\314\026\275\236\353\245<\223\322\242\275E\377\264\275\027/\000>\\\327\'\275\211:4\276-o\274<5\345\230=,\240\274\275\004h\374\275[\303\013\274\223N\352\275Sh_=\232\341\204\274\321\335%<\226\217\263=\376\225\351\273\2254^=@FO\274\021\335\r=,S\317\275\273\017\257=L\'o\274[~{=\322\323/=tO\332\275]\310(\276\376H\245\275\227\307\336\271\214P\370\274\027\215\034>\323\362M\274\260\025\353=\352H\213\275\337r*\275\020V\006=\203R\232\275\213\364\022=;\363}\275vc\033\276\374v\323\275.\203X<}\037\352;\031}>\275*\177\260\275]\337#>\242\335\245=e\2540>Y87\2761\354\254\275\215\360\256=\370+\224\273\207B:\276/a?=M\373\243\275\221\033\323=M\322S=<+\347\273\342\242v=,\026F>\200\340\311\275v\027W\274\226qH\275\036\247\370<\336\005\024\276\025%*<B\303->g\'\215\275\333U\272\274,\225\000\276\351b\001>\235Y^\275]\014\275<\277\235\'\276\230\242\003\275\310\225\216=\362\342\022>\316\r\222\275\220`\023\275U\022\247=\206\n\271\274\340\261\321<\234\022>=\341.\021=`x\311<\270\033\244\275\202n\251=\260\027\024>\277s\203<\340;\376=\301\212\325\275\222\300\264=0\363\004\276\275\'\031=\377ET=.\307\263\273O\027\001>-\001\023\276*\373\263=d\305\016=q\200d\274m\350\241\275F?Q\275>:>=\212\255\206=\307\250\205\275X\n =|\306n<X\364;>ml\223\274\230_6=\314\221\020\276\260\'\271<u6\302\272\032\267\307\275y\307\304=\020\261\203\274p\312\327=\002\320\235\2748\245\006\275\251\t)\276\025g\264\275\362\230\263=\242\231\034\273\336\271\023\276%\237\374=#\000\215=\236[\333\275\024?\240\274F\321J\274\321\\\315=\2631\273\275jg\312\275>A\234\275l\373-\274#~x\275\251\0216=\360\016Y=sZ;\2755g\305=\226\262\321\275a5\232\275b\221\226<J,\013=7w\271=\355:\252<\035\260}=\363U\004\276\341\023\260\275E\243\035>\242B\006\275v\355\033=i\223\221\274\223\226\207\275ytT=\234\367!=l,\250\275\027\344\217\275\236\365\203\274\"\372:=3\342\007=\200&_\276\031\232@\273z\212\212\275p\367\033=\235E?\275\260O&\276\344\001\373=\010\016D\276\235\207\000=\352w\257=i\304v\275\224\252\014>L\321?\276\262\343\373\274\222\316\001=%eB=S\350\177=h:\302=\331(\231<\323\033\004\275S\"\365=\312\210\034\276\266\210\217=\377o\200=\377\340\034\276\016\314\005=d(P\276\034\240\216\275\004\344\207\275\001|\367;\330\033\235=e\202\230\274\332\032\000\2755W\007=\226\2074\275\356t\025<\\c\036\275\217\232\274<\3061\242\275L\0072\275#\253\007>\261\260^\274\360w\345<\314\320\030\275E\267\233\275s\006\241\274\002\010\257\275\250@\354<\233\344\010\275\222\202\264=\250\001\310\275#\020\347\275x\261P<\304\261\332\275\034\341\031=\202G\034>Q\320\201=\362\315\352<\311~\003=\317\030\205=\262\220\032\276\371g\t\276\350\306q=\267l\345=HE1\275~\231\346=\245\312\316=\233\325\336=a\252}\275\024)\313\274+\204\312\275\210\236\'\276F\'\267;-\027\235\275x[S\275\016\264\314=\340\221\362=\335\3771>\241\333\231<\226w\222\275R\227p\275$b8<^\345\360=\347\035E\275\364\000/\276\204\370\017>\305R_<\300\020\030\276\361]O=\236RR\274\263\267\234=L\347\375\274\023\'\024\2732\t#\2751\274Q\275\266\352\'\2748\201x\275\265\022\226\275\377y\254\274\353I8>\t\371\371<\014\347\313\275\317\316\364<Ou\365\27443\177\275\224\242\r\2750\004\t\275\350\241\034\275\022\251\024\276O\363\016>\312\314k\273<9.=\252\243\245\275Cs\217\275L\004\036=5zn\276\0236\242\275Z\326\250\275\032y\333\275\031\256\006>D\033,\275\'\262l\276s\227\310=#\316\366\275\031a\233>\240x\242:\3714\272\275\330\241\246= Wz=\342\250\215<\251\307\225:;\266\230\275\240\013\220\275\373\335!\274n\322\205\275{\251\365<)]9=$\211j\276\\\316[\275J\002\227=b\005+\2754\003 \275\366\313q=\335\265z=&I\233\274\001\217\251\275\270\337E=C0\213\275R\204\222\275f^\247\273R\340\034\275\346I\253\274<\340t\275\327\342\327\275\026V\007\276\216TI=+\\\200\275\337\020\017\275\343%\254\2753M\003=\021`\314\275\210wc=\030\246\231<\265\352\207<[\226M=L\255\'={\362\037\273\004\344\276\275\356[w=\355\360W\275\314\257\377\275\252}L<\363\267\223=W\014\r<\027\344\000>\232\342\034<+\003H>w\354\325\274^\276\203<\252\206\355\275\001\000\223=X\371\223=}^\261=@i\202\275\236p\260\275mQ&\272\256\231b\275-\375\205=\337\237`\274\334\351\017;k\342\\\2758\032\200\275_^\221\275L,\342\272`\262\030=\342\345\321\275\025S\364=\354.\020\275\310K\233=\034\220\353\274IS\312=X\335\317\274\276&\356<;T%=\270s\031=\342\350\334=X\256\033\276\310\014K\275\267\304S\276\324\235u<C\332\3019\022\213\236=\033\200\310\275\203\253\223=\010\300F>\017\236\003\275j\022c>\301\024O\274\003\000\232=\335\027\023\276\320\035D\275\306\023\333=\311\006\227\273\352\025\242\275]Q\252\273-8\250\275\212\316\357\275\3568\352\275\256\301\027\276\000\355]=keL>f\025\340=\030\266v=\035\251\341\274\243\304\010>\351.\324\274\307\250v<\241\265?=_\217\327\275B\350\310=\270\004z\274C\251\352< p\243=\025\242\020=\ng\207\275\243\265\306=,\221\334\274\316#\245=\212\253\253=y\251z;\370P\355<\322\364\n>\375\331\204=\344\377G\274\370oA\275\343\307\317<\005\'M>\332\364M\276\220\317S\275\305\231\276=\321\261\007<\362\354S\275\224\263|<1ws=\256\364\013=\265\210C=\365ik\275n\322O=S\244\364<\0305\214>!\325\357\275\362\t\357\275P\200\304;\326\351\331=d\r\250<f\206\327<\016\274\t=GB\337=\337\305\007=.M\"= v\021\276)\323\234=\374\332I=\311;\021>\256M?>\022\310\032\275!\201\335;p\022\013\275*!(\275\363\361\276=\002\231\000=\000\034\t=\354\031\277\275\r\341\266\273\354\211:\275\250\263~<\227\260\222\275\277\271\037\2768\345\220=q\225\200\275\221\243\303=\336w4=O2\343\273\017R\243=\357\273\271\275v\375\361=\242\232%>RZ\310\275\302e1;\002 |\275\324\275\220\274\311\231\370=\r@m\274\263\377T<l\377S=\241V\022>I\020\"=/0B\276 \333F=\261[\207;\242\311\004\275\255\270C\276\307\353\353\274b\314\325;\236\305:\275@)\006>\243\203\016\275\036c\305\275_\252\001\276)\333\356;8\037\213;u\3624\275/iT=\204\031\331\275i\316\262\275\0140\342=\\A\224\275\013\024\035>\217\201\240=F\342Z\275\355E\255\275\327\331l\275\305\010L>?c=\275\243?\030=u\004.\276R [\275\027\000\r\275^S\373\274\342\022\031=9py\275\307jj=(*\274=cV\032\2769T\353\275\330V\313<\032\271\302<\262\t\006\275j\304\326\275\247\010V=\365\313F>\" J\275-\357\347\274\177\014\010;\211\304\270=\223 r\274\317\326\237\275\352\013t\275\020\245\275= \014\241\274\347 9\275I-\031\276\366\370\262=b)\304<\371\221\301<\020\020F\275\301 \317\274~\334\253\275@0\350\274n^\226=\215G\344=5\025b=\333\\`=\033x\345\275y\253\216\275{\263V>\353\255*<\373\254\221\274\372N\330=\244\306\010\275\325,_=\002\240\341\274t\035y=\005z\003\276a\004\371=\355\032\006=\210H\206<A\215?</\"\216=\303\364\310\2757O\236\275\234\374\374<(/*\275\261-\330=\222\023\325\274\\}*=\335\272/\275\037+\372\275\000\342\334\275.\256\260\274\213\264\325=6uT\276\270\025\254<lF\377\274a\311\006\276\374\351i>\031\352r\275\305jP=\222,\302=\366x]\275\025\274[<\016(\277=\327C\301\275i<\301\275\316\305\274\275\345\205\342\275(R&\275\322\301S\276V\014\177=5\347\005\276\244\3630\276\342\274\271=\317\267\236\274\234\033n\275\215\207\326=9h\206<\311],\275\342\037\362\275\371\005><\234\327\020\275$\016\375= \347-\2755R\233=\231\332/\275x\366\240<\204\312\356=\366\361G=\010$\035>%E9\275\351\233X\275\034\321\252=&\240\374\275\362V\032=\277A\025=\304T\'>\177w\002\276\243uq\275\365:\334\275\265\325S\276\2765\341<\302\211\210\2743\206\235=,\364O=\221\320\215=\214\236\233\274<\356\020;\240\311\2409\202\211\342=j\342z\274\005n\010\2755\306\031\274/\200\006>k\343f\275\361\265K\274\274\332\006\275|\221\251=\364E\002=\220e\244=2\350\260\275\305\022\206<F\240W\275i\333P=\275l\271\275\346\325\214<\230\321\017>\227\310\031\276\357Z<=N_M=\'\372\017=f\215=>0\364\031\276#\277\261\275\317\037\365<<\363\267\275\007\303\t\275\242\204\360<U]\027<\2777\017\275\347%`>L\327>\275\327\301\264<g\277\201\274\311\337_\275"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign_1"
  op: "Assign"
  input: "lstm_1/recurrent_kernel_1"
  input: "lstm_1/recurrent_kernel/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/add/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-06
      }
    }
  }
}
node {
  name: "lstm_1/kernel_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel/read_1"
  op: "Identity"
  input: "lstm_1/kernel_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel_1"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read_1"
  input: "lstm_1/strided_slice_3/stack_3"
  input: "lstm_1/strided_slice_3/stack_1_1"
  input: "lstm_1/strided_slice_3/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_2_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read_1"
  input: "lstm_1/strided_slice_2/stack_3"
  input: "lstm_1/strided_slice_2/stack_1_1"
  input: "lstm_1/strided_slice_2/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_1_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read_1"
  input: "lstm_1/strided_slice_1/stack_3"
  input: "lstm_1/strided_slice_1/stack_1_1"
  input: "lstm_1/strided_slice_1/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/strided_slice_14"
  op: "StridedSlice"
  input: "lstm_1/kernel/read_1"
  input: "lstm_1/strided_slice/stack_3"
  input: "lstm_1/strided_slice/stack_1_1"
  input: "lstm_1/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/Square_1"
  op: "Square"
  input: "lstm_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/mul_1"
  op: "Mul"
  input: "lstm_1/weight_regularizer/mul/x_1"
  input: "lstm_1/weight_regularizer/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/Sum_1"
  op: "Sum"
  input: "lstm_1/weight_regularizer/mul_1"
  input: "lstm_1/weight_regularizer/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/weight_regularizer/add_1"
  op: "Add"
  input: "lstm_1/weight_regularizer/add/x_1"
  input: "lstm_1/weight_regularizer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/max_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20927404
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20927404
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub_1"
  op: "Sub"
  input: "lstm_1/random_uniform/max_1"
  input: "lstm_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1018299
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul_1"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform_1"
  input: "lstm_1/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform_1"
  op: "Add"
  input: "lstm_1/random_uniform/mul_1"
  input: "lstm_1/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel/Assign_1"
  op: "Assign"
  input: "lstm_1/kernel_1"
  input: "lstm_1/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^Adam/beta_1/Assign_1"
  input: "^Adam/beta_2/Assign_1"
  input: "^Adam/decay/Assign_1"
  input: "^Adam/iterations/Assign_1"
  input: "^Adam/lr/Assign_1"
  input: "^dense_1/bias/Assign_1"
  input: "^dense_1/kernel/Assign_1"
  input: "^dense_1_1/bias/Assign_1"
  input: "^dense_1_1/kernel/Assign_1"
  input: "^lstm_1/bias/Assign_1"
  input: "^lstm_1/kernel/Assign_1"
  input: "^lstm_1/recurrent_kernel/Assign_1"
  input: "^lstm_1_1/bias/Assign_1"
  input: "^lstm_1_1/kernel/Assign_1"
  input: "^lstm_1_1/recurrent_kernel/Assign_1"
  input: "^output/bias/Assign_1"
  input: "^output/kernel/Assign_1"
  input: "^output_1/bias/Assign_1"
  input: "^output_1/kernel/Assign_1"
}
node {
  name: "lstm_1_input_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 9
        }
      }
    }
  }
}
node {
  name: "lstm_1/transpose_2"
  op: "Transpose"
  input: "lstm_1_input_2"
  input: "lstm_1/transpose/perm_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape_1"
  op: "Shape"
  input: "lstm_1/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_3"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range_1"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice_1"
  input: "lstm_1/TensorArrayUnstack/range/delta_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_13_1"
  op: "StridedSlice"
  input: "lstm_1/transpose_2"
  input: "lstm_1/strided_slice_13/stack_3"
  input: "lstm_1/strided_slice_13/stack_1_1"
  input: "lstm_1/strided_slice_13/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul_3_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13_1"
  input: "lstm_1/strided_slice_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3_1"
  input: "lstm_1/strided_slice_11_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_2_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13_1"
  input: "lstm_1/strided_slice_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2_1"
  input: "lstm_1/strided_slice_10_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_1_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13_1"
  input: "lstm_1/strided_slice_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1_1"
  input: "lstm_1/strided_slice_9_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_8"
  op: "MatMul"
  input: "lstm_1/strided_slice_13_1"
  input: "lstm_1/strided_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_4"
  op: "BiasAdd"
  input: "lstm_1/MatMul_8"
  input: "lstm_1/strided_slice_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/Shape_1"
  op: "Shape"
  input: "lstm_1/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12_1"
  op: "StridedSlice"
  input: "lstm_1/Shape_1"
  input: "lstm_1/strided_slice_12/stack_3"
  input: "lstm_1/strided_slice_12/stack_1_1"
  input: "lstm_1/strided_slice_12/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/while/Less_1/Enter_1"
  op: "Enter"
  input: "lstm_1/strided_slice_12_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less_1_1"
  op: "Less"
  input: "lstm_1/while/Merge_1_1"
  input: "lstm_1/while/Less_1/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/LogicalAnd_1"
  op: "LogicalAnd"
  input: "lstm_1/while/Less_2"
  input: "lstm_1/while/Less_1_1"
}
node {
  name: "lstm_1/while/LoopCond_1"
  op: "LoopCond"
  input: "lstm_1/while/LogicalAnd_1"
}
node {
  name: "lstm_1/while/Switch_1_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1_1"
  input: "lstm_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_1_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/sub_1"
  op: "Sub"
  input: "lstm_1/while/Exit_1_1"
  input: "lstm_1/sub/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Switch_5"
  op: "Switch"
  input: "lstm_1/while/Merge_5"
  input: "lstm_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_5"
  op: "Exit"
  input: "lstm_1/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_5"
  op: "Identity"
  input: "lstm_1/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/add_9/y_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_9_1"
  op: "Add"
  input: "lstm_1/while/Identity_1_1"
  input: "lstm_1/while/add_9/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1_1"
  op: "NextIteration"
  input: "lstm_1/while/add_9_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Const_5_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_4_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8/y_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_2_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/add_4/y_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_6"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/add_2/y_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/mul/x_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "lstm_1/while/add/y_1"
  op: "Const"
  input: "^lstm_1/while/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_10"
  op: "Add"
  input: "lstm_1/while/Identity_5"
  input: "lstm_1/while/add/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_5"
  op: "NextIteration"
  input: "lstm_1/while/add_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArray_1_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_2"
  op: "Enter"
  input: "lstm_1/TensorArray_1_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_1"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1_1"
  input: "lstm_1/TensorArrayUnstack/range_1"
  input: "lstm_1/transpose_2"
  input: "lstm_1/TensorArray_1_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter_2"
  input: "lstm_1/while/Identity_1_1"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3_1"
  input: "lstm_1/while/MatMul_3/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3_1"
  input: "lstm_1/while/BiasAdd_3/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3_1"
  input: "lstm_1/while/MatMul_2/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2_1"
  input: "lstm_1/while/BiasAdd_2/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3_1"
  input: "lstm_1/while/MatMul_1/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1_1"
  input: "lstm_1/while/BiasAdd_1/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/MatMul_8"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3_1"
  input: "lstm_1/while/MatMul/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_4"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_8"
  input: "lstm_1/while/BiasAdd/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2_1"
  op: "Enter"
  input: "lstm_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge_2_1"
  op: "Merge"
  input: "lstm_1/while/Enter_2_1"
  input: "lstm_1/while/NextIteration_2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Switch_2_1"
  op: "Switch"
  input: "lstm_1/while/Merge_2_1"
  input: "lstm_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_2_1"
  op: "Exit"
  input: "lstm_1/while/Switch_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray_2"
  input: "lstm_1/sub_1"
  input: "lstm_1/while/Exit_2_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3_1"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray_2"
  input: "lstm_1/while/Exit_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range_1"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start_1"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3_1"
  input: "lstm_1/TensorArrayStack/range/delta_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3_1"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray_2"
  input: "lstm_1/TensorArrayStack/range_1"
  input: "lstm_1/while/Exit_2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3_1"
  input: "lstm_1/transpose_1/perm_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten/Shape_1"
  op: "Shape"
  input: "lstm_1/transpose_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten/strided_slice_1"
  op: "StridedSlice"
  input: "flatten/Shape_1"
  input: "flatten/strided_slice/stack_3"
  input: "flatten/strided_slice/stack_1_1"
  input: "flatten/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten/Prod_1"
  op: "Prod"
  input: "flatten/strided_slice_1"
  input: "flatten/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten/stack_1"
  op: "Pack"
  input: "flatten/stack/0_1"
  input: "flatten/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten/Reshape_1"
  op: "Reshape"
  input: "lstm_1/transpose_1_1"
  input: "flatten/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/MatMul_1"
  op: "MatMul"
  input: "flatten/Reshape_1"
  input: "dense_1/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd_1"
  op: "BiasAdd"
  input: "dense_1/MatMul_1"
  input: "dense_1/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu_1"
  op: "Relu"
  input: "dense_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/MatMul_1"
  op: "MatMul"
  input: "dense_1/Relu_1"
  input: "output/kernel/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output/BiasAdd_1"
  op: "BiasAdd"
  input: "output/MatMul_1"
  input: "output/bias/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "output/Softmax_1"
  op: "Softmax"
  input: "output/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "output/Softmax_1"
  input: "metrics/acc/ArgMax/dimension_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast_2"
  op: "Cast"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal_1"
  op: "Equal"
  input: "metrics/acc/Max_1"
  input: "metrics/acc/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Cast_1_1"
  op: "Cast"
  input: "metrics/acc/Equal_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Mean_1"
  op: "Mean"
  input: "metrics/acc/Cast_1_1"
  input: "metrics/acc/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/clip_by_value_1"
  op: "ClipByValue"
  input: "output/Softmax_1"
  input: "loss/output_loss/Const_3"
  input: "loss/output_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Log_1"
  op: "Log"
  input: "loss/output_loss/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Reshape_1_1"
  op: "Reshape"
  input: "loss/output_loss/Log_1"
  input: "loss/output_loss/Reshape_1/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/output_loss/Reshape_1_1"
  input: "loss/output_loss/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/output_loss/Mean_3"
  op: "Mean"
  input: "loss/output_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_1"
  input: "loss/output_loss/Mean/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/mul_1"
  op: "Mul"
  input: "loss/output_loss/Mean_3"
  input: "output_sample_weights_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/truediv_1"
  op: "RealDiv"
  input: "loss/output_loss/mul_1"
  input: "loss/output_loss/Mean_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Mean_2_1"
  op: "Mean"
  input: "loss/output_loss/truediv_1"
  input: "loss/output_loss/Const_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul_1"
  op: "Mul"
  input: "loss/mul/x_1"
  input: "loss/output_loss/Mean_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_6"
  op: "Add"
  input: "loss/mul_1"
  input: "dense_1/weight_regularizer/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1_1"
  op: "Add"
  input: "loss/add_6"
  input: "dense_1/weight_regularizer_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2_1"
  op: "Add"
  input: "loss/add_1_1"
  input: "lstm_1/weight_regularizer_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3_1"
  op: "Add"
  input: "loss/add_2_1"
  input: "lstm_1/weight_regularizer/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4_1"
  op: "Add"
  input: "loss/add_3_1"
  input: "output/weight_regularizer_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5_1"
  op: "Add"
  input: "loss/add_4_1"
  input: "output/weight_regularizer/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2_1"
  op: "Identity"
  input: "lstm_1/while/Switch_2_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_1_input_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum_1"
  op: "Sum"
  input: "lstm_1/zeros_like_1"
  input: "lstm_1/Sum/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims_1"
  op: "ExpandDims"
  input: "lstm_1/Sum_1"
  input: "lstm_1/ExpandDims/dim_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1_1"
  op: "Tile"
  input: "lstm_1/ExpandDims_1"
  input: "lstm_1/Tile_1/multiples_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Enter_4_1"
  op: "Enter"
  input: "lstm_1/Tile_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge_4_1"
  op: "Merge"
  input: "lstm_1/while/Enter_4_1"
  input: "lstm_1/while/NextIteration_4_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Switch_4_1"
  op: "Switch"
  input: "lstm_1/while/Merge_4_1"
  input: "lstm_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_4_1"
  op: "Exit"
  input: "lstm_1/while/Switch_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_4_1"
  op: "Identity"
  input: "lstm_1/while/Switch_4_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tile_2"
  op: "Tile"
  input: "lstm_1/ExpandDims_1"
  input: "lstm_1/Tile/multiples_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3_1"
  op: "Enter"
  input: "lstm_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge_3_1"
  op: "Merge"
  input: "lstm_1/while/Enter_3_1"
  input: "lstm_1/while/NextIteration_3_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Switch_3_1"
  op: "Switch"
  input: "lstm_1/while/Merge_3_1"
  input: "lstm_1/while/LoopCond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_3_1"
  op: "Exit"
  input: "lstm_1/while/Switch_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3_1"
  op: "Identity"
  input: "lstm_1/while/Switch_3_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7_1"
  op: "MatMul"
  input: "lstm_1/while/Identity_3_1"
  input: "lstm_1/while/MatMul_7/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_7_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3_1"
  input: "lstm_1/while/MatMul_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4_1"
  op: "Mul"
  input: "lstm_1/while/mul_4/x_1"
  input: "lstm_1/while/add_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_8_1"
  op: "Add"
  input: "lstm_1/while/mul_4_1"
  input: "lstm_1/while/add_8/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2_1"
  op: "ClipByValue"
  input: "lstm_1/while/add_8_1"
  input: "lstm_1/while/Const_4_1"
  input: "lstm_1/while/Const_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6_1"
  op: "MatMul"
  input: "lstm_1/while/Identity_3_1"
  input: "lstm_1/while/MatMul_6/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_5_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2_1"
  input: "lstm_1/while/MatMul_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_2"
  op: "Tanh"
  input: "lstm_1/while/add_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5_1"
  op: "MatMul"
  input: "lstm_1/while/Identity_3_1"
  input: "lstm_1/while/MatMul_5/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_3_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1_1"
  input: "lstm_1/while/MatMul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x_1"
  input: "lstm_1/while/add_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_4_1"
  op: "Add"
  input: "lstm_1/while/mul_1_1"
  input: "lstm_1/while/add_4/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1_1"
  op: "ClipByValue"
  input: "lstm_1/while/add_4_1"
  input: "lstm_1/while/Const_2_1"
  input: "lstm_1/while/Const_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2_1"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1_1"
  input: "lstm_1/while/Identity_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4_1"
  op: "MatMul"
  input: "lstm_1/while/Identity_3_1"
  input: "lstm_1/while/MatMul_4/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_1_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd_4"
  input: "lstm_1/while/MatMul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_6"
  op: "Mul"
  input: "lstm_1/while/mul/x_1"
  input: "lstm_1/while/add_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_2_1"
  op: "Add"
  input: "lstm_1/while/mul_6"
  input: "lstm_1/while/add_2/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_3"
  op: "ClipByValue"
  input: "lstm_1/while/add_2_1"
  input: "lstm_1/while/Const_6"
  input: "lstm_1/while/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3_1"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_3"
  input: "lstm_1/while/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_6_1"
  op: "Add"
  input: "lstm_1/while/mul_2_1"
  input: "lstm_1/while/mul_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_4_1"
  op: "NextIteration"
  input: "lstm_1/while/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1_1"
  op: "Tanh"
  input: "lstm_1/while/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5_1"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2_1"
  input: "lstm_1/while/Tanh_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3_1"
  op: "NextIteration"
  input: "lstm_1/while/mul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_1"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
  input: "lstm_1/while/Identity_1_1"
  input: "lstm_1/while/mul_5_1"
  input: "lstm_1/while/Identity_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7_1"
  op: "MatMul"
  input: "lstm_1/Tile_2"
  input: "lstm_1/strided_slice_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6_1"
  op: "Add"
  input: "lstm_1/BiasAdd_3_1"
  input: "lstm_1/MatMul_7_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4_1"
  op: "Mul"
  input: "lstm_1/mul_4/x_1"
  input: "lstm_1/add_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7_1"
  op: "Add"
  input: "lstm_1/mul_4_1"
  input: "lstm_1/add_7/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2_1"
  op: "ClipByValue"
  input: "lstm_1/add_7_1"
  input: "lstm_1/Const_7_1"
  input: "lstm_1/Const_8_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6_1"
  op: "MatMul"
  input: "lstm_1/Tile_2"
  input: "lstm_1/strided_slice_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4_1"
  op: "Add"
  input: "lstm_1/BiasAdd_2_1"
  input: "lstm_1/MatMul_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_2"
  op: "Tanh"
  input: "lstm_1/add_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5_1"
  op: "MatMul"
  input: "lstm_1/Tile_2"
  input: "lstm_1/strided_slice_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2_1"
  op: "Add"
  input: "lstm_1/BiasAdd_1_1"
  input: "lstm_1/MatMul_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1_1"
  op: "Mul"
  input: "lstm_1/mul_1/x_1"
  input: "lstm_1/add_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3_1"
  op: "Add"
  input: "lstm_1/mul_1_1"
  input: "lstm_1/add_3/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1_1"
  op: "ClipByValue"
  input: "lstm_1/add_3_1"
  input: "lstm_1/Const_5_1"
  input: "lstm_1/Const_6_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2_1"
  op: "Mul"
  input: "lstm_1/clip_by_value_1_1"
  input: "lstm_1/Tile_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_4_1"
  op: "MatMul"
  input: "lstm_1/Tile_2"
  input: "lstm_1/strided_slice_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_8"
  op: "Add"
  input: "lstm_1/BiasAdd_4"
  input: "lstm_1/MatMul_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_6"
  op: "Mul"
  input: "lstm_1/mul/x_1"
  input: "lstm_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1_1"
  op: "Add"
  input: "lstm_1/mul_6"
  input: "lstm_1/add_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_3"
  op: "ClipByValue"
  input: "lstm_1/add_1_1"
  input: "lstm_1/Const_3_1"
  input: "lstm_1/Const_4_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3_1"
  op: "Mul"
  input: "lstm_1/clip_by_value_3"
  input: "lstm_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5_1"
  op: "Add"
  input: "lstm_1/mul_2_1"
  input: "lstm_1/mul_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1_1"
  op: "Tanh"
  input: "lstm_1/add_5_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5_1"
  op: "Mul"
  input: "lstm_1/clip_by_value_2_1"
  input: "lstm_1/Tanh_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/iterations"
        string_val: "Adam/lr"
        string_val: "Adam_1/beta_1"
        string_val: "Adam_1/beta_2"
        string_val: "Adam_1/decay"
        string_val: "Adam_1/iterations"
        string_val: "Adam_1/lr"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1_1/bias"
        string_val: "dense_1_1/kernel"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1_1/bias"
        string_val: "lstm_1_1/kernel"
        string_val: "lstm_1_1/recurrent_kernel"
        string_val: "output/bias"
        string_val: "output/kernel"
        string_val: "output_1/bias"
        string_val: "output_1/kernel"
        string_val: "training/Adam/Variable"
        string_val: "training/Adam/Variable_1"
        string_val: "training/Adam/Variable_10"
        string_val: "training/Adam/Variable_11"
        string_val: "training/Adam/Variable_12"
        string_val: "training/Adam/Variable_13"
        string_val: "training/Adam/Variable_14"
        string_val: "training/Adam/Variable_15"
        string_val: "training/Adam/Variable_16"
        string_val: "training/Adam/Variable_17"
        string_val: "training/Adam/Variable_18"
        string_val: "training/Adam/Variable_19"
        string_val: "training/Adam/Variable_2"
        string_val: "training/Adam/Variable_20"
        string_val: "training/Adam/Variable_3"
        string_val: "training/Adam/Variable_4"
        string_val: "training/Adam/Variable_5"
        string_val: "training/Adam/Variable_6"
        string_val: "training/Adam/Variable_7"
        string_val: "training/Adam/Variable_8"
        string_val: "training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2"
  op: "SaveV2"
  input: "save_1/Const"
  input: "save_1/SaveV2/tensor_names"
  input: "save_1/SaveV2/shape_and_slices"
  input: "Adam/beta_1"
  input: "Adam/beta_2"
  input: "Adam/decay"
  input: "Adam/iterations"
  input: "Adam/lr"
  input: "Adam_1/beta_1"
  input: "Adam_1/beta_2"
  input: "Adam_1/decay"
  input: "Adam_1/iterations"
  input: "Adam_1/lr"
  input: "dense_1/bias"
  input: "dense_1/kernel"
  input: "dense_1_1/bias"
  input: "dense_1_1/kernel"
  input: "lstm_1/bias"
  input: "lstm_1/kernel"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1_1/bias"
  input: "lstm_1_1/kernel"
  input: "lstm_1_1/recurrent_kernel"
  input: "output/bias"
  input: "output/kernel"
  input: "output_1/bias"
  input: "output_1/kernel"
  input: "training/Adam/Variable"
  input: "training/Adam/Variable_1"
  input: "training/Adam/Variable_10"
  input: "training/Adam/Variable_11"
  input: "training/Adam/Variable_12"
  input: "training/Adam/Variable_13"
  input: "training/Adam/Variable_14"
  input: "training/Adam/Variable_15"
  input: "training/Adam/Variable_16"
  input: "training/Adam/Variable_17"
  input: "training/Adam/Variable_18"
  input: "training/Adam/Variable_19"
  input: "training/Adam/Variable_2"
  input: "training/Adam/Variable_20"
  input: "training/Adam/Variable_3"
  input: "training/Adam/Variable_4"
  input: "training/Adam/Variable_5"
  input: "training/Adam/Variable_6"
  input: "training/Adam/Variable_7"
  input: "training/Adam/Variable_8"
  input: "training/Adam/Variable_9"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/control_dependency"
  op: "Identity"
  input: "save_1/Const"
  input: "^save_1/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/Const"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/iterations"
        string_val: "Adam/lr"
        string_val: "Adam_1/beta_1"
        string_val: "Adam_1/beta_2"
        string_val: "Adam_1/decay"
        string_val: "Adam_1/iterations"
        string_val: "Adam_1/lr"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1_1/bias"
        string_val: "dense_1_1/kernel"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1_1/bias"
        string_val: "lstm_1_1/kernel"
        string_val: "lstm_1_1/recurrent_kernel"
        string_val: "output/bias"
        string_val: "output/kernel"
        string_val: "output_1/bias"
        string_val: "output_1/kernel"
        string_val: "training/Adam/Variable"
        string_val: "training/Adam/Variable_1"
        string_val: "training/Adam/Variable_10"
        string_val: "training/Adam/Variable_11"
        string_val: "training/Adam/Variable_12"
        string_val: "training/Adam/Variable_13"
        string_val: "training/Adam/Variable_14"
        string_val: "training/Adam/Variable_15"
        string_val: "training/Adam/Variable_16"
        string_val: "training/Adam/Variable_17"
        string_val: "training/Adam/Variable_18"
        string_val: "training/Adam/Variable_19"
        string_val: "training/Adam/Variable_2"
        string_val: "training/Adam/Variable_20"
        string_val: "training/Adam/Variable_3"
        string_val: "training/Adam/Variable_4"
        string_val: "training/Adam/Variable_5"
        string_val: "training/Adam/Variable_6"
        string_val: "training/Adam/Variable_7"
        string_val: "training/Adam/Variable_8"
        string_val: "training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2/tensor_names"
  input: "save_1/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "save_1/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_1"
  op: "Assign"
  input: "Adam/beta_2"
  input: "save_1/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_2"
  op: "Assign"
  input: "Adam/decay"
  input: "save_1/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_3"
  op: "Assign"
  input: "Adam/iterations"
  input: "save_1/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_4"
  op: "Assign"
  input: "Adam/lr"
  input: "save_1/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_5"
  op: "Assign"
  input: "Adam_1/beta_1"
  input: "save_1/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_6"
  op: "Assign"
  input: "Adam_1/beta_2"
  input: "save_1/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_7"
  op: "Assign"
  input: "Adam_1/decay"
  input: "save_1/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_8"
  op: "Assign"
  input: "Adam_1/iterations"
  input: "save_1/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_9"
  op: "Assign"
  input: "Adam_1/lr"
  input: "save_1/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_10"
  op: "Assign"
  input: "dense_1/bias"
  input: "save_1/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_11"
  op: "Assign"
  input: "dense_1/kernel"
  input: "save_1/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_12"
  op: "Assign"
  input: "dense_1_1/bias"
  input: "save_1/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_13"
  op: "Assign"
  input: "dense_1_1/kernel"
  input: "save_1/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_14"
  op: "Assign"
  input: "lstm_1/bias"
  input: "save_1/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_15"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "save_1/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_16"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "save_1/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_17"
  op: "Assign"
  input: "lstm_1_1/bias"
  input: "save_1/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_18"
  op: "Assign"
  input: "lstm_1_1/kernel"
  input: "save_1/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_19"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel"
  input: "save_1/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_20"
  op: "Assign"
  input: "output/bias"
  input: "save_1/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_21"
  op: "Assign"
  input: "output/kernel"
  input: "save_1/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_22"
  op: "Assign"
  input: "output_1/bias"
  input: "save_1/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_23"
  op: "Assign"
  input: "output_1/kernel"
  input: "save_1/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "save_1/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "save_1/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_26"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "save_1/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "save_1/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "save_1/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_29"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "save_1/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "save_1/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "save_1/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_32"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "save_1/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "save_1/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "save_1/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_35"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "save_1/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "save_1/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "save_1/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_38"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "save_1/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "save_1/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "save_1/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_41"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "save_1/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "save_1/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "save_1/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_44"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "save_1/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_all"
  op: "NoOp"
  input: "^save_1/Assign"
  input: "^save_1/Assign_1"
  input: "^save_1/Assign_10"
  input: "^save_1/Assign_11"
  input: "^save_1/Assign_12"
  input: "^save_1/Assign_13"
  input: "^save_1/Assign_14"
  input: "^save_1/Assign_15"
  input: "^save_1/Assign_16"
  input: "^save_1/Assign_17"
  input: "^save_1/Assign_18"
  input: "^save_1/Assign_19"
  input: "^save_1/Assign_2"
  input: "^save_1/Assign_20"
  input: "^save_1/Assign_21"
  input: "^save_1/Assign_22"
  input: "^save_1/Assign_23"
  input: "^save_1/Assign_24"
  input: "^save_1/Assign_25"
  input: "^save_1/Assign_26"
  input: "^save_1/Assign_27"
  input: "^save_1/Assign_28"
  input: "^save_1/Assign_29"
  input: "^save_1/Assign_3"
  input: "^save_1/Assign_30"
  input: "^save_1/Assign_31"
  input: "^save_1/Assign_32"
  input: "^save_1/Assign_33"
  input: "^save_1/Assign_34"
  input: "^save_1/Assign_35"
  input: "^save_1/Assign_36"
  input: "^save_1/Assign_37"
  input: "^save_1/Assign_38"
  input: "^save_1/Assign_39"
  input: "^save_1/Assign_4"
  input: "^save_1/Assign_40"
  input: "^save_1/Assign_41"
  input: "^save_1/Assign_42"
  input: "^save_1/Assign_43"
  input: "^save_1/Assign_44"
  input: "^save_1/Assign_5"
  input: "^save_1/Assign_6"
  input: "^save_1/Assign_7"
  input: "^save_1/Assign_8"
  input: "^save_1/Assign_9"
}
node {
  name: "save_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_2/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/iterations"
        string_val: "Adam/lr"
        string_val: "Adam_1/beta_1"
        string_val: "Adam_1/beta_2"
        string_val: "Adam_1/decay"
        string_val: "Adam_1/iterations"
        string_val: "Adam_1/lr"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1_1/bias"
        string_val: "dense_1_1/kernel"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1_1/bias"
        string_val: "lstm_1_1/kernel"
        string_val: "lstm_1_1/recurrent_kernel"
        string_val: "output/bias"
        string_val: "output/kernel"
        string_val: "output_1/bias"
        string_val: "output_1/kernel"
        string_val: "training/Adam/Variable"
        string_val: "training/Adam/Variable_1"
        string_val: "training/Adam/Variable_10"
        string_val: "training/Adam/Variable_11"
        string_val: "training/Adam/Variable_12"
        string_val: "training/Adam/Variable_13"
        string_val: "training/Adam/Variable_14"
        string_val: "training/Adam/Variable_15"
        string_val: "training/Adam/Variable_16"
        string_val: "training/Adam/Variable_17"
        string_val: "training/Adam/Variable_18"
        string_val: "training/Adam/Variable_19"
        string_val: "training/Adam/Variable_2"
        string_val: "training/Adam/Variable_20"
        string_val: "training/Adam/Variable_3"
        string_val: "training/Adam/Variable_4"
        string_val: "training/Adam/Variable_5"
        string_val: "training/Adam/Variable_6"
        string_val: "training/Adam/Variable_7"
        string_val: "training/Adam/Variable_8"
        string_val: "training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "save_2/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_2/SaveV2"
  op: "SaveV2"
  input: "save_2/Const"
  input: "save_2/SaveV2/tensor_names"
  input: "save_2/SaveV2/shape_and_slices"
  input: "Adam/beta_1"
  input: "Adam/beta_2"
  input: "Adam/decay"
  input: "Adam/iterations"
  input: "Adam/lr"
  input: "Adam_1/beta_1"
  input: "Adam_1/beta_2"
  input: "Adam_1/decay"
  input: "Adam_1/iterations"
  input: "Adam_1/lr"
  input: "dense_1/bias"
  input: "dense_1/kernel"
  input: "dense_1_1/bias"
  input: "dense_1_1/kernel"
  input: "lstm_1/bias"
  input: "lstm_1/kernel"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1_1/bias"
  input: "lstm_1_1/kernel"
  input: "lstm_1_1/recurrent_kernel"
  input: "output/bias"
  input: "output/kernel"
  input: "output_1/bias"
  input: "output_1/kernel"
  input: "training/Adam/Variable"
  input: "training/Adam/Variable_1"
  input: "training/Adam/Variable_10"
  input: "training/Adam/Variable_11"
  input: "training/Adam/Variable_12"
  input: "training/Adam/Variable_13"
  input: "training/Adam/Variable_14"
  input: "training/Adam/Variable_15"
  input: "training/Adam/Variable_16"
  input: "training/Adam/Variable_17"
  input: "training/Adam/Variable_18"
  input: "training/Adam/Variable_19"
  input: "training/Adam/Variable_2"
  input: "training/Adam/Variable_20"
  input: "training/Adam/Variable_3"
  input: "training/Adam/Variable_4"
  input: "training/Adam/Variable_5"
  input: "training/Adam/Variable_6"
  input: "training/Adam/Variable_7"
  input: "training/Adam/Variable_8"
  input: "training/Adam/Variable_9"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_2/control_dependency"
  op: "Identity"
  input: "save_2/Const"
  input: "^save_2/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_2/Const"
      }
    }
  }
}
node {
  name: "save_2/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/iterations"
        string_val: "Adam/lr"
        string_val: "Adam_1/beta_1"
        string_val: "Adam_1/beta_2"
        string_val: "Adam_1/decay"
        string_val: "Adam_1/iterations"
        string_val: "Adam_1/lr"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1_1/bias"
        string_val: "dense_1_1/kernel"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1_1/bias"
        string_val: "lstm_1_1/kernel"
        string_val: "lstm_1_1/recurrent_kernel"
        string_val: "output/bias"
        string_val: "output/kernel"
        string_val: "output_1/bias"
        string_val: "output_1/kernel"
        string_val: "training/Adam/Variable"
        string_val: "training/Adam/Variable_1"
        string_val: "training/Adam/Variable_10"
        string_val: "training/Adam/Variable_11"
        string_val: "training/Adam/Variable_12"
        string_val: "training/Adam/Variable_13"
        string_val: "training/Adam/Variable_14"
        string_val: "training/Adam/Variable_15"
        string_val: "training/Adam/Variable_16"
        string_val: "training/Adam/Variable_17"
        string_val: "training/Adam/Variable_18"
        string_val: "training/Adam/Variable_19"
        string_val: "training/Adam/Variable_2"
        string_val: "training/Adam/Variable_20"
        string_val: "training/Adam/Variable_3"
        string_val: "training/Adam/Variable_4"
        string_val: "training/Adam/Variable_5"
        string_val: "training/Adam/Variable_6"
        string_val: "training/Adam/Variable_7"
        string_val: "training/Adam/Variable_8"
        string_val: "training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "save_2/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 45
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_2/RestoreV2"
  op: "RestoreV2"
  input: "save_2/Const"
  input: "save_2/RestoreV2/tensor_names"
  input: "save_2/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_2/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "save_2/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_1"
  op: "Assign"
  input: "Adam/beta_2"
  input: "save_2/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_2"
  op: "Assign"
  input: "Adam/decay"
  input: "save_2/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_3"
  op: "Assign"
  input: "Adam/iterations"
  input: "save_2/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_4"
  op: "Assign"
  input: "Adam/lr"
  input: "save_2/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_5"
  op: "Assign"
  input: "Adam_1/beta_1"
  input: "save_2/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_6"
  op: "Assign"
  input: "Adam_1/beta_2"
  input: "save_2/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_7"
  op: "Assign"
  input: "Adam_1/decay"
  input: "save_2/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_8"
  op: "Assign"
  input: "Adam_1/iterations"
  input: "save_2/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_9"
  op: "Assign"
  input: "Adam_1/lr"
  input: "save_2/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam_1/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_10"
  op: "Assign"
  input: "dense_1/bias"
  input: "save_2/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_11"
  op: "Assign"
  input: "dense_1/kernel"
  input: "save_2/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_12"
  op: "Assign"
  input: "dense_1_1/bias"
  input: "save_2/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_13"
  op: "Assign"
  input: "dense_1_1/kernel"
  input: "save_2/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_14"
  op: "Assign"
  input: "lstm_1/bias"
  input: "save_2/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_15"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "save_2/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_16"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "save_2/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_17"
  op: "Assign"
  input: "lstm_1_1/bias"
  input: "save_2/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_18"
  op: "Assign"
  input: "lstm_1_1/kernel"
  input: "save_2/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_19"
  op: "Assign"
  input: "lstm_1_1/recurrent_kernel"
  input: "save_2/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_20"
  op: "Assign"
  input: "output/bias"
  input: "save_2/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_21"
  op: "Assign"
  input: "output/kernel"
  input: "save_2/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_22"
  op: "Assign"
  input: "output_1/bias"
  input: "save_2/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_23"
  op: "Assign"
  input: "output_1/kernel"
  input: "save_2/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "save_2/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "save_2/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_26"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "save_2/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "save_2/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "save_2/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_29"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "save_2/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "save_2/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "save_2/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_32"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "save_2/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "save_2/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "save_2/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_35"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "save_2/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "save_2/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "save_2/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_38"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "save_2/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "save_2/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "save_2/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_41"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "save_2/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "save_2/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "save_2/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/Assign_44"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "save_2/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_2/restore_all"
  op: "NoOp"
  input: "^save_2/Assign"
  input: "^save_2/Assign_1"
  input: "^save_2/Assign_10"
  input: "^save_2/Assign_11"
  input: "^save_2/Assign_12"
  input: "^save_2/Assign_13"
  input: "^save_2/Assign_14"
  input: "^save_2/Assign_15"
  input: "^save_2/Assign_16"
  input: "^save_2/Assign_17"
  input: "^save_2/Assign_18"
  input: "^save_2/Assign_19"
  input: "^save_2/Assign_2"
  input: "^save_2/Assign_20"
  input: "^save_2/Assign_21"
  input: "^save_2/Assign_22"
  input: "^save_2/Assign_23"
  input: "^save_2/Assign_24"
  input: "^save_2/Assign_25"
  input: "^save_2/Assign_26"
  input: "^save_2/Assign_27"
  input: "^save_2/Assign_28"
  input: "^save_2/Assign_29"
  input: "^save_2/Assign_3"
  input: "^save_2/Assign_30"
  input: "^save_2/Assign_31"
  input: "^save_2/Assign_32"
  input: "^save_2/Assign_33"
  input: "^save_2/Assign_34"
  input: "^save_2/Assign_35"
  input: "^save_2/Assign_36"
  input: "^save_2/Assign_37"
  input: "^save_2/Assign_38"
  input: "^save_2/Assign_39"
  input: "^save_2/Assign_4"
  input: "^save_2/Assign_40"
  input: "^save_2/Assign_41"
  input: "^save_2/Assign_42"
  input: "^save_2/Assign_43"
  input: "^save_2/Assign_44"
  input: "^save_2/Assign_5"
  input: "^save_2/Assign_6"
  input: "^save_2/Assign_7"
  input: "^save_2/Assign_8"
  input: "^save_2/Assign_9"
}
versions {
  producer: 26
}
